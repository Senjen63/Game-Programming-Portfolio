#pragma once

#include "Trackable.h"
#include <vector>
#include <Vector2D.h>
#include "GraphicsBuffer.h"

enum class SpriteFlip
{
    NONE = SDL_FLIP_NONE,
    HORIZONTAL = SDL_FLIP_HORIZONTAL,
    VERTICAL = SDL_FLIP_VERTICAL
};

class Sprite : public Trackable
{
public:
    /// <summary>
    /// Slices a buffer into an array of sprites. When numSprites, sheetWidth, or sheetHeight are -1 then the function will figure it out for you. 
    /// </summary>
    static std::vector<Sprite> slice(GraphicsBuffer* pBuffer, int spriteWidth, int spriteHeight, int numSprites = -1,
        int sheetWidth = -1, int sheetHeight = -1, Vector2D sheetStart = Vector2D());

    Sprite(GraphicsBuffer* pBuffer, const Vector2D& loc, int width, int height);
    Sprite(GraphicsBuffer* pBuffer);

    Sprite() = default;
    Sprite(const Sprite & other) = default;
    Sprite& operator=(const Sprite&) = default;

    ~Sprite() {};

    GraphicsBuffer* getBuffer() const { return mpBuffer; } // Doesn't ensure that the buffer actaully exist :/
    Vector2D getLoc() const { return mLoc; }
    int getWidth() const { return mWidth; }
    int getHeight() const { return mHeight; }

    Vector2D getOffsetToCenter(float scale = 1) const { return Vector2D(mWidth * 0.5f, mHeight * 0.5f) * scale; }

private:
    GraphicsBuffer* mpBuffer = nullptr;
    Vector2D mLoc = Vector2D();
    int mWidth = 0;
    int mHeight = 0;
};
