//BP
#include "GraphicsBufferManager.h"

GraphicsBufferManager::GraphicsBufferManager()
{
    mpPlaceholder = nullptr;
}

GraphicsBufferManager::~GraphicsBufferManager()
{
    cleaner();
    delete mpPlaceholder;
}

void GraphicsBufferManager::init()
{
    mpPlaceholder = new GraphicsBuffer(Color(255, 0, 255),
        SPRITE_X_LENGTH,
        SPRITE_Y_LENGTH);
}

void GraphicsBufferManager::clearBuffs()
{
    for (auto toClear : mpGraphicsBufferList)
    {

        if (toClear.second != mpPlaceholder
            && toClear.second != nullptr)
        {

            delete toClear.second;

        }

    }
    mpGraphicsBufferList.clear();
}

void GraphicsBufferManager::deleteBuffer(BuffTag tag)
{
    auto listIndex = mpGraphicsBufferList.find(tag);
    if (listIndex != mpGraphicsBufferList.end())
    {

        if (listIndex->second != nullptr)
        {

            delete listIndex->second;
            listIndex->second = nullptr;

        }
        mpGraphicsBufferList.erase(listIndex);

    }
}

GraphicsBuffer* GraphicsBufferManager::getBuffer(BuffTag tag)
{
    if (mpGraphicsBufferList.find(tag)
        != mpGraphicsBufferList.end())
    {

        return mpGraphicsBufferList[tag];

    }
    else
    {

        return NULL;

    }

}

void GraphicsBufferManager::deleteBuffer(GraphicsBuffer* newTag)
{
    for (auto buff
        : mpGraphicsBufferList)
    {

        if (buff.second == newTag)
        {

            if (buff.second != nullptr)
            {

                delete buff.second;
                buff.second = nullptr;

            }
            mpGraphicsBufferList.erase(buff.first);
            break;

        }

    }
}

void GraphicsBufferManager::addNewBuffer(BuffTag tag, GraphicsBuffer* newTag)
{
    
    if (newTag->checkBitmap())
    {

        mpGraphicsBufferList[tag] = mpPlaceholder;
        delete newTag;

    }
    else if (mpGraphicsBufferList.find(tag) == mpGraphicsBufferList.end()
        && !newTag->checkBitmap())
    {

        mpGraphicsBufferList[tag] = newTag;

    }
}