#include "Animation.h"

Animation::Animation()
{
	mpSprites = {};
	mTimer = 0;
	mCurrentTime = 0;
	mCurrentSprite = 0;
	mNumSprites = 0;
	mShouldLoop = false;
}

Animation::Animation(Animation* copy)
{
	mpSprites = copy->mpSprites;
	mTimer = copy->mTimer;
	mCurrentTime = copy->mCurrentTime;
	mCurrentSprite = copy->mCurrentSprite;
	mNumSprites = copy->mNumSprites;
	mShouldLoop = copy->mShouldLoop;
}

Animation::Animation(GraphicsBuffer* pBuffer, bool loop)
{
	//called in Unit.cpp
	slice(pBuffer, 4);

	mTimer = DEFAULT_TIMER;
	mCurrentTime = 0;
	mCurrentSprite = 0;
	mNumSprites = 4;
	mShouldLoop = loop;
}
Animation::Animation(GraphicsBuffer* pBuffer)
{
	slice(pBuffer, NUM_FRAMES);

	mTimer = DEFAULT_TIMER;
	mCurrentTime = 0;
	mCurrentSprite = 0;
	mNumSprites = NUM_FRAMES;
	mShouldLoop = true;
}

Animation::Animation(GraphicsBuffer* pBuffer, int width, int height)
{
	specificSlice(pBuffer, width, height);

	mTimer = DEFAULT_TIMER;
	mCurrentTime = 0;
	mCurrentSprite = 0;
	mNumSprites = width * height;
	mShouldLoop = true;
}

void Animation::slice(GraphicsBuffer* pBuffer, int count)
{
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			mpSprites.push_back(new Sprite(pBuffer, i * 50, j * 50, 50, 50));
		}
	}
	
}

void Animation::specificSlice(GraphicsBuffer* pBuffer, int width, int height)
{
	for (int i = 0; i < width; i++)
	{
		for (int j = 0; j < height; j++)
		{
			mpSprites.push_back(new Sprite(pBuffer, i * 50, j * 50, 50, 50));
		}
	}

}

Animation::~Animation()
{
	for (auto p : mpSprites)
	{
		if (p)
		{
			delete p;
		}
		
	}
	mpSprites.clear();
	
	mTimer = 0;
	mCurrentTime = 0;
	mCurrentSprite = 0;
	mNumSprites = 0;
	mShouldLoop = false;
}
void Animation::cleanUp()
{
	
}
void Animation::Update(double dt)
{
	if (dt > mTimer)
	{
		if (mCurrentSprite < mNumSprites - 1)
		{
			mCurrentSprite++;
		}			
		else if (mCurrentSprite == mNumSprites - 1)
		{
			if (mShouldLoop)
			{
				mCurrentSprite = 0;
			}				
		}
			
	}
}

void Animation::changeTimer(float timerChange)
{
	mTimer += timerChange;
	if (mTimer <= 0)
	{
		mTimer = DEFAULT_TIMER;
	}
}