
#include "Game.h"
#include <windows.h>

Game* Game::mpsGameSystem = NULL;

Game::Game()
{
	mpSystem = new GraphicsSystem();
	mInputSystem.init();
}

Game::~Game()
{
	cleanup();
}

void Game::createInstance()
{
	if (mpsGameSystem == NULL)
	{
		mpsGameSystem = new Game;
	}
}

void Game::destroyInstance()
{
	delete mpsGameSystem;
}

Game* Game::getInstance()
{
	return mpsGameSystem;
}

void Game::init()
{
	mBufferManager.createAndManageBuffer(WOODS_FILENAME, ASSET_PATH + WOODS_FILENAME);
	mBufferManager.createAndManageBuffer(SMURF_FILENAME, ASSET_PATH + SMURF_FILENAME);
	mBufferManager.createAndManageBuffer(DEAN_FILENAME, ASSET_PATH + DEAN_FILENAME);
}

void Game::cleanup()
{	
	mpSystem->cleanUp();

	mBufferManager.cleanup();
	mUnitManager.cleanup();

	delete mpSystem;
}

void Game::doLoop()
{
	int i;

	PerformanceTracker* pTracker = new PerformanceTracker();

	Timer time;
	
	while (!mInputSystem.getKeyState(KeyCode::ESCAPE))
	{
		//start timers
		pTracker->clearTracker("loop");
		pTracker->startTracking("loop");
		time.start();

		mUnitManager.update(time.getElapsedTime());

		mpSystem->draw(mBufferManager.getBuffer(WOODS_FILENAME), Vector2D(), .5);

		mUnitManager.draw(mpSystem);

		mpSystem->flip();

		if (mInputSystem.getMouseDown(MouseButton::LEFT))
		{
			mUnitManager.createAndAddUnit();
			mUnitManager.setUnitPos(mInputSystem.getMousePosition() + Vector2D(SPRITE_WIDTH / 2, SPRITE_HEIGHT / 2));
		}

		if (mInputSystem.getMouseDown(MouseButton::RIGHT))
		{
			mUnitManager.deleteUnits(mInputSystem.getMousePosition());
		}
		
		if (mInputSystem.getKeyState(KeyCode::SPACE))
			mUnitManager.doAnimation();

		if (mInputSystem.getKeyState(KeyCode::ENTER))
			mUnitManager.setLast();

		//sleep for desired time
		time.sleepUntilElapsed(SLEEP_MS);
		pTracker->stopTracking("loop");
		cout << pTracker->getElapsedTime("loop") << endl;
	}

	delete pTracker;
}

GraphicsBuffer* Game::getGraphicsBuffer(string index)
{
	return mBufferManager.getBuffer(index);
}
