#include"unit.h"

Unit::Unit()
{

}
Unit::Unit(Vector2D position, int fps)
{
	mFps = fps;
	mLocation = position;
}
Unit::~Unit()
{

}

Animation& Unit::currentAnimation()
{
	return mAnimations[mCurrentIndex];
}

void Unit::addAnimation(Animation newAnimation)
{
	mAnimations.push_back(newAnimation);
}

void Unit::unitUpdate(float time)
{
	mAnimations[mCurrentIndex].animUpdate(time);
}

void Unit::setAnimation(int index)
{
	mCurrentIndex = index;
}

void Unit::draw(Vector2D sourceLocation, Vector2D sourceDim, Vector2D destLoc, Vector2D destDim, int flag)
{
	al_draw_scaled_bitmap(mAnimations[mCurrentIndex].getCurrentSprite().getGraphicsBuffer()->getBuffer(), sourceLocation.getX(), sourceLocation.getY(), sourceDim.getX(), sourceDim.getY(), destLoc.getX(), destLoc.getY(), destDim.getX(), destDim.getY(), flag);

	//al_draw_bitmap_region((mAnimations[mCurrentIndex].getCurrentSprite().getGraphicsBuffer()->getBuffer(), mAnimations[mCurrentIndex].getCurrentSprite().getSourceLocation().getX())
}

void Unit::setFps(int fps)
{
	mFps = fps;
	mAnimations[mCurrentIndex].changeAnimationSpeed(fps);
}
void Unit::changePosition(Vector2D newPos)
{
	mLocation = newPos;
}
int Unit::getAnimationVectorCount()
{
	return mAnimations.size();
}


int Unit::getCurrentIndex()
{
	return mCurrentIndex;
}
Vector2D Unit::getLocation()
{
	return mLocation;
}