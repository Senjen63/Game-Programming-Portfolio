#pragma once
#include <fstream>
#include <vector>

#include "Trackable.h"
#include "Vector2D.h"

using namespace std;

enum Difficulty
{
    EASY = 0,
    MEDIUM,
    HARD
};

class Level : public Trackable
{
    private:
        vector<Vector2D> mWallPositions;
        vector<Vector2D> mSpikePositions;
        vector<Vector2D> mArrowPositions;
        vector<Vector2D> mCollectiblePositions;
        Vector2D mDoorPos;
        Vector2D mSpawnPos;
        float mPlayerSpeed = 0;
        float mTimeLimitEasy= 0;
        float mTimeLimitNormal = 0;
        float mTimeLimitHard = 0;
        float mArrowFrequencyEasy = 0;
        float mArrowFrequencyNormal = 0;
        float mArrowFrequencyHard = 0;
        int mCollectibleWorth = 0;
        

        //float mSnakeSpeed = 0;
        //int mStartSegmentNum = 0;
        //int mEndSegmentNum = 0;
        //int mFoodPoints = 0;
        //float mPowerUpBaseFrequency = 0; //base seconds between each power up spawn
        //float mPowerUpRandomRange = 0; // maximum of random range added to base frequency
        //float mBonusChance = 0;
        //float mFastChance = 0;
        //float mSlowChance = 0;

    public:
        Level();
        Level(float playerSpeed, float timeLimit, float arrowFreq, int collectibleWorth);
        //Level(float snakeSpeed, int startSegmentNum, int endSegmentNum, int foodPoints, float powerUpBaseFrequency, float powerUpRandomRange, float bonusChance, float fastChance, float slowChance);
        ~Level();

     /*   float getSnakeSpeed() { return mSnakeSpeed; };
        int getStartSegmentNum() { return mStartSegmentNum; };
        int getEndSegmentNum() { return mEndSegmentNum; };
        int getFoodPoints() { return mFoodPoints; };
        float getPowerUpBaseFrequency() { return mPowerUpBaseFrequency; };
        float getPowerUpRandomRange() { return mPowerUpRandomRange; }
        float getBonusChance() { return mBonusChance; };
        float getFastChance() { return mFastChance; };
        float getSlowChance() { return mSlowChance; };*/
        vector<Vector2D> getWallPositions() { return mWallPositions; }
        vector<Vector2D> getSpikePositions() { return mSpikePositions; }
        vector<Vector2D> getArrowPositions() { return mArrowPositions; }
        vector<Vector2D> getCollectiblePositions() { return mCollectiblePositions; }
        Vector2D getDoorPos() { return mDoorPos; }
        Vector2D getSpawnPos() { return mSpawnPos; }
        float getPlayerSpeed() { return mPlayerSpeed;  }
        float getTimeLimit(Difficulty difficulty)
        {
            if (difficulty == Difficulty::EASY)
            {
                return mTimeLimitEasy;
            }
            if (difficulty == Difficulty::MEDIUM)
            {
                return mTimeLimitNormal;
            }
            if (difficulty == Difficulty::HARD)
            {
                return mTimeLimitHard;
            }
            else
            {
                return -1;
            }
        }
        float getArrowFreq(Difficulty difficulty) 
        {
            if (difficulty == Difficulty::EASY)
            {
                return mArrowFrequencyEasy;
            }
            if (difficulty == Difficulty::MEDIUM)
            {
                return mArrowFrequencyNormal;
            }
            if (difficulty == Difficulty::HARD)
            {
                return mArrowFrequencyHard;
            }
            else
            {
                return -1;
            }
        }
        int getCollectibleWorth() { return mCollectibleWorth;  }


        //void setSnakeSpeed(float newNum) { mSnakeSpeed = newNum; };
        //void setStartSegmentNum(int newNum) { mStartSegmentNum = newNum; };
        //void setEndSegmentNum(int newNum) { mEndSegmentNum = newNum; };
        //void setFoodPoints(int newNum) { mFoodPoints = newNum; };
        //void setPowerUpBaseFrequency(float newNum) { mPowerUpBaseFrequency = newNum; };
        //void setPowerUpRandomRange(float newNum) { mPowerUpRandomRange = newNum; }
        //void setBonusChance(float newNum) { mBonusChance = newNum; };
        //void setFastChance(float newNum) { mFastChance = newNum; };
        //void setSlowChance(float newNum) { mSlowChance = newNum; };
        void setPlayerSpeed(float playerSpeed) { mPlayerSpeed = playerSpeed; }
        void setTimeLimitEasy(float timeLimit) { mTimeLimitEasy = timeLimit; }
        void setTimeLimitNormal(float timeLimit) { mTimeLimitNormal = timeLimit; }
        void setTimeLimitHard(float timeLimit) { mTimeLimitHard = timeLimit; }
        void setArrowFreqEasy(float ArrowFreq) { mArrowFrequencyEasy = ArrowFreq; }
        void setArrowFreqNormal(float ArrowFreq) { mArrowFrequencyNormal = ArrowFreq; }
        void setArrowFreqHard(float ArrowFreq) { mArrowFrequencyHard = ArrowFreq; }
        void setCollectibleWorth(int collectibleWorth) { mCollectibleWorth = collectibleWorth; }
        void setDoorPos(Vector2D doorPos) { mDoorPos = doorPos; }
        void setSpawnPos(Vector2D spawnPos) { mSpawnPos = spawnPos; }

        void addWallPosition(Vector2D pos);
        void addSpikePosition(Vector2D pos);
        void addArrowPosition(Vector2D pos);
        void addCollectiblePosition(Vector2D pos);

        void printLevelInfo();
};