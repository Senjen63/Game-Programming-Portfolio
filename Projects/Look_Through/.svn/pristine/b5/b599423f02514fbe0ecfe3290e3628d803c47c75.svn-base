#pragma once
#include <vector>
#include <iostream>
#include <PerformanceTracker.h>
#include <cmath>
#include "GraphicsSystem.h"
#include "Vector2D.h"
using namespace std;
class Unit;
const int POWERUP_COLUMNS = 2;
const int POWERUP_ROWS = 2;
const int FOOD_COLUMNS = 4;
const int FOOD_ROWS = 4;
const int POWERUP_FRAMES = 3;
const int FOOD_FRAMES = 16;

enum class Direction
{
	RIGHT = 1,
	LEFT = -1,
	UP = 2,
	DOWN = -2
};

class UnitManager : public Trackable
{
private:
	vector<Unit*> mpUnits;
	vector<Unit*> mpFloors;

	int mNumUnits;
	int mNumFloors;

	Unit* mpSnakeHead;
	Unit* mpSnakeTail;
	Unit* mpFood;
	bool mHasSpeedPowerup = false;
	bool mHasSlowPowerup = false;
	int mSnakeSpeedTick = 5;
	int mCurrentSnakeTick = 0;
	int mCurrentDirection = (int)Direction::RIGHT;
	int mPrevDirection = (int)Direction::RIGHT;
	GraphicsBuffer* mpSnakeBuffer;
	bool mAddingSegment = false;
	int mPowerupFrequency = 1;
	int mSpeedTick = 0;
	int mSlowTick = 0;
	int mPowerupDuration = 10;
public:
	UnitManager();
	~UnitManager();
	void CleanUp();

	void CreateUnit();
	void CreateUnit(GraphicsBuffer* pBuffer);
	void CreateUnit(bool isWall, GraphicsBuffer* pBuffer);

	void SetUnitPos(Vector2D& position);
	Vector2D GetPosition(int index);
	void DestroyUnit(Unit* pUnit);
	void DestroyUnits(Vector2D mousePos);
	void Update(float elapsedTime);
	void UpdateTime(float amount);
	int GetNumUnits();
	Unit* GetUnit();
	Unit* GetUnit(int index);
	Unit* GetLastUnit();

	void DoAnimation();
	void Draw(GraphicsSystem* pGraphicsSystem);
	void SetLastUnit();

	void SpawnFood();
	void TrySpawnPowerup();
	void ChangeSnakeDirection(int newDirection);
	void SpawnSnake(Vector2D position, GraphicsBuffer* pBuffer, int startingSegments);
	void SetSnakeSpeed(int newSpeed);
	void SnakeUpdate();
	void SetPowerupFrequency(int frequency);
	friend class Game;
};