#pragma once

#include <fstream>
#include <string>

#include <EventSystem.h>
#include <Trackable.h>

#include "Level.h"
#include "UnitManager.h"

using namespace std;

//const string SNAKE_SPEED_TAG = "SnakeSpeed:";
//const string START_SEGMENTS_TAG = "StartSegmentNum:";
//const string END_SEGMENTS_TAG = "EndSegmentNum:";
//const string FOOD_POINTS_TAG = "FoodPoints:";
//const string POWER_UP_BASE_FREQUENCY_TAG = "PowerUpBaseFrequency:";
//const string POWER_UP_RANDOM_RANGE_TAG = "PowerUpRandomRange:";
//const string BONUS_CHANCE_TAG = "BonusChance:";
//const string FAST_CHANCE_TAG = "FastChance:";
//const string SLOW_CHANCE_TAG = "SlowChance:";
const string LEVEL_LOCATIONS_TAG = "LevelLocataions:";
const string PLAYER_SPEED_TAG = "PlayerSpeed:";
const string POINT_VALUE_TAG = "PointValue:";
const string EASY_DIFF_TAG = "EasyDiffculty:";
const string NORMAL_DIFF_TAG = "NormalDiffculty:";
const string HARD_DIFF_TAG = "HardDiffculty:";
const string EASY_TIME_TAG = "EasyTimeOfLevel:";
const string NORMAL_TIME_TAG = "NormalTimeOfLevel:";
const string HARD_TIME_TAG = "HardTimeOfLevel:";
const string EASY_FREQ_TAG = "EasyArrowFrequency:";
const string NORMAL_FREQ_TAG = "NormalArrowFrequency:";
const string HARD_FREQ_TAG = "HardArrowFrequency:";

const string SAVE_POSITION_TAG = "PlayerPosition:";
const string SAVE_LEVEL_TAG = "Level:";
const string SAVE_TIME_TAG = "TimeRemaining:";
const string SAVE_POINTS_TAG = "Points:";
const string SAVE_DIFFICULTY_TAG = "Difficulty:";
const string SAVE_COLLECTIBLE_TAG = "Collectibles:";

class LevelManager : public EventListener
{
    private:
        EventSystem* mpEventSystem = nullptr;

        vector<Level*> mLevels;
        unsigned int mCurrentLevel = 0;

        Vector2D mSavedPosition;
        vector<Vector2D> mSavedCollectibles;

        Difficulty mDifficulty;
        
    public:
        LevelManager();
        ~LevelManager();

        void init();
        void cleanup();

        Level* getCurrentLevel();
        Level* getLevelByIndex(unsigned int index);
        unsigned int getCurrentLevelIndex();
        unsigned int getLastLevelIndex();
        Difficulty getDifficulty();
        Vector2D getSavedPosition();
        vector<Vector2D> getSavedCollectiblePositions();

        void setLevelIndex(int levelIndex);
        void setDifficulty(Difficulty newDifficulty);

        virtual void handleEvent(const Event& currentEvent);

        Level* loadLevel(string path, GraphicsBuffer* wallBuffer, Vector2D wallSections);
        bool loadSave(string filePath, float& timeRemaining, int& points);
        void saveLevel(string filePath, UnitManager* pUnitManager, Vector2D playerPos, int timeRemaining, int points);
        //void nextLevel();
        //void restartLevels();
        void deleteAllLevels();

        void printLevelInfo(unsigned int index);
};