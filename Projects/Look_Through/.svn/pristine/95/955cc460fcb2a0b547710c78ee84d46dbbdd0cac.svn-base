#include "Game.h"

Game* Game::gpGame = NULL;

Game::Game()
{
	mpSystem = new GraphicsSystem();
	mInputSystem.init();
}

Game::~Game()
{
	cleanup();
}

Game* Game::startUp()
{
	if (gpGame == NULL)
	{
		gpGame = new Game;
	}

	return gpGame;
}

void Game::init()
{
	mBuffMan.addBuffer(BACKGROUND, ASSET_PATH + BACKGROUND);
	mBuffMan.addBuffer(SMURF, ASSET_PATH + SMURF);
	mBuffMan.addBuffer(DEAN, ASSET_PATH + DEAN);
}

void Game::cleanup()
{
	mpSystem->cleanUp();

	mBuffMan.cleanup();
	mUnitMan.cleanup();

	delete mpSystem;
}

GraphicsBuffer* Game::getBuff(string name)
{
	return mBuffMan.getBuffer(name);
}

void Game::doLoop()
{
	bool keepGoing = true;
	float timeAmount = .005;

	PerformanceTracker* pPerformanceTracker = new PerformanceTracker();
	
	Timer timer;
	float animationTime = 0;

	Vector2D mousePos = Vector2D((DISPLAY_WIDTH / 2) + (SPRITE_WIDTH / 2), (DISPLAY_HEIGHT / 2) + (SPRITE_HEIGHT / 2));

	while (keepGoing)
	{
		pPerformanceTracker->clearTracker("loop");
		pPerformanceTracker->startTracking("loop");
		timer.start();
		
		mUnitMan.updateAll(timer.getElapsedTime());

		mpSystem->draw(mBuffMan.getBuffer(BACKGROUND), Vector2D(), .5);
		mUnitMan.drawAll(mpSystem);
		
		mpSystem->flip();

		if (mInputSystem.getMouseState(1))
		{
			mUnitMan.addUnit(Vector2D(mInputSystem.getMousePosition()));
		}
		if (mInputSystem.getMouseState(2))
		{
			mUnitMan.deleteUnit(mInputSystem.getMousePosition());
		}

		/*if (mInputSystem.getKeyState(KEY_F))
		{
			mpObject->setTime(-timeAmount);
		}
		else if (mInputSystem.getKeyState(KEY_S))
		{
			mpObject->setTime(timeAmount);
		}*/
		else if (mInputSystem.getKeyState(KEY_ENTER))
		{
			mUnitMan.changeLast();
		}

		else if (mInputSystem.getKeyState(KEY_SPACE))
		{
			mUnitMan.pauseUnits();
		}

		else if (mInputSystem.getKeyState(KEY_ESCAPE))
		{
			keepGoing = false;
			mUnitMan.clear();
		}

		timer.sleepUntilElapsed(SLEEP_TIME);
		pPerformanceTracker->stopTracking("loop");
		cout << "Frame took:" << pPerformanceTracker->getElapsedTime("loop") << endl;
	}
	
	delete pPerformanceTracker;
}