#include "GraphicsBufferManager.h"
#include "GraphicsBuffer.h"

GraphicsBufferManager::~GraphicsBufferManager() {
	clearGraphicsBuffers();
}

void GraphicsBufferManager::clearGraphicsBuffers() {
	for (auto graphicsBuffer : mGraphicsBufferMap)
	{
		GraphicsBuffer* pGraphicsBuffer = graphicsBuffer.second;
		delete pGraphicsBuffer;
	}

	mGraphicsBufferMap.clear();
}

void GraphicsBufferManager::createAndAddGraphicsBuffer(const GraphicsBufferKey& key, string fileName) {
	GraphicsBuffer* pGraphicsBuffer = nullptr;

	auto iter = mGraphicsBufferMap.find(key);

	if (iter == mGraphicsBufferMap.end()) 
	{
		pGraphicsBuffer = new GraphicsBuffer(fileName);
		mGraphicsBufferMap[key] = pGraphicsBuffer;
	}
}

void GraphicsBufferManager::createAndAddGraphicsBuffer(const GraphicsBufferKey& key, int bitmapWidth, int bitmapHeight) {
	GraphicsBuffer* pGraphicsBuffer = nullptr;

	auto graphicsBuffer = mGraphicsBufferMap.find(key);

	if (graphicsBuffer == mGraphicsBufferMap.end()) 
	{
		pGraphicsBuffer = new GraphicsBuffer(bitmapWidth, bitmapHeight);
		mGraphicsBufferMap[key] = pGraphicsBuffer;
	}
}

void GraphicsBufferManager::deleteGraphicsBuffer(const GraphicsBufferKey& key) {
	auto graphicsBuffer = mGraphicsBufferMap.find(key);

	if (graphicsBuffer != mGraphicsBufferMap.end())
	{
		delete graphicsBuffer->second;
		mGraphicsBufferMap.erase(graphicsBuffer);
	}
}

void GraphicsBufferManager::deleteGraphicsBuffer(GraphicsBuffer* buffer) {
	for (auto graphicsBuffer : mGraphicsBufferMap)
	{
		if (buffer == graphicsBuffer.second)
		{
			delete buffer;
			mGraphicsBufferMap.erase(graphicsBuffer.first);
			return;
		}
	}
}

GraphicsBuffer* GraphicsBufferManager::getGraphicsBuffer(const GraphicsBufferKey& key) {
	auto graphicsBuffer = mGraphicsBufferMap.find(key);

	if (graphicsBuffer != mGraphicsBufferMap.end())
	{
		return graphicsBuffer->second;
	}
	else
	{
		return nullptr;
	}
}