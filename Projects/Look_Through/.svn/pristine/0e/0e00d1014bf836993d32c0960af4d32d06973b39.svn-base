#include "Game.h"
#include <windows.h>
#include <fstream>
#include <stdlib.h>
#include <time.h>

Game* Game::mpsGame = nullptr;

Game* Game::getInstance()
{
	if (mpsGame == nullptr)
	{
		mpsGame = new Game;
	}
	return mpsGame;
}

void Game::destroyInstance()
{
	if (mpsGame != nullptr)
	{
		delete mpsGame;
		mpsGame = nullptr;
	}
}

Game::Game()
{
	mpGraphicsSystem = new GraphicsSystem(DISP_HEIGHT, DISP_WIDTH);
	mpBufferManager = new GraphicsBufferManager();
	mpInputSystem = new InputSystem();
	mpSnakeManager = new UnitManager();
	mpWallManager = new UnitManager();
	mpFoodManager = new UnitManager();
	mpScoreManager = new UnitManager(1);
	mpFastManager = new UnitManager(1);
	mpSlowManager = new UnitManager(1);
	mFrameTime = 16.7;
	mLeft = false;
	mRight = false;
	mUp = false;
	mDown = false;
	mExit = false;
	mHasChangedDirection = false;
	mHomeScreen = true;
	mWon = false;
	mLost = false;
	mNumKey = 0;
	mpFoodAnimation = nullptr;
	mpScoreAnimation = nullptr;
	mpFastAnimation = nullptr;
	mpSlowAnimation = nullptr;
	mpLev1 = new Level();
	mpLev2 = new Level();
	mpLev3 = new Level();
	mLevelManager = LevelManager();
}

Game::~Game()
{
	cleanup();
}

void Game::cleanup()
{
	delete mpGraphicsSystem;
	delete mpBufferManager;
	delete mpInputSystem;
	delete mpSnakeManager;
	delete mpWallManager;
	delete mpFoodManager;
	delete mpScoreManager;
	delete mpFastManager;
	delete mpSlowManager;
	delete mpFont;
	delete mpHUD;
	mLevelManager.cleanup();
}

void Game::init()
{
	srand(time(NULL));
	mpGraphicsSystem->init();
	mpInputSystem->init();

	mpBufferManager->addBuffer(BACKGROUND_FILENAME, ASSET_PATH + BACKGROUND_FILENAME);
	mpBufferManager->addBuffer(WALL_FILENAME, ASSET_PATH + WALL_FILENAME);
	mpBufferManager->addBuffer(SNAKE_FILENAME, ASSET_PATH + SNAKE_FILENAME);
	mpBufferManager->addBuffer(FOOD_FILENAME, ASSET_PATH + FOOD_FILENAME);
	mpBufferManager->addBuffer(SCORE_FILENAME, ASSET_PATH + SCORE_FILENAME);
	mpBufferManager->addBuffer(FAST_FILENAME, ASSET_PATH + FAST_FILENAME);
	mpBufferManager->addBuffer(SLOW_FILENAME, ASSET_PATH + SLOW_FILENAME);

	mpSystem = EventSystem::getInstance();
	mpSystem->init();
	mpSystem->getInstance()->addListener((EventType)MOVE_EVENT, this);

	mpFoodAnimation = new Animation(mpBufferManager->getBuffer(FOOD_FILENAME), 4, 0.01, true);
	mpScoreAnimation = new Animation(mpBufferManager->getBuffer(SCORE_FILENAME), 4, 0.01, true);
	mpFastAnimation = new Animation(mpBufferManager->getBuffer(FAST_FILENAME), 4, 0.01, true);
	mpSlowAnimation = new Animation(mpBufferManager->getBuffer(SLOW_FILENAME), 4, 0.01, true);

	mpFont = new Font(FONT_PATH + FONT_FILENAME, FONT_SIZE);
	mpHUD = new HUD(mpGraphicsSystem, mpFont);
	mpHUD->init();
	Vector2D wallPos[266];
	int count = 0;
	ifstream fin("data.txt");
	int x, y;
	if (fin.good())
	{
		while (!fin.eof())
		{
			fin >> mKey;
			if (mKey == "wll1")
			{
				for (int i = 0; i < 14; i++)
				{
					for (int j = 0; j < 19; j++)
					{
						x = 60 * (i + 1);
						y = 60 * (j + 1);
						fin >> mNumKey;
						if (mNumKey == 1)
						{
							wallPos[count] = Vector2D(x, y);
						}
						else
						{
							wallPos[count] = Vector2D();
						}
						count++;
					}
				}
				count = 0;
				mpLev1->setWallPos(wallPos);
			}
			if (mKey == "snkFrm1")
			{
				fin >> mNumKey;
				mpLev1->setSnakeFrames(mNumKey);
			}
			if (mKey == "snkStrtLngth1")
			{
				fin >> mNumKey;
				mpLev1->setSnakeStartLength(mNumKey);
			}
			if (mKey == "snkNdLngth1")
			{
				fin >> mNumKey;
				mpLev1->setSnakeEndLength(mNumKey);
			}
			if (mKey == "ppDds1")
			{
				fin >> mNumKey;
				mpLev1->setPUPOdds(mNumKey);
			}
			if (mKey == "pntsDds1")
			{
				fin >> mNumKey;
				mpLev1->setPointsOdds(mNumKey);
			}
			if (mKey == "fstDds1")
			{
				fin >> mNumKey;
				mpLev1->setFastOdds(mNumKey);
			}
			if (mKey == "slwDds1")
			{
				fin >> mNumKey;
				mpLev1->setSlowOdds(mNumKey);
			}
			if (mKey == "wll2")
			{
				for (int i = 0; i < 14; i++)
				{
					for (int j = 0; j < 19; j++)
					{
						x = 60 * (j + 1);
						y = 60 * (i + 1);
						fin >> mNumKey;
						if (mNumKey == 1)
						{
							wallPos[count] = Vector2D(x, y);
						}
						else
						{
							wallPos[count] = Vector2D();
						}
						count++;
					}
				}
				count = 0;
				mpLev2->setWallPos(wallPos);
			}
			if (mKey == "snkFrm2")
			{
				fin >> mNumKey;
				mpLev2->setSnakeFrames(mNumKey);
			}
			if (mKey == "snkStrtLngth2")
			{
				fin >> mNumKey;
				mpLev2->setSnakeStartLength(mNumKey);
			}
			if (mKey == "snkNdLngth2")
			{
				fin >> mNumKey;
				mpLev2->setSnakeEndLength(mNumKey);
			}
			if (mKey == "ppDds2")
			{
				fin >> mNumKey;
				mpLev2->setPUPOdds(mNumKey);
			}
			if (mKey == "pntsDds2")
			{
				fin >> mNumKey;
				mpLev2->setPointsOdds(mNumKey);
			}
			if (mKey == "fstDds2")
			{
				fin >> mNumKey;
				mpLev2->setFastOdds(mNumKey);
			}
			if (mKey == "slwDds2")
			{
				fin >> mNumKey;
				mpLev2->setSlowOdds(mNumKey);
			}
			if (mKey == "wll3")
			{
				for (int i = 0; i < 14; i++)
				{
					for (int j = 0; j < 19; j++)
					{
						x = 60 * (j + 1);
						y = 60 * (i + 1);
						fin >> mNumKey;
						if (mNumKey == 1)
						{
							wallPos[count] = Vector2D(x, y);
						}
						else
						{
							wallPos[count] = Vector2D();
						}
						count++;
					}
				}
				count = 0;
				mpLev3->setWallPos(wallPos);
			}
			if (mKey == "snkFrm3")
			{
				fin >> mNumKey;
				mpLev3->setSnakeFrames(mNumKey);
			}
			if (mKey == "snkStrtLngth3")
			{
				fin >> mNumKey;
				mpLev3->setSnakeStartLength(mNumKey);
			}
			if (mKey == "snkNdLngth3")
			{
				fin >> mNumKey;
				mpLev3->setSnakeEndLength(mNumKey);
			}
			if (mKey == "ppDds3")
			{
				fin >> mNumKey;
				mpLev3->setPUPOdds(mNumKey);
			}
			if (mKey == "pntsDds3")
			{
				fin >> mNumKey;
				mpLev3->setPointsOdds(mNumKey);
			}
			if (mKey == "fstDds3")
			{
				fin >> mNumKey;
				mpLev3->setFastOdds(mNumKey);
			}
			if (mKey == "slwDds3")
			{
				fin >> mNumKey;
				mpLev3->setSlowOdds(mNumKey);
			}
		}
	}
	mLevelManager.addLevel(mpLev1);
	mLevelManager.addLevel(mpLev2);
	mLevelManager.addLevel(mpLev3);
}

void Game::doLoop()
{
	int frames = 0;
	int count = 1;
	int temp = 1;
	bool food = false;
	bool snake = false;
	bool wall = false;
	bool points = false;
	bool fast = false;
	bool slow = false;
	bool fresh = true;
	bool newPUP = false;
	int randX, randY, pupRandom;
	int randNum = 0;
	Vector2D random;
	PerformanceTracker* pTracker = new PerformanceTracker();
	Timer time;
	float animTime = 0;
	mpWallManager->addUnit(mpBufferManager->getBuffer(WALL_FILENAME), Vector2D(0, 0));
	mpFoodManager->addUnit(Vector2D(300, 420), mpFoodAnimation);
	mpScoreManager->addUnit(Vector2D(-60, -60), mpScoreAnimation);
	mpFastManager->addUnit(Vector2D(-60, -60), mpFastAnimation);
	mpSlowManager->addUnit(Vector2D(-60, -60), mpSlowAnimation);

	Sprite* pWallSprite = new Sprite(mpBufferManager->getBuffer(WALL_FILENAME));
	mpSnakeManager->addUnit(mpBufferManager->getBuffer(SNAKE_FILENAME), currPos);

	while (!mExit)
	{
		pTracker->clearTracker("loop");
		pTracker->startTracking("loop");
		time.start();

		animTime += time.getElapsedTime();

		mpInputSystem->getKeyEvent();


		mpGraphicsSystem->draw(mpBufferManager->getBuffer(BACKGROUND_FILENAME), Vector2D(), 1.0f);
		mpGraphicsSystem->border(pWallSprite);
		if (mHomeScreen)
		{
			mpGraphicsSystem->writeText(Vector2D(360, 420), mpFont, blackColor, "Press space to advance");
			mLevelManager.getLevel(0)->setScore(0);
			mLevelManager.getLevel(1)->setScore(0);
			mLevelManager.getLevel(2)->setScore(0);
			frames = 0;
			mpHUD->setTime(-mpHUD->getTime());
			mpFoodManager->getFirstUnit()->setPosition(Vector2D(300,420));
		}
		if (mLevelManager.getCurrentLevel () != -1)
		{
			mpHUD->setScore(mLevelManager.getLevel(mLevelManager.getCurrentLevel())->getScore());
			if (fresh)
			{
				temp = mLevelManager.getLevel(mLevelManager.getCurrentLevel())->getSnakeStartLength();
				for (int i = 0; i < 266; i++)
				{
					if (mLevelManager.getLevel(mLevelManager.getCurrentLevel())->getWallPos(i) != Vector2D())
					{
						mpWallManager->addUnit(mpBufferManager->getBuffer(WALL_FILENAME), mLevelManager.getLevel(mLevelManager.getCurrentLevel())->getWallPos(i));
					}
				}
				while (temp > 1)
				{
					mpSnakeManager->addUnit(mpBufferManager->getBuffer(SNAKE_FILENAME), Vector2D(currPos.getX() + 60 * count, currPos.getY()));
					count++;
					temp--;
				}
				count = 1;
				fresh = false;
				while (mpFoodManager->collidingWith(mpSnakeManager) || mpFoodManager->collidingWith(mpScoreManager) || mpFoodManager->collidingWith(mpFastManager) || mpFoodManager->collidingWith(mpSlowManager) || mpFoodManager->collidingWith(mpWallManager))
				{
					randX = (rand() % 1139 + 60);
					randX -= randX % 60;
					randY = (rand() % 839 + 60);
					randY -= randY % 60;
					random = Vector2D(randX, randY);
					mpFoodManager->getFirstUnit()->setPosition(random);
				}
			}
			if (frames % mLevelManager.getLevel(mLevelManager.getCurrentLevel())->getSnakeFrames() == 0)
			{
				if (mLeft)
					currPos.setX(currPos.getX() - 60);
				if (mRight)
					currPos.setX(currPos.getX() + 60);
				if (mUp)
					currPos.setY(currPos.getY() - 60);
				if (mDown)
					currPos.setY(currPos.getY() + 60);
				if (mLeft || mRight || mDown || mUp)
				{
					mpSnakeManager->updateSnake(animTime, currPos);
					mHasChangedDirection = false;
				}
				mpFoodManager->updateAll(time.getElapsedTime());
				mpScoreManager->updateAll(time.getElapsedTime());
				mpFastManager->updateAll(time.getElapsedTime());
				mpSlowManager->updateAll(time.getElapsedTime());
				food = mpSnakeManager->collidingWith(mpFoodManager);
				snake = (mpSnakeManager->collidingWith(mpSnakeManager));
				wall = (mpSnakeManager->collidingWith(mpWallManager));
				points = mpSnakeManager->collidingWith(mpScoreManager);
				fast = mpSnakeManager->collidingWith(mpFastManager);
				slow = mpSnakeManager->collidingWith(mpSlowManager);
				pupRandom = (rand() % 1000 + 1);
				if (mLevelManager.getLevel(mLevelManager.getCurrentLevel())->getPUPOdds() > pupRandom)
				{
					pupRandom = (rand() % 100 + 1);
					randX = (rand() % 1139 + 60);
					randX -= randX % 60;
					randY = (rand() % 839 + 60);
					randY -= randY % 60;
					random = Vector2D(randX, randY);
					if (mLevelManager.getLevel(mLevelManager.getCurrentLevel())->getPointsOdds() > pupRandom)
					{
						mpScoreManager->addUnit(random, mpScoreAnimation);
						while (mpScoreManager->collidingWith(mpSnakeManager) || mpScoreManager->collidingWith(mpFoodManager) || mpScoreManager->collidingWith(mpFastManager) || mpScoreManager->collidingWith(mpSlowManager) || mpScoreManager->collidingWith(mpWallManager))
						{
							randX = (rand() % 1139 + 60);
							randX -= randX % 60;
							randY = (rand() % 839 + 60);
							randY -= randY % 60;
							random = Vector2D(randX, randY);
							mpScoreManager->getFirstUnit()->setPosition(random);
						}
					}
					else if (mLevelManager.getLevel(mLevelManager.getCurrentLevel())->getPointsOdds() < pupRandom && mLevelManager.getLevel(mLevelManager.getCurrentLevel())->getPointsOdds() + mLevelManager.getLevel(mLevelManager.getCurrentLevel())->getFastOdds() < pupRandom)
					{
						mpFastManager->addUnit(random, mpFastAnimation);
						while (mpFastManager->collidingWith(mpSnakeManager) || mpFastManager->collidingWith(mpFoodManager) || mpFastManager->collidingWith(mpScoreManager) || mpFastManager->collidingWith(mpSlowManager) || mpFastManager->collidingWith(mpWallManager))
						{
							randX = (rand() % 1139 + 60);
							randX -= randX % 60;
							randY = (rand() % 839 + 60);
							randY -= randY % 60;
							random = Vector2D(randX, randY);
							mpFastManager->getFirstUnit()->setPosition(random);
						}
					}
					else
					{
						mpSlowManager->addUnit(random, mpSlowAnimation);
						while (mpSlowManager->collidingWith(mpSnakeManager) || mpSlowManager->collidingWith(mpFoodManager) || mpSlowManager->collidingWith(mpScoreManager) || mpSlowManager->collidingWith(mpFastManager) || mpSlowManager->collidingWith(mpWallManager))
						{
							randX = (rand() % 1139 + 60);
							randX -= randX % 60;
							randY = (rand() % 839 + 60);
							randY -= randY % 60;
							random = Vector2D(randX, randY);
							mpSlowManager->getFirstUnit()->setPosition(random);
						}
					}
				}
				mHasChangedDirection = false;
			}
			mpWallManager->drawNoAnimated(mpGraphicsSystem);
			mpFoodManager->drawAnimated(mpGraphicsSystem,mpFoodManager->getFirstUnit()->getPosition().getX(), mpFoodManager->getFirstUnit()->getPosition().getY());
			if(mpScoreManager->getUnitCount() > 0)
				mpScoreManager->drawAnimated(mpGraphicsSystem, mpScoreManager->getFirstUnit()->getPosition().getX(), mpScoreManager->getFirstUnit()->getPosition().getY());
			if (mpFastManager->getUnitCount() > 0)
			mpFastManager->drawAnimated(mpGraphicsSystem, mpFastManager->getFirstUnit()->getPosition().getX(), mpFastManager->getFirstUnit()->getPosition().getY());
			if (mpSlowManager->getUnitCount() > 0)
			mpSlowManager->drawAnimated(mpGraphicsSystem, mpSlowManager->getFirstUnit()->getPosition().getX(), mpSlowManager->getFirstUnit()->getPosition().getY());
			mpSnakeManager->drawSnake(mpGraphicsSystem);
			if (food)
			{
				mLevelManager.getLevel(mLevelManager.getCurrentLevel())->setScore(mLevelManager.getLevel(mLevelManager.getCurrentLevel())->getScore() + mLevelManager.getLevel(mLevelManager.getCurrentLevel())->getPoints());
				food = false;
				mpSnakeManager->addUnit(mpBufferManager->getBuffer(SNAKE_FILENAME), mpSnakeManager->getLastUnit()->getPosition());
				while (mpFoodManager->collidingWith(mpSnakeManager) || mpFoodManager->collidingWith(mpScoreManager) || mpFoodManager->collidingWith(mpFastManager) || mpFoodManager->collidingWith(mpSlowManager) || mpFoodManager->collidingWith(mpWallManager))
				{
					randX = (rand() % 1139 + 60);
					randX -= randX % 60;
					randY = (rand() % 839 + 60);
					randY -= randY % 60;
					random = Vector2D(randX, randY);
					mpFoodManager->getFirstUnit()->setPosition(random);
				}
			}
			if (points)
			{
				points = false;
				mLevelManager.getLevel(mLevelManager.getCurrentLevel())->setScore(mLevelManager.getLevel(mLevelManager.getCurrentLevel())->getScore() + 5);
				mpScoreManager->getFirstUnit()->setPosition(Vector2D(-60, -60));
			}
			if (fast)
			{
				fast = false;
				if (mLevelManager.getLevel(mLevelManager.getCurrentLevel())->getSnakeFrames() > 2)
					mLevelManager.getLevel(mLevelManager.getCurrentLevel())->setSnakeFrames(mLevelManager.getLevel(mLevelManager.getCurrentLevel())->getSnakeFrames() - 2);
				mpFastManager->getFirstUnit()->setPosition(Vector2D(-60, -60));
			}
			if (slow)
			{
				slow = false;
				mLevelManager.getLevel(mLevelManager.getCurrentLevel())->setSnakeFrames(mLevelManager.getLevel(mLevelManager.getCurrentLevel())->getSnakeFrames() + 2);
				mpSlowManager->getFirstUnit()->setPosition(Vector2D(-60, -60));
			}
			if (mpSnakeManager->getUnitCount() == mLevelManager.getLevel(mLevelManager.getCurrentLevel())->getSnakeEndLength())
			{
				mpSnakeManager->clearSnake();
				mpWallManager->moveAllUnits(Vector2D(-60, -60));
				fresh = true;
				mLeft = false;
				mRight = false;
				mUp = false;
				mDown = false;
				currPos = Vector2D(600, 420);
				mpSnakeManager->getFirstUnit()->setPosition(currPos);
				mpScoreManager->moveAllUnits(Vector2D(-60, -60));
				mpFastManager->moveAllUnits(Vector2D(-60, -60));
				mpSlowManager->moveAllUnits(Vector2D(-60, -60));
				if (mLevelManager.getCurrentLevel() == 2)
				{
					mWon = true;
					mLevelManager.setCurrentLevel(-1);
				}
				if (mLevelManager.getCurrentLevel() == 1)
				{
					mLevelManager.setCurrentLevel(2);
				}
				if (mLevelManager.getCurrentLevel() == 0)
				{
					mLevelManager.setCurrentLevel(1);
				}
			}
			if (snake)
			{
				mLost = true;
				mpSnakeManager->clearSnake();
				mpWallManager->clearVector();
				fresh = true;
				mLeft = false;
				mRight = false;
				mUp = false;
				mDown = false;
				currPos = Vector2D(600, 420);
				mpSnakeManager->getFirstUnit()->setPosition(currPos);
				mpScoreManager->moveAllUnits(Vector2D(-60, -60));
				mpFastManager->moveAllUnits(Vector2D(-60, -60));
				mpSlowManager->moveAllUnits(Vector2D(-60, -60));
				snake = false;
				mLevelManager.setCurrentLevel(-1);
			}
			if (wall)
			{
				mLost = true;
				mpSnakeManager->clearSnake();
				mpWallManager->moveAllUnits(Vector2D(-60, -60));
				fresh = true;
				mLeft = false;
				mRight = false;
				mUp = false;
				mDown = false;
				currPos = Vector2D(600, 420);
				mpSnakeManager->getFirstUnit()->setPosition(currPos);
				mpScoreManager->moveAllUnits(Vector2D(-60, -60));
				mpFastManager->moveAllUnits(Vector2D(-60, -60));
				mpSlowManager->moveAllUnits(Vector2D(-60, -60));
				wall = false;
				mLevelManager.setCurrentLevel(-1);
			}
			if (mpSnakeManager->getFirstUnit()->getPosition().getX() < 60 || mpSnakeManager->getFirstUnit()->getPosition().getX() >= DISP_WIDTH - 60 || mpSnakeManager->getFirstUnit()->getPosition().getY() < 60 || mpSnakeManager->getFirstUnit()->getPosition().getY() >= DISP_HEIGHT - 60)
			{
				mpSnakeManager->clearSnake();
				mpWallManager->moveAllUnits(Vector2D(-60, -60));
				fresh = true;
				mLeft = false;
				mRight = false;
				mUp = false;
				mDown = false;
				currPos = Vector2D(600, 420);
				mpSnakeManager->getFirstUnit()->setPosition(currPos);
				mpScoreManager->moveAllUnits(Vector2D(-60, -60));
				mpFastManager->moveAllUnits(Vector2D(-60, -60));
				mpSlowManager->moveAllUnits(Vector2D(-60, -60));
				mLost = true;
				mLevelManager.setCurrentLevel(-1);
			}
			mpHUD->setFPS(frames / mpHUD->getTime());
			mpHUD->display();
		}
		
		if (mLost)
		{
			mpGraphicsSystem->writeText(Vector2D(360, 420), mpFont, blackColor, "You lose. Try again");
			mpGraphicsSystem->writeText(Vector2D(360, 480), mpFont, blackColor, "Press enter to start over");
		}

		if (mWon)
		{
			mpGraphicsSystem->writeText(Vector2D(360, 360), mpFont, blackColor, "Your Total Score is: " +  to_string(mLevelManager.getLevel(0)->getScore() + mLevelManager.getLevel(1)->getScore() + mLevelManager.getLevel(2)->getScore()));
			mpGraphicsSystem->writeText(Vector2D(300, 420), mpFont, blackColor, "You finished the game in: " + to_string(mpHUD->getTime()) + " seconds");
			mpGraphicsSystem->writeText(Vector2D(360, 480), mpFont, blackColor, "Press enter to start over");
		}
		mpGraphicsSystem->flipDisplay();
		time.sleepUntilElapsed(mFrameTime);
		if(mLevelManager.getCurrentLevel() != -1)
			mpHUD->setTime(time.getElapsedTime() / 1000);
		pTracker->stopTracking("loop");
		frames++;
	}
	delete pWallSprite;
	delete pTracker;
}

GraphicsSystem* Game::getGraphicsSystem()
{
	return mpGraphicsSystem;
}

UnitManager* Game::getSnakeManager()
{
	return mpSnakeManager;
}

GraphicsBufferManager* Game::getGraphicsBufferManager()
{
	return mpBufferManager;
}

float Game::getFrameTime()
{
	return mFrameTime;
}

void Game::handleEvent(const Event& event)
{
	if (event.getType() == MOVE_EVENT)
	{
		const MoveEvent& moveEvent = static_cast<const MoveEvent&>(event);
		if (moveEvent.getKey() == (int)Key::A)
		{
			if (!mRight  && !mHasChangedDirection)
			{
				mLeft = true;
				mUp = false;
				mDown = false;
				mHasChangedDirection = true;
			}
		}
		if (moveEvent.getKey() == (int)Key::D)
		{
			if (!mLeft  && !mHasChangedDirection && (mUp || mDown))
			{
				mRight = true;
				mUp = false;
				mDown = false;
				mHasChangedDirection = true;
			}
		}
		if (moveEvent.getKey() == (int)Key::S)
		{
			if (!mUp && !mHasChangedDirection)
			{
				mDown = true;
				mLeft = false;
				mRight = false;
				mHasChangedDirection = true;
			}
		}
			
		if (moveEvent.getKey() == (int)Key::W)
		{
			if (!mDown  && !mHasChangedDirection)
			{
				mUp = true;
				mLeft = false;
				mRight = false;
				mHasChangedDirection = true;
			}
		}

		if (moveEvent.getKey() == (int)Key::ESCAPE)
		{
			mExit = true;
		}
		if (moveEvent.getKey() == (int)Key::SPACE)
		{
			if (mHomeScreen)
			{
				mLevelManager.setCurrentLevel(0);
				mHomeScreen = false;
			}
		}
		if (moveEvent.getKey() == (int)Key::ENTER)
		{
			if (mLost || mWon)
			{
				mLost = false;
				mWon = false;
				mHomeScreen = true;
			}
		}
	}
}