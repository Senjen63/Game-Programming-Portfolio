#include "include/World.hpp"

World::World( const std::shared_ptr< AssetManager > & pAssetManager, GraphicsSystem * pGraphicsSystem, const std::shared_ptr< Time > & pTime, const std::shared_ptr< InputTranslator > & pInputTranslator )
{
    mpEntityManager = std::make_shared< EntityManager >();
    mpCamera = std::make_shared< Camera >( pGraphicsSystem );
    mpEntityCommandBuffer = std::make_shared< EntityCommandBuffer >();
    mpEntityCommandBuffer->mpEntityManager = mpEntityManager;
    mpInputTranslator = pInputTranslator;
    mpAssetManager = pAssetManager;
    mpTime = pTime;
}

// componentmanager
// entitymanager
// systems

void World::createSystem( System * pSystem )
{
    pSystem->mpTime = mpTime;
    pSystem->mpEntityManager = mpEntityManager;
    pSystem->mpCamera = mpCamera;
    pSystem->mpEntityCommandBuffer = mpEntityCommandBuffer;
    pSystem->mpInputTranslator = mpInputTranslator;
    pSystem->mpAssetManager = mpAssetManager;
    mSystems.emplace_back( pSystem );
}

void World::createEntity( const std::vector< Component * > & components ) const
{
    mpEntityManager->createEntity( components );
}

void World::generateQueries() const
{
    for ( const auto & system : mSystems )
    {
        system->createQueries();
        for ( auto & query : system->mQueries )
        {
            mpEntityManager->createEntityQuery( query );
        }
    }
}

int World::update() const
{
    for ( const auto & system : mSystems )
    {
        system->onUpdate();
    }

    if ( mpEntityCommandBuffer->doChangeScene() )
    {
        // this returns 0 or 1 only due to
        // compiler optimizing out this method
        // if it returns a bool
        return 1;
    }

    if ( mpEntityCommandBuffer->hasStructuralChanges() )
    {
        mpEntityCommandBuffer->execute();

        generateQueries();
    }

    return 0;
}
