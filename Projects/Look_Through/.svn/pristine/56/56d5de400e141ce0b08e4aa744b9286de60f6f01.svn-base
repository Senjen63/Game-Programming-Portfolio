#include "SoundEffectManager.h"
#include "SoundEffect.h"
#include "Game.h"
#include "OptionsManager.h"
#include <fstream>

SoundEffectManager::SoundEffectManager()
{
	ifstream inputDiff("../GalahadAssets/data/" + FILE_PATH);
	if (inputDiff.good())
	{
		string key;

		while (!inputDiff.eof())
		{
			inputDiff >> key;

			if (key == "freq")
			{
				inputDiff >> mFreq;
			}
			else if (key == "chan")
			{
				inputDiff >> mChannel;
			}
			else if (key == "chunk")
			{
				inputDiff >> mChunk;
			}
			else if (key == "null")
			{
				inputDiff >> mNull;
			}
			else if (key == "neg")
			{
				inputDiff >> mRev;
			}
		}
	}
}

SoundEffectManager::~SoundEffectManager()
{
	clearSoundEffects();
}

void SoundEffectManager::init()
{
	if (Mix_OpenAudio(mFreq, MIX_DEFAULT_FORMAT, mChannel, mChunk) != mNull) {
		cout << "Failed to open audio: " << Mix_GetError() << endl;
	}
}

void SoundEffectManager::createAndAddSoundEffect(const SoundEffectKey& key, string fileName)
{
	SoundEffect* pSoundEffect = nullptr;

	auto iter = mSoundEffectMap.find(key);

	if (iter == mSoundEffectMap.end())
	{
		pSoundEffect = new SoundEffect(fileName);
		mSoundEffectMap[key] = pSoundEffect;
	}
}

void SoundEffectManager::deleteSoundEffect(const SoundEffectKey& key)
{
	auto soundEffect = mSoundEffectMap.find(key);

	if (soundEffect != mSoundEffectMap.end())
	{
		delete soundEffect->second;
		mSoundEffectMap.erase(soundEffect);
	}
}

void SoundEffectManager::clearSoundEffects()
{
	for (auto soundEffect : mSoundEffectMap)
	{
		SoundEffect* pSoundEffect = soundEffect.second;
		delete pSoundEffect;
	}

	mSoundEffectMap.clear();
}

void SoundEffectManager::playSound(const SoundEffectKey& key, int loops)
{
	Game* pGame = Game::getInstance();

	if (pGame->getOptionsManager()->getSound() == pGame->getOptionsManager()->ON)
	{
		Mix_PlayChannel(mRev, getSoundEffect(key)->getMixChunk(), loops);
	}
}

SoundEffect* SoundEffectManager::getSoundEffect(const SoundEffectKey& key)
{
	auto soundEffect = mSoundEffectMap.find(key);

	if (soundEffect != mSoundEffectMap.end())
	{
		return soundEffect->second;
	}
	else
	{
		return nullptr;
	}
}
