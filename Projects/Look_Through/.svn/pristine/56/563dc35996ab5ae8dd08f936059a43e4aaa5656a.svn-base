#pragma once

#include <Trackable.h>
#include <Vector2D.h>

#include "Animation.h"

class Sprite;

enum class UnitType
{
	INVALID_TYPE = -1,
	WALL,
	SNAKE,
	FOOD,
	POINTS_POWER,
	SPEED_POWER,
	SLOW_POWER,
	BUTTON
};

class Unit : public Trackable
{
	friend class UnitManager;

public:
	
	void init(Vector2D location, Animation anim, UnitType type)		
	{
		mLocation = location;
		mMainAnim = anim;
		mType = type;

		mpCurrentAnim = &mMainAnim;
		mAnimWidth = mpCurrentAnim->getCurrentSprite()->getWidth();
		mAnimHeight = mpCurrentAnim->getCurrentSprite()->getHeight();
	};

	void cleanUp()
	{
		mpCurrentAnim = nullptr;
		mLocation = Vector2D(0, 0);
	}

	void update(double dt);
	void draw();
	void toggleAnimation();
	void setLocation(Vector2D location);

	UnitType getType() { return mType; };
	void pauseAnimation(bool pause);

	Unit* getNext() const { return mpNext; }
	void setNext(Unit* pNext) { mpNext = pNext; }

	bool checkIfIntersecting(Vector2D location);

private:	

	Unit() {};
	Unit(Vector2D location, Animation mainAnim, UnitType type)
		: mLocation(location), mMainAnim(mainAnim),	mType(type)
	{
		mpCurrentAnim = &mMainAnim;
		mAnimWidth = mpCurrentAnim->getCurrentSprite()->getWidth();
		mAnimHeight = mpCurrentAnim->getCurrentSprite()->getHeight();

		//updateDrawLocation();
	};
	//~Unit() {};

	Unit* mpNext = nullptr;

	Vector2D mLocation;
	
	Animation mMainAnim;	
	Animation* mpCurrentAnim = nullptr;
	
	UnitType mType = UnitType::INVALID_TYPE;

	int mAnimWidth = 0;
	int mAnimHeight = 0;
};

