#include "GraphicsSystem.h"

GraphicsSystem::GraphicsSystem(int width, int height)
{
	init();
	mpDisplay = al_create_display(width, height);
	buffer = new GraphicsBuffer(al_get_backbuffer(mpDisplay));
}
GraphicsSystem::~GraphicsSystem()
{
	al_destroy_display(mpDisplay);
	delete buffer;
}

bool GraphicsSystem::init()
{
	if (!al_init())
	{
		cout << "error initting Allegro\n";
		system("pause");
		return 1;
	}
	if (!al_init_image_addon())
	{
		cout << "error - Image Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_font_addon())
	{
		cout << "error - Font Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_ttf_addon())
	{
		cout << "error - TTF Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_primitives_addon())
	{
		cout << "error - primitives Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_install_audio())
	{
		cout << "error - Audio Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_acodec_addon())
	{
		cout << "error - Audio Codec Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_reserve_samples(1))
	{
		cout << "error - samples not reserved\n";
		system("pause");
		return 1;
	}

	return 0;
}

int GraphicsSystem::getHeight()
{
	return al_get_display_width(mpDisplay);
}
int GraphicsSystem::getWidth()
{
	return al_get_display_height(mpDisplay);
}

GraphicsBuffer* GraphicsSystem::getBackBuffer()
{
	return buffer;
}

void GraphicsSystem::draw(int x, int y, Sprite sprite, float scale)
{
	al_set_target_bitmap(al_get_backbuffer(mpDisplay));
	al_draw_scaled_bitmap(sprite.getBuffer()->mpBitMap, sprite.getX(), sprite.getY(), sprite.getWidth(), sprite.getHeight(), x, y, sprite.getWidth() * scale, sprite.getHeight() * scale, 0);
}
void GraphicsSystem::draw(GraphicsBuffer* buffer, int x, int y, Sprite sprite, float scale)
{
	al_set_target_bitmap(buffer->mpBitMap);
	al_draw_scaled_bitmap(sprite.getBuffer()->mpBitMap, sprite.getX(), sprite.getY(), sprite.getWidth(), sprite.getHeight(), x, y, sprite.getWidth() * scale, sprite.getHeight() * scale, 0);
}

void GraphicsSystem::writeText(int x, int y, Font* font, Color* color, string text)
{
	al_set_target_bitmap(al_get_backbuffer(mpDisplay));
	al_draw_text(font->getFont(), color->getColor(), x, y, ALLEGRO_ALIGN_LEFT, text.c_str());
}
void GraphicsSystem::writeText(GraphicsBuffer* buffer, int x, int y, Font* font, Color color, string text)
{
	al_set_target_bitmap(buffer->mpBitMap);
	al_draw_text(font->getFont(), color.getColor(), x, y, ALLEGRO_ALIGN_LEFT, text.c_str());
}

void GraphicsSystem::saveBuffer(GraphicsBuffer* buffer, string file)
{
	al_save_bitmap(file.c_str(), buffer->mpBitMap);
}

void GraphicsSystem::flip()
{
	al_flip_display();
}