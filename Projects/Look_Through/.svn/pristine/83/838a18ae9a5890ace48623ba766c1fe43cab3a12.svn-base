#include "HUD.h"
#include "Game.h"

enum class UnitTypes;

HUD::HUD()
{
}

void HUD::init()
{
	Game::getGame()->getUnitMan()->createUnit(Game::getGame()->getGraphicsSys()->getWidth() / 2,
		Game::getGame()->getGraphicsBuffMan()->getGraphicsBuff("hud")->getHeight() / 2,
		UnitTypes::HUD_UNIT_TYPE, 16, Game::getGame()->getGraphicsBuffMan()->getGraphicsBuff("hud"));
	mpBar = Game::getGame()->getUnitMan()->getLastUnit();
}

void HUD::handleEvent( const Event& theEvent )
{
	mpBar->getCurAnim().getCurrentSprite().getGraphicsBuffer()->clear();

	switch ( theEvent.getType() )
	{
	case UPDATE_HUD_EVENT:
		{
		const UpdateHUDEvent& uEvent = static_cast< const UpdateHUDEvent& >( theEvent );
		Game::getGame()->getGraphicsSys()->writeText( mpBar->getCurAnim().getCurrentSprite().getGraphicsBuffer(),
			" FPS: " + to_string( uEvent.getFPS() * 3.6 ), FPS_X, PLACE_Y );
		Game::getGame()->getGraphicsSys()->writeText( mpBar->getCurAnim().getCurrentSprite().getGraphicsBuffer(),
			"Points: " + to_string( uEvent.getScore() ), SCORE_X, PLACE_Y );
		Game::getGame()->getGraphicsSys()->writeText( mpBar->getCurAnim().getCurrentSprite().getGraphicsBuffer(),
			" Time: " + to_string( uEvent.getTime() / 1000 ), TIME_X, PLACE_Y );
		}
		break;
	}
}
