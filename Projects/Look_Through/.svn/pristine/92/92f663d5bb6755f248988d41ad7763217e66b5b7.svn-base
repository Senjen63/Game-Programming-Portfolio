#include "LevelManager.h"

LevelManager::LevelManager()
{
	srand((unsigned)time(0));
	score = 0;
}

LevelManager::~LevelManager()
{
	
}
void LevelManager::setScore(int newScore)
{
	score = newScore;
}

int LevelManager::getScore()
{
	return score;
}
void LevelManager::createLevel1(GraphicsSystem* mpGraphics, GraphicsBufferManager& mpgBufferManager, string bufferKey, 
									UnitManager& mLevelUnitManager, Animation& mWallAnimation, int originX, int originY)
{
	int bufferWidth = mpgBufferManager.getBuffer(bufferKey)->getWidth();
	int bufferHeight = mpgBufferManager.getBuffer(bufferKey)->getHeight();;
	Vector2D location;

	ifstream input;

	input.open(LEVEL);
	assert(input);
	string word;

	while (!input.eof())
	{
		input >> word;

		if (word == "Walls")
		{
			for (int i = 0; i < 19; i++)//vertical
			{
				for (int j = 0; j < 25; j++) //horizontal
				{
					input >> word;

					if (word == "1")
					{
						//Walls
						location = Vector2D(originX + (bufferWidth * j), originY + (bufferHeight * i));

						mLevelUnitManager.createAndAddUnit(mWallAnimation, location);
					}
					else
					{

					}

				}
			}
		}
	}
	input.close();
}

void LevelManager::createLevel2(GraphicsSystem* mpGraphics, GraphicsBufferManager& mpgBufferManager, string bufferKey,
									UnitManager& mLevelUnitManager, Animation& mWallAnimation, int originX, int originY)
{
	int bufferWidth = mpgBufferManager.getBuffer(bufferKey)->getWidth();
	int bufferHeight = mpgBufferManager.getBuffer(bufferKey)->getHeight();;
	Vector2D location;

	ifstream input;

	input.open(LEVEL2);
	assert(input);
	string word;

	while (!input.eof())
	{
		input >> word;

		if (word == "Walls")
		{
			for (int i = 0; i < 19; i++)//vertical
			{
				for (int j = 0; j < 25; j++) //horizontal
				{
					input >> word;

					if (word == "1")
					{
						//Walls
						location = Vector2D(originX + (bufferWidth * j), originY + (bufferHeight * i));

						mLevelUnitManager.createAndAddUnit(mWallAnimation, location);
					}
					else
					{

					}

				}
			}
		}
	}
	input.close();
}

void LevelManager::createLevel3(GraphicsSystem* mpGraphics, GraphicsBufferManager& mpgBufferManager, string bufferKey,
									UnitManager& mLevelUnitManager, Animation& mWallAnimation, int originX, int originY)
{
	int bufferWidth = mpgBufferManager.getBuffer(bufferKey)->getWidth();
	int bufferHeight = mpgBufferManager.getBuffer(bufferKey)->getHeight();;
	Vector2D location;

	ifstream input;

	input.open(LEVEL3);
	assert(input);
	string word;

	while (!input.eof())
	{
		input >> word;

		if (word == "Walls")
		{
			for (int i = 0; i < 19; i++)//vertical
			{
				for (int j = 0; j < 25; j++) //horizontal
				{
					input >> word;

					if (word == "1")
					{
						//Walls
						location = Vector2D(originX + (bufferWidth * j), originY + (bufferHeight * i));

						mLevelUnitManager.createAndAddUnit(mWallAnimation, location);
					}
					else
					{

					}

				}
			}
		}
	}
	input.close();
}

void LevelManager::RandomPlacement(GraphicsSystem* mpGraphics, GraphicsBufferManager& mpgBufferManager, string bufferKey,
	UnitManager& mUnitManager, int originX, int originY,
	bool runCode, int currentLevel)
{
	Vector2D collectibleLocation;

	int count = 0;
	int rangeY = 15;
	int rangeX = 18;

	bool moveOn = false;
	bool inRange = false;

	int collectibleBufferWidth = 32;
	int collectibleBufferHeight = 32;

	int bufferWidth = mpgBufferManager.getBuffer(bufferKey)->getWidth();
	int bufferHeight = mpgBufferManager.getBuffer(bufferKey)->getHeight();

	Vector2D locationWall;

	ifstream input;

	if (currentLevel == 0)
	{
		input.open(LEVEL);
	}
	if (currentLevel == 1)
	{
		input.open(LEVEL2);
	}
	if (currentLevel == 2)
	{
		input.open(LEVEL3);
	}

	assert(input);
	string word;

	while (!input.eof())
	{
		input >> word;

		if (word == "Walls")
		{
			for (int i = 0; i < 19; i++)//vertical
			{
				for (int j = 0; j < 25; j++) //horizontal
				{
					input >> word;

					if (word == "1")
					{
						//Walls
						locationWall = Vector2D(originX + (bufferWidth * j), originY + (bufferHeight * i));

						//so that our object doesnt change locations
						if (!runCode)
						{
							int randNum1 = 0;
							int randNum2 = 0;

							bool onWall = true;
							//BUG IT ONLY COUNTS UP AND SOMETIMES DISSAPEARS OFF SCREEN

							while (onWall)
							{
								randNum1 = (rand() % rangeY) + 1;//1-15
								randNum2 = (rand() % rangeX) + 1;//1-18

								collectibleLocation = Vector2D(bufferWidth * randNum2, bufferHeight * randNum1);

								if (locationWall != collectibleLocation)
								{
									mUnitManager.setLocation(collectibleLocation);

									
									onWall = false;
								}
							}
						}
					}
					else
					{

					}

				}
			}
		}
	}
	input.close();

	mUnitManager.draw(mpGraphics);
	/*mpGraphics->draw(mpgBufferManager.getBuffer(bufferKeyName), originX + (bufferWidth * randNum2),
		originY + (bufferHeight * randNum1), bufferWidth, bufferHeight);*/
}

bool LevelManager::Score(int currentLevel)
{
	ifstream input;

	if (currentLevel == 0)
	{
		input.open(LEVEL);
	}
	if (currentLevel == 1)
	{
		input.open(LEVEL2);
	}
	if (currentLevel == 2)
	{
		input.open(LEVEL3);
	}
	
	assert(input);
	string word;
	int points;
	int winScore;

	while (!input.eof())
	{
		input >> word;

		if (word == "FoodPoints")
		{
			input >> points;

			score += points;
			cout << "Score added from Food Points: " << score << endl;
		}

		if (word == "BeatLevelPoints")
		{
			input >> winScore;

			if (score == winScore)
			{
				cout << "Beat Level" << endl;
				cout << "Score to Win: " << score << endl;
				score = 0;
				return true;
			}
		}
	}
	input.close();
	return false;
}