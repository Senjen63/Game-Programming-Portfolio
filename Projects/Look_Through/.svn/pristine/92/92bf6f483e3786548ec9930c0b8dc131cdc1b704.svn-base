#include "Animation.h"
#include <Timer.h>

Animation::Animation()
{
	mTime = 0;
	mCurrentTime = 0;
	mCurrentSprite = 0;
	mNumSprites = 0;
	mLoop = false;
}

Animation::Animation(GraphicsBuffer* pBuffer, int numSprites, float timing, bool loop, int columns, int rows)
{
	int count = 0;
	Vector2D pos = Vector2D();
	//same thing I did to randomize the sprites, but now it's splicing them and putting them into a vector.
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < columns; j++)
		{
			//this is here to allow for "nonsquare" sprite sheets.
			if (count <= numSprites) 
			{
				pos.setX(j * 32);
				pos.setY(i * 32);
				Sprite* pSprite = new Sprite(pBuffer, pos, 32, 32);
				mpSpritesheet.push_back(pSprite);
				count++;
			}
		}
	}
	mTime = timing;
	mCurrentTime = 0;
	mLoop = loop;
	mCurrentSprite = 0;
	mNumSprites = numSprites;
}

Animation::~Animation()
{
	for (int i = 0; i < mNumSprites; i++)
	{
		Sprite* pSprite = mpSpritesheet[i];
		delete pSprite;
	}
	mpSpritesheet.clear();
	mTime = 0;
	mCurrentTime = 0;
	mCurrentSprite = 0;
	mLoop = false;
}

void Animation::Update()
{
	if (mCurrentSprite < mNumSprites - 1)
	{
		mCurrentSprite++;
	}
	else if (mCurrentSprite == mNumSprites - 1)
	{
		if (mLoop)
		{
			mCurrentSprite = 0;
		}
	}
}

Sprite* Animation::GetCurrentSprite()
{
	return mpSpritesheet[mCurrentSprite];
}

void Animation::AdjustTime(float modifier)
{
	mTime += modifier;

	if (mTime <= 0)
	{
		mTime = .0001;
	}
}

float Animation::GetTime()
{
	return mTime;
}
