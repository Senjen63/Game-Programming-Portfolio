
#include "GraphicsSystem.h"

GraphicsSystem::GraphicsSystem()
{
	init(DISP_HEIGHT, DISP_WIDTH);
	//mpDisplay = NULL;
}

GraphicsSystem::~GraphicsSystem()
{
	cleanUp();
}

GraphicsSystem::GraphicsSystem(int height, int width)
{
	init(DISP_HEIGHT, DISP_WIDTH);
	mpDisplay = al_create_display(width, height);
	assert(mpDisplay);
}

int GraphicsSystem::init(int height, int width)
{
	if (!al_init())
	{
		cout << "error initting Allegro\n";
		system("pause");
		return 1;
	}
	if (!al_init_image_addon())
	{
		cout << "error - Image Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_font_addon())
	{
		cout << "error - Font Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_ttf_addon())
	{
		cout << "error - TTF Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_primitives_addon())
	{
		cout << "error - primitives Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_install_audio())
	{
		cout << "error - Audio Add-on not initted\n";
		system("pause");
		//return 1;
	}
	if (!al_init_acodec_addon())
	{
		cout << "error - Audio Codec Add-on not initted\n";
		system("pause");
		//return 1;
	}
	if (!al_reserve_samples(1))
	{
		cout << "error - samples not reserved\n";
		system("pause");
		//return 1;
	}

	mpDisplay = al_create_display(width, height);
	assert(mpDisplay);

	return 0;
}

void GraphicsSystem::cleanUp()
{
	if (mpDisplay)
	{
		al_destroy_display(mpDisplay);
		mpDisplay = nullptr;
	}
}

int GraphicsSystem::getHeight()
{
	return al_get_display_height(mpDisplay);
}

int GraphicsSystem::getWidth()
{
	return al_get_display_width(mpDisplay);
}

ALLEGRO_DISPLAY* GraphicsSystem::getBackBuffer()
{
	return mpDisplay;
}

ALLEGRO_BITMAP* GraphicsSystem::getBitmap()
{
	return al_get_backbuffer(mpDisplay);
}

void GraphicsSystem::flip()
{
	al_flip_display();
}

void GraphicsSystem::draw(GraphicsBuffer* pBuffer)
{
	al_draw_bitmap(pBuffer->getBitmap(), 0, 0, 0);
}
void GraphicsSystem::draw(Vector2D location, Sprite* pSprite)
{
	al_draw_bitmap(pSprite->getBuffer()->getBitmap(), location.getX(), location.getY(), 0);
}

void GraphicsSystem::draw(Vector2D location, Sprite* pSprite, int dispWidth, int dispHeight)
{
	al_draw_bitmap_region(pSprite->getBuffer()->getBitmap(), location.getX(), location.getY(), pSprite->getWidth(), pSprite->getHeight(), dispWidth - pSprite->getWidth(), dispHeight - pSprite->getHeight(), 0);
}

void GraphicsSystem::draw(GraphicsBuffer* pBuffer, Vector2D location, float scale)
{
	//al_set_target_bitmap(al_get_backbuffer(getBackBuffer()));
	al_draw_scaled_bitmap(pBuffer->getBitmap(), 0, 0, pBuffer->getWidth(), pBuffer->getHeight(), location.getX(), location.getY(), pBuffer->getWidth() * scale, pBuffer->getHeight() * scale, 0);
}

void GraphicsSystem::draw(GraphicsBuffer* pTarget, GraphicsBuffer* pBuffer, Vector2D location, float scale)
{
	ALLEGRO_BITMAP* oldBitmap = al_get_target_bitmap();

	al_set_target_bitmap(pTarget->getBitmap());
	al_draw_scaled_bitmap(pBuffer->getBitmap(), 0, 0, pBuffer->getWidth(), pBuffer->getHeight(), location.getX(), location.getY(), pBuffer->getWidth() * scale, pBuffer->getHeight() * scale, 0);

	al_set_target_bitmap(oldBitmap);
}

void GraphicsSystem::draw(GraphicsBuffer* pGraphicsBuffer, Vector2D location, Sprite* pSprite, float scale)
{
	al_draw_scaled_bitmap(pGraphicsBuffer->getBitmap(), 0, 0, pSprite->getWidth(), pSprite->getHeight(), location.getX(), location.getY(), pSprite->getWidth() * scale, pSprite->getHeight() * scale, 0);
}

void GraphicsSystem::writeText(Vector2D location, Font* pFont, Color color, string text)
{
	al_draw_text(pFont->getFont(), color.getColor(), location.getX(), location.getY(), ALLEGRO_ALIGN_CENTER, text.c_str());
}

void GraphicsSystem::writeText(GraphicsBuffer* pGraphicsBuffer, Vector2D location, Font* pFont, Color color, string text)
{
	ALLEGRO_BITMAP* oldBitmap = al_get_target_bitmap();
	al_set_target_bitmap(pGraphicsBuffer->getBitmap());

	al_draw_text(pFont->getFont(), color.getColor(), location.getX(), location.getY(), ALLEGRO_ALIGN_CENTER, text.c_str());

	al_set_target_bitmap(oldBitmap);
}

void GraphicsSystem::saveBuffer(GraphicsBuffer* pBuffer, string fileName)
{
	al_save_bitmap(fileName.c_str(), pBuffer->getBitmap());
}
