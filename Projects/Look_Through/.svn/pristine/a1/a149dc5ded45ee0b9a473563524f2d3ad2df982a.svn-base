#pragma once
#include <vector>
#include <EventListener.h>
#include <Event.h>
#include <EventSystem.h>

#include "GraphicsSystem.h"
#include "InputSystem.h"
#include "InputTranslator.h"
#include "Player.h"
#include "LevelManager.h"
#include "AssetManager.h"
#include "Music.h"
#include "Menu.h"
#include "UI.h"
#include "Camera.h"

enum Language
{
	ENGLISH,
	SPANISH,
	PIG_LATIN
};

enum Difficulty
{
	EASY,
	NORMAL,
	HARD
};

enum Sounds
{
	HIT,
	PUNCH,
	ROLL,
	DAMAGE_ENEMY,
	KILL_ENEMY,
	WIN
};

class Game : public EventListener
{
public:

	static const int DISP_WIDTH = 768;
	static const int DISP_HEIGHT = 512;
	static const int TILE_SIZE = 32;
	static const int LEVEL_HEIGHT = 18;
	static const int LEVEL_WIDTH = 24;
	static const int FONT_SIZE = 48;
	static const int DIR_COUNT = 4;
	const std::string ASSET_PATH = "assets/";
	const std::string SAVEFILE_PATH = "savefile.txt";
	const std::string SETTINGS_PATH = "settings.txt";
	const double GAME_FPS = 16.67;

	/*const std::string FONT_ASSET_PATH = "Assets\\";
	const std::string SPRITE_ASSET_PATH = "Assets\\Sprites\\";
	const std::string SPRITE_FILENAME = "sprites.txt";
	std::string const getFontPath() { return FONT_ASSET_PATH + mFontFile; }*/

	static void createGame();
	static void deleteGame();
	static Game* getInstance();

	void init();
	void cleanup();

	void saveGame();
	void saveSettings();
	bool loadGame();
	void loadAssets();

	void doLoop();
	void handleEvent(const Event& theEvent);

	void playSound(Sounds toPlay);

	//accessors
	GraphicsSystem* getGraphics() { return mpGraphics; }
	LevelManager* getLevels() { return mpLevels; }
	InputSystem* getInputs() { return mpInputs; }
	AssetManager* getAssets() { return mpAssets; }
	Player* getPlayer() { return mpPlayer; }
	double getFPS() { return mFPS; }
	std::string getState() { return mGameState; }

	//accessors for setting
	bool getSoundOn() { return mSound; }
	bool getMusicOn() { return mMusic; }
	Difficulty getDifficulty() { return mDifficulty; }
	Language getLanguage() { return mLanguage; }

private:
	Game();
	~Game();

	GraphicsSystem* mpGraphics;
	LevelManager* mpLevels;
	InputSystem* mpInputs;
	InputTranslator* mpTranslator;
	EventSystem* mpEvents;
	Font* mpFont;
	Player* mpPlayer;
	Music* mpMusic;
	AssetManager* mpAssets;
	UI* mpGameUI;

	//menus
	Menu* mpMainMenu;
	Menu* mpOptionsMenu;

	double mFPS;
	static Game* mpsInstance;
	bool mInitted = false;
	std::string mGameState;
	bool toQuit;

	//checks for input pressed
	bool mSpacePressed;
	bool mShiftPressed;
	bool mUpPressed;
	bool mDownPressed;

	//settings in options menu
	bool mSound;
	bool mMusic;
	Language mLanguage;
	Difficulty mDifficulty;
};