/*
Author: David Silverman
Class: GPR-250-01
Assignment: Assignment 3
Certification of Authenticity:
I certify that this assignment is entirely my own work.
 */


#pragma once
#include "graphicsbuffermanager.h"

using namespace std;

/* Pre:  Nothing
*  Post:  A graphics buffer manager
*  Purpose:  Create the graphics buffer manager
*********************************************************/
GraphicsBufferManager::GraphicsBufferManager()
{

}

/* Pre:  A graphics buffer manager
*  Post:  Nothing
*  Purpose:  Destroy the Graphics Buffer manager
*********************************************************/
GraphicsBufferManager::~GraphicsBufferManager()
{
	Clear();
}

/* Pre:  Parameters for a graphics buffer manager
*  Post:  A graphics buffer
*  Purpose:  Create the graphics buffer manager
*********************************************************/
void GraphicsBufferManager::addBuffer(string key, int wi, int hi)
{
	mCodes.push_back(key);
	pair <string, GraphicsBuffer*> buffAdd (key, new GraphicsBuffer(key, wi, hi));
	mMap.insert(buffAdd);
}

/* Pre:  Parameters for a graphics buffer
*  Post:  A graphics buffer
*  Purpose:  Create a graphics buffer
*********************************************************/
void GraphicsBufferManager::addBuffer(string key, string filename, int wi, int hi)
{
	mCodes.push_back(key);
	pair <string, GraphicsBuffer*> buffAdd(filename, new GraphicsBuffer(key, wi, hi));
	mMap.insert(buffAdd);
}

/* Pre:  A key
*  Post:  A graphics buffer
*  Purpose:  Get a graphics buffer
*********************************************************/
GraphicsBuffer* GraphicsBufferManager::getBuffer(string key)
{
	return mMap[key];
}

/* Pre:  A key
*  Post:  Nothing
*  Purpose:  Destroy the graphics buffer
*********************************************************/
void GraphicsBufferManager::deleteBuffer(string key)
{
	delete mMap[key];
	mMap.erase(key);
}

/* Pre:  Nothing
*  Post:  Nothing
*  Purpose:  Clear the manager
*********************************************************/
void GraphicsBufferManager::Clear()
{
	string key;
	for (int i = 0; i < mCodes.size(); i++)
	{
		key = mCodes[i];
		delete mMap[key];
		mMap.erase(key);
	}
	mCodes.clear();
}

/* Pre:  Nothing
*  Post:  Nothing
*  Purpose:  Clear the manager
*********************************************************/
void GraphicsBufferManager::Cleanup()
{
	Clear();
}