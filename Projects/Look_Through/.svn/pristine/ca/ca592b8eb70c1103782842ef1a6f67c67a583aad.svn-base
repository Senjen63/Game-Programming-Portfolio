/*
Author: David Silverman
Class: GPR-250-01
Assignment: Assignment 2
Certification of Authenticity:
I certify that this assignment is entirely my own work.
 */


#pragma once
#include "animation.h"

using namespace std;

 /* Pre:  Nothing
 *  Post:  A drawn sprite
 *  Purpose:  Draw a sprite
 *********************************************************/
Animation::Animation()
{
	mTiming = 0;
}

Animation::Animation(float time)
{
	mTiming = time;
}

Animation::Animation(GraphicsBuffer* buffer, int rows, int columns, float bufferWidth, float bufferHeight, float time)
{
	float mSprWidth = bufferWidth / columns;
	float mSprHeight = bufferHeight / rows;

	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < columns; j++)
		{
			Vector2D mPos = Vector2D(j * mSprWidth, i * mSprHeight);
			mFrames.push_back(Sprite(mPos, mSprHeight, mSprWidth, buffer));
			mTotalSprites++;
			mLastSprite = mTotalSprites - 1;
		}
	}

	mTiming = time;
}

Animation::~Animation()
{
	mFrames.clear();
}

void Animation::addSprite(Sprite* spri)
{
	mFrames.push_back(*spri);
}

void Animation::addSprite(GraphicsBuffer* buffer, int rows, int columns, float bufferWidth, float bufferHeight)
{
	mSprWidth = bufferWidth / columns;
	mSprHeight = bufferHeight / rows;

	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < columns; j++)
		{
			Vector2D mPos = Vector2D(j * mSprWidth, i * mSprHeight);
			mFrames.push_back(Sprite(mPos, mSprHeight, mSprWidth, buffer));
			//mTotalSprites++;
			mLastSprite = mTotalSprites - 1;
		}
	}
}

void Animation::update()
{
	if (mIsEndSprite)
	{
		mCurrentSprite = 0;
		mIsEndSprite = false;
	}
	else
	{
		mCurrentSprite++;
		if (mCurrentSprite == mLastSprite)
			mIsEndSprite = true;
	}
}


Sprite Animation::getCurrentSprite()
{
	return mFrames[mCurrentSprite];
}

void Animation::speedUp(float rate)
{
	mTiming -= rate;
}

void Animation::slowDown(float rate)
{
	mTiming += rate;
}

Animation Animation::operator = (Animation const& ani)
{
	mFrames = ani.mFrames;
	mTiming = ani.mTiming;
	mCurrentSprite = ani.mCurrentSprite;
	mLastSprite = ani.mLastSprite;
	mTotalSprites = ani.mTotalSprites;
	mIsEndSprite = ani.mIsEndSprite;
	mSprWidth = ani.mSprWidth;
	mSprHeight = ani.mSprHeight;

	return *this;
}