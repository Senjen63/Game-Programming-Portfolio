#include "Level.h"
#include <fstream>
#include "Color.h"
#include "Game.h"
#include "GraphicsBufferManager.h"
#include "Sprite.h"
#include "GraphicsBuffer.h"
#include "GraphicsSystem.h"
#include "LevelManager.h"
#include "UnitManager.h"
#include "Animation.h"
#include <stdlib.h>
#include <time.h>
#include "Snake.h"

Level::Level(string fileName)
{
	Game* pGame = Game::getInstance();

	int red = 0;
	int green = 0;
	int blue = 0;
	int a = 0;

	int x = 0;
	int y = 0;

	ifstream input(fileName);
	if (input.good())
	{
		string key;

		while (!input.eof())
		{
			input >> key;
			if (key == "snake_speed")
			{
				input >> this->mSnakeSpeed;
			}
			else if (key == "snake_start_segements")
			{
				input >> this->mSnakeStartSegements;
			}
			else if (key == "snake_end_segements")
			{
				input >> this->mSnakeEndSegements;
			}
			else if (key == "food_points")
			{
				input >> this->mFoodPoints;
			}
			else if (key == "bonus_points")
			{
				input >> this->mBonusPoints;
			}
			else if (key == "slow_down_frequency")
			{
				input >> this->mSlowDownFrequency;
			}
			else if (key == "speed_up_frequency")
			{
				input >> this->mSpeedUpFrequency;
			}
			else if (key == "snake_growth")
			{
				input >> this->mSnakeGrowth;
			}
			else if (key == "snake_start_location")
			{
				input >> x >> y;
				this->mSnakeStartLocation = Vector2D(x, y);
			}
			else if (key == "wall_locations")
			{
				const int GRID_SIZE = pGame->getGridSize().getX() * pGame->getGridSize().getY();

				int wall = 0;

				for (int i = 0; i < GRID_SIZE; i++)
				{
					input >> wall;
					mWallLocations.push_back(wall);
				}
			}
		}
	}
	input.close();

	initWallCoords();
}

Level::~Level()
{
}

void Level::initWallCoords()
{
	Game* pGame = Game::getInstance();

	const int GRID_WIDTH = pGame->getGridSize().getX();
	const int GRID_HEIGHT = pGame->getGridSize().getY();

	int x = 0;
	int y = 0;

	int index = 0;

	for (int i = 1; i <= GRID_HEIGHT; i++)
	{
		for (int j = 1; j <= GRID_WIDTH; j++)
		{
			if (mWallLocations[index] == 1)
			{
				mWallCoords.push_back(Vector2D(x, y));
			}
			else
			{
				mEmptySpaces.push_back(Vector2D(x, y));
			}
			x += pGame->getGridSlotSize().getX();
			index++;
		}
		x = 0;
		y += pGame->getGridSlotSize().getX();
	}
}

