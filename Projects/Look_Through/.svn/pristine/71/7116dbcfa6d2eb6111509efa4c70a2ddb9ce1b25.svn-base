#include "GraphicsBufferManager.h"

//GraphicsBufferManager::GraphicsBufferManager()
//{
//
//}

GraphicsBufferManager::~GraphicsBufferManager()
{
	cleanup();
}

//deleting
void GraphicsBufferManager::cleanup()
{
	for (auto iter : mMap)
	{
		GraphicsBuffer* pBuffer = iter.second;
		delete pBuffer;
	}

	mMap.clear();
}

//adding
void GraphicsBufferManager::createAndManageGraphicsBuffers(const BufferKey& key, const char* filename)
{
	GraphicsBuffer* pBuffer = NULL;

	//figure out if it exists already
	auto iter = mMap.find(key); //go thrpough all keys

	//New key
	if (iter == mMap.end())
	{
		//key didnt exist
		pBuffer = new GraphicsBuffer(filename);
		mMap[key] = pBuffer;
	}

	//return pBuffer;
}

void GraphicsBufferManager::createAndAddGraphicsBuffer(const BufferKey& key, int width, int height)
{
	GraphicsBuffer* pGraphicsBuffer = NULL;
	// figure out if it exists already
	auto iter = mMap.find(key);
	// already in map?
	if (iter == mMap.end())
	{
		// not already there - just create and add it
		pGraphicsBuffer = new GraphicsBuffer(width, height);
		mMap[key] = pGraphicsBuffer;
	}
}

//getting graphics buffer
GraphicsBuffer* GraphicsBufferManager::getBuffer(const BufferKey& key)const
{
	auto iter = mMap.find(key);

	if (iter != mMap.end())
	{
		return iter->second;
	}
	else
	{
		return NULL;
	}
}

//clear all except backBuffer
void GraphicsBufferManager::deleteBufferKey(const BufferKey& key)
{
	//how does auto work?
	auto iter = mMap.find(key);

	//key was found
	if (iter != mMap.end())
	{
		delete iter->second;//idk what this means what is second
		mMap.erase(iter);
	}
}

//delete whole buffer
void GraphicsBufferManager::deleteBuffer(GraphicsBuffer* pBuffer)
{
	for (auto iter : mMap)
	{
		if (pBuffer == iter.second)
		{
			delete pBuffer;
			mMap.erase(iter.first);
			return;
		}
	}
}