#include "GraphicsBufferManager.h"

GraphicsBuffer* GraphicsBufferManager::addBuffer(const BufferKey& key, string contents)
{
	GraphicsBuffer* pBuffer = nullptr;

	auto iter = mMap.find(key);

	if (iter == mMap.end())
	{
		pBuffer = new GraphicsBuffer(contents);
		mMap[key] = pBuffer;
	}

	return pBuffer;
}

void GraphicsBufferManager::clear()
{
	for (auto iter : mMap)
	{
		GraphicsBuffer* pBuffer = iter.second;
		delete pBuffer;
	}

	mMap.clear();
}

void GraphicsBufferManager::deleteBuffer(const BufferKey& key)
{
	auto iter = mMap.find(key);

	if (iter != mMap.end())
	{
		delete iter->second;
		mMap.erase(iter);
	}
}

void GraphicsBufferManager::deleteBuffer(GraphicsBuffer* pBuffer)
{
	for (auto iter : mMap)
	{
		if (pBuffer == iter.second)
		{
			delete pBuffer;
			mMap.erase(iter.first);
			return;
		}
	}
}

GraphicsBuffer* GraphicsBufferManager::getBuffer(const BufferKey& key)
{
	auto iter = mMap.find(key);
	if (iter != mMap.end())
	{
		return iter->second;
	}
	else
	{
		return nullptr;
	}
}

GraphicsBufferManager::GraphicsBufferManager()
{

}

GraphicsBufferManager::~GraphicsBufferManager()
{
	clear();
}