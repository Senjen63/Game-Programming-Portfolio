//     -------------------------------------------------------------------------
//     Final Project
//         ComponentManager.hpp
//     
//             Created:
//                 08-04-2022
//             Author(s):
//                 Aven Presseisen
//     -------------------------------------------------------------------------

#pragma once

#include <typeindex>
#include <unordered_map>

#include "Component.hpp"

class ComponentManager
{
    std::unordered_map< std::type_index, ComponentMask > mComponentMasks;
    ComponentMask mCurrentMask;

public:
    ComponentManager();

    ComponentMask getMask( std::type_index type );

    template < typename ... T >
    ComponentMask getMasks();

    template < typename Component >
    void registerComponent();
};

template < typename ... T >
ComponentMask ComponentManager::getMasks()
{
    return (getMask( std::type_index( typeid( T ) ) ), ...);
}

template < typename TComponent >
void ComponentManager::registerComponent()
{
    mComponentMasks[ std::type_index( typeid( TComponent ) ) ] = mCurrentMask;
    mCurrentMask <<= 1;
}

// store component mask
// store entity mask
