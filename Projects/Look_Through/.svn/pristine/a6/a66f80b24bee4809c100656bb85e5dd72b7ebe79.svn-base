#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

#include <iostream>
#include <cassert>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>

#include "GraphicsBuffer.h"
#include "GraphicsSystem.h"
#include "Color.h"
#include "Font.h"

using namespace std;

int main()
{
	srand(time(NULL));

	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;

	const string INIT_TRACKER_NAME = "init";
	const string DRAW_TRACKER_NAME = "draw";
	const string WAIT_TRACKER_NAME = "wait";

	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;

	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string BACKGROUND_FILENAME = "steps.png";
	const string QUIMBY_FILENAME = "mayor_quimby.png";
	const string SMURF_FILENAME = "smurf_sprites.png";
	const string FONT_FILENAME = "cour.ttf";
	const int FONT_SIZE = 50;
	const string SAMPLE_FILENAME = "clapping.wav";
	const double SLEEP_TIME = 5.0;

	GraphicsSystem* display = new GraphicsSystem();
	if (display->init(DISP_HEIGHT, DISP_WIDTH) == 1) {
		system("pause");
		return 0;
	}
	else {
		display = new GraphicsSystem(DISP_HEIGHT, DISP_WIDTH);
		Color colRed = Color(255, 0, 0);
		Color colBlack = Color(0, 0, 0);

		GraphicsBuffer* background = new GraphicsBuffer(ASSET_PATH + BACKGROUND_FILENAME);
		GraphicsBuffer* quimby = new GraphicsBuffer(ASSET_PATH + QUIMBY_FILENAME);
		GraphicsBuffer* smurf = new GraphicsBuffer(ASSET_PATH + SMURF_FILENAME);
		GraphicsBuffer* red = new GraphicsBuffer(colRed, DISP_HEIGHT, DISP_WIDTH);

		Font* font = new Font((ASSET_PATH + FONT_FILENAME), FONT_SIZE);

		Vector2D textLoc;
		textLoc.setX(133);
		textLoc.setY(100);

		Vector2D origin;
		origin.setX(0);
		origin.setY(0);

		display->draw(background);
		display->draw(red, quimby, origin, 1);
		display->drawText(red, origin, font, colBlack, "Curse you Papa Smurf!!!");
		display->draw(red, textLoc, 0.66);

		int numSmurfs = 16;
		Vector2D mapPos;

		int i, j;
		for (i = 0; i < 4; i++) {
			for (j = 0; j < 4; j++) {
				mapPos.setX(i * 60);
				mapPos.setY(j * 60);

				Sprite* smurfs = new Sprite(smurf, mapPos, 60, 60);

				display->draw(mapPos, smurfs, DISP_WIDTH, DISP_HEIGHT);

				delete smurfs;
			}
		}

		display->saveBuffer(display->getBitmap(), "backbuffer.jpg");
		display->saveBuffer(red->getBitmap(), "redBuffer.jpg");

		bool running = true;

		Timer timer;

		display->flip();

		timer.sleep(5000.0);

		pPerformanceTracker->stopTracking("loop");

		pPerformanceTracker->clearTracker("loop");

		delete display;
		delete background;
		delete smurf;
		delete quimby;
		delete red;
		delete font;

		delete pPerformanceTracker;
		MemoryTracker::getInstance()->reportAllocations(cout);

		system("pause");
		return 0;
	}
}