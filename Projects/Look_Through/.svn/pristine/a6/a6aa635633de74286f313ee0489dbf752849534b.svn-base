#pragma once

#include <vector>
#include <random>
#include <Trackable.h>

#include "Level.h"
#include "Animation.h"
#include "PlayerInfo.h"

class LevelManager : public Trackable
{
public:
    LevelManager() = delete;
    LevelManager(std::string loadFilePath);
    ~LevelManager();

    void loadLevel(int index);
    void loadRandomLevel();
    void unloadActiveLevel();

    void loadSaveData();
    void saveGame();

    void init();
    void cleanUp();

    void update(double deltaTime);
    void draw(GraphicsSystem* display);

    const Level& getLevel(int index) const { return mLevels.at(index); }
    Level* getActiveLevel() const { return mActiveLevel._Ptr; }
    bool isALevelLoaded() const { return mIsALevelLoaded; }

    int getSpeedIndex() const { return mSpeedIndex; }
    void setSpeedIndex(int speedIndex) { mSpeedIndex = speedIndex; }

    float getCurrentTankSpeed() const { return mTankSpeeds[mSpeedIndex]; }
    float getTurnSpeed() const { return mTurnSpeed; }
    float getCurrentBulletSpeed() const { return mBulletSpeeds[mSpeedIndex]; }

    const Animation* getWallAnimation() const { return mpWallAnimation; }
    const Animation* getTankAnimation() const { return mpTankAnimation; }

    /// <summary> Loads in level file names and creates the levels </summary>
    friend std::istream& operator>>(std::istream& istream, LevelManager& levelManager);

private:
    bool mIsALevelLoaded = false;
    bool mHasSaveData = false;

    std::vector<float> mTankSpeeds;
    std::vector<float> mBulletSpeeds;
    float mTurnSpeed = 0;

    std::vector<Level> mLevels;
    std::vector<Level>::iterator mActiveLevel;

    // Level randomization 
    void randomizeLevelOrder();
    std::vector<int> mRandomLevelOrder;
    std::vector<int>::iterator mCurrentRandomLevelOrder;
    std::default_random_engine mGenerator;

    std::string mWallAnimationPath;
    std::string mTankAnimationPath;
    float mTankFrameRate = 0;
    int mTankSize = 0;

    Animation* mpWallAnimation = nullptr;
    Animation* mpTankAnimation = nullptr;

    std::string mSaveDataPath;

    int mSpeedIndex = 0;

    bool mIsInitted = false;
};
