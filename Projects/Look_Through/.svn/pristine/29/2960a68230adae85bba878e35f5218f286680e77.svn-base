#pragma once

#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

#include <string>
#include <iostream>

#include "Sprite.h"
#include "Font.h"
#include "Color.h"

class GraphicsSystem
{
public:
	GraphicsSystem(float displayWidth, float displayHeight);
	~GraphicsSystem();

	void init();
	void clean();

	float getDisplayHeight() { return al_get_display_width(mpDisplay); }
	float getDisplayWidth() { return al_get_display_height(mpDisplay); }
	GraphicsBuffer* getBackBuffer() { return displayBuffer; };

	void flipBackBuffer() { al_flip_display(); }

	void draw(float xPos, float yPos, Sprite sprite, float scaleX, float scaleY); // Draw to current backbuffer
	void draw(GraphicsBuffer* graphicsBuffer, float xPos, float yPos, Sprite sprite, float scaleX, float scaleY); // Draw to given graphics buffer

	void writeText(float xPos, float yPos, Font* font, Color color, std::string text); // Write to current backbuffer
	void writeText(GraphicsBuffer* graphicsBuffer, float xPos, float yPos, Font* font, Color color, std::string text); // Write to given graphics buffer

	void saveBuffer(ALLEGRO_BITMAP* bitmap, std::string filename); // Directly given bitmap (ie. backbuffer)
	void saveBuffer(GraphicsBuffer* graphicsBuffer, std::string filename); // Indirectly given bitmap (ie. buffer class)

private:
	ALLEGRO_DISPLAY* mpDisplay;
	GraphicsBuffer* displayBuffer;
};