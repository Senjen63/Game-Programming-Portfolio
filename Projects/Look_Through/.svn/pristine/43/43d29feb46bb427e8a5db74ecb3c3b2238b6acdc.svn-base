#include "UnitManager.h"

#include <cassert>

UnitManager::UnitManager()
{

}


UnitManager::~UnitManager()
{
	for (unsigned int i = 0; i < mpUnits.size(); i++)
	{
		delete mpUnits[i];
		mpUnits[i] = nullptr;
	}

	mpUnits.clear();
}


Unit* UnitManager::addUnit()
{
	mpUnits.push_back(new Unit());
	return mpUnits[mpUnits.size() - 1];
}


Unit* UnitManager::addUnit(Animation* pAnim, Vector2D location)
{
	mpUnits.push_back(new Unit(pAnim, location));
	return mpUnits[mpUnits.size() - 1];
}


void UnitManager::deleteUnit(unsigned int index)
{
	assert(index < mpUnits.size());

	delete mpUnits[index];
	mpUnits.erase(mpUnits.begin() + index);
}


void UnitManager::deleteAll()
{
	for (unsigned int i = 0; i < mpUnits.size(); i++)
	{
		delete mpUnits[i];
		mpUnits[i] = nullptr;
	}

	mpUnits.clear();
}


Unit* UnitManager::getUnit(unsigned int index)
{
	assert(index < mpUnits.size());
	return mpUnits[index];
}


/*
Searches the internal vector for the provided pointer, returns -1 if not found.
*/
int UnitManager::getIndex(Unit* target)
{
	for (unsigned int i = 0; i < mpUnits.size(); i++)
	{
		if (mpUnits[i] == target)
		{
			return i;
		}
	}

	return -1;
}


unsigned int UnitManager::getLength()
{
	return mpUnits.size();
}


void UnitManager::updateAll(float dt)
{
	for (unsigned int i = 0; i < mpUnits.size(); i++)
	{
		mpUnits[i]->update(dt);
	}
}


void UnitManager::drawAll()
{
	for (unsigned int i = 0; i < mpUnits.size(); i++)
	{
		mpUnits[i]->draw();
	}
}
