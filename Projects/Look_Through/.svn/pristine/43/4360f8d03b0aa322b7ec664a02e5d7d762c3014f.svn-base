#pragma once

#include <Trackable.h>
#include <SDL_ttf.h>
//#include <map>

class Font : public Trackable
{
    friend class GraphicsSystem;

    // Custom deleter for TTF_Font for the smart pointer 
    // bc there is no TTF_Font::~TTF_Font() 
    struct TTF_Deleter
    {
        void operator()(TTF_Font* pFont)
        {
            TTF_CloseFont(pFont);
        }
    };

public:
    Font(const std::string& pathToFont, int fontSize);

    Font() = default;
    Font(const Font& other) = default;

    ~Font() {};

     int getFontSize() const { return mFontSize; }

    bool isValidFont() const { return (bool)mpFont; }

private:
    TTF_Font* getTTFFont() const { return mpFont.get(); }

    // Use a shared pointer here so that we can copy TTF_Font without destroying it every time 
    std::shared_ptr<TTF_Font> mpFont;

    int mFontSize = 0;
};
