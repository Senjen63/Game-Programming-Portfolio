/*
Author: David Silverman
Class: GPR-250-01
Assignment: Assignment 1
Certification of Authenticity:
I certify that this assignment is entirely my own work.
 */


#pragma once
#include "color.h";

 /* Pre:  A number
 *  Post:  A normalized value
 *  Purpose:  Contain the color's values
 *********************************************************/
int Color::normalize(int raw)
{
	if (raw > 255)
	{
		raw = 255;
	}
	else if(raw < 0)
	{
		raw = 0;
	}

	return raw;
}

/* Pre:  The color's values
*  Post:  An Allegro Color
*  Purpose:  Returning an Allegro Color
*********************************************************/
ALLEGRO_COLOR Color::getColor()
{
	return al_map_rgba(mRed, mGreen, mBlue, mAlpha);
}

/* Pre:  Nothing
*  Post:  A color
*  Purpose:  Create a color
*********************************************************/
Color::Color()
{
	mRed = 0;
	mGreen = 0;
	mBlue = 0;
	mAlpha = 255;
}

/* Pre:  A color
*  Post:  Nothing
*  Purpose:  Delete a color
*********************************************************/
Color::~Color()
{

}

/* Pre:  A color
*  Post:  A color
*  Purpose:  Create a color
*********************************************************/
Color::Color(ALLEGRO_COLOR colo)
{
	mRed = colo.r;
	mGreen = colo.g;
	mBlue = colo.b;
	mAlpha = colo.a;
}

/* Pre:  Red, Green, and Blue
*  Post:  A color
*  Purpose:  Create a color
*********************************************************/
Color::Color(int re, int gree, int blu)
{
	mRed = normalize(re);
	mGreen = normalize(gree);
	mBlue = normalize(blu);
	mAlpha = 255;
}

/* Pre:  Red, Green, Blue, and Alpha
*  Post:  A color
*  Purpose:  Create a color
*********************************************************/
Color::Color(int re, int gree, int blu, int alph) 
{
	mRed = normalize(re);
	mGreen = normalize(gree);
	mBlue = normalize(blu);
	mAlpha = normalize(alph);
}

/* Pre:  A number
*  Post:  Red
*  Purpose:  Set the color's red
*********************************************************/
void Color::setRed(int re)
{
	mRed = normalize(re);
}

/* Pre:  A number
*  Post:  Green
*  Purpose:  Set the color's green
*********************************************************/
void Color::setGreen(int gree)
{
	mGreen = normalize(gree);
}

/* Pre:  A number
*  Post:  Blue
*  Purpose:  Set the color's blue
*********************************************************/
void Color::setBlue(int blu)
{
	mBlue = normalize(blu);
}

/* Pre:  A number
*  Post:  Alpha
*  Purpose:  Set the color's alpha
*********************************************************/
void Color::setAlpha(int alph)
{
	mAlpha = normalize(alph);
}

/* Pre:  Nothing
*  Post:  Red
*  Purpose:  Get the color's red
*********************************************************/
int Color::getRed()
{
	return mRed;
}

/* Pre:  Nothing
*  Post:  Green
*  Purpose:  Get the color's green
*********************************************************/
int Color::getGreen()
{
	return mGreen;
}

/* Pre:  Nothing
*  Post:  Blue
*  Purpose:  Get the color's blue
*********************************************************/
int Color::getBlue()
{
	return mBlue;
}

/* Pre:  Nothing
*  Post:  Alpha
*  Purpose:  Get the color's alpha
*********************************************************/
int Color::getAlpha()
{
	return mAlpha;
}