#pragma once

#include <vector>
#include <Trackable.h>

enum class FoodType
{
    INVALID = -1,
    EMPTY,
    GROW,
    POINTS,
    SPEED_UP,
    SLOW_DOWN,
    NUM_FOOD_TYPES
};

const FoodType START_OF_POWERUPS = FoodType::POINTS;

class Food : public Trackable
{
public:
    ~Food() {};

    FoodType getType() const { return mType; }
    float getWeight() const { return mWeight; }
    int getPointsAmount() const { return mPointsAmount; }

    static void normalizeWieghts(const std::vector<Food*>& foods);
    static const Food* pickRandomFood(const std::vector<Food*>& foods);
    static FoodType strToEnum(const std::string& str);

protected:
    Food(FoodType type, float weight, int pointsAmount);

private:
    FoodType mType;
    float mWeight;
    int mPointsAmount;
};

class EmptyFood : public Food
{
public:
    EmptyFood(float weight);
    ~EmptyFood() {};
};

class GrowFood : public Food
{
public:
    GrowFood(float weight, int pointsAmount, int growAmount);
    ~GrowFood() {};

    int getGrowAmount() const { return mGrowAmount; }

private:
    int mGrowAmount = 1;
};

class PointsFood : public Food
{
public:
    PointsFood(float weight, int pointsAmount);
    ~PointsFood() {};
};

class SpeedFood : public Food
{
public:
    SpeedFood(float weight, float deltaTime, int pointsAmount = 0);
    ~SpeedFood() {};

    float getDeltaTime() const { return mDeltaTime; }

private:
    float mDeltaTime = 0;
};
