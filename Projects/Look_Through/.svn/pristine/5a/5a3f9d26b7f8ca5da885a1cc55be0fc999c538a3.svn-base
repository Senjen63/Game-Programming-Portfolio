#pragma once

#include "Collider.h"

class BoxCollider : public Collider
{
public:
    BoxCollider(CollisionTag collisionTag, Vector2D bounds);
    virtual ~BoxCollider() {};

    // Implement these as needed 
    virtual	void init() {};
    virtual void cleanUp() {};
    virtual void Update(double deltaTime) { Collider::Update(deltaTime); };
    virtual void handleEvent(const Event& theEvent) {};

    virtual bool collides(const Collider& other) const;

    Vector2D getBounds() const { return mBounds; }

    Vector2D getTopRight()      const { return Vector2D(getRightX(),    getTopY());     }
    Vector2D getTopLeft()       const { return Vector2D(getLeftX(),     getTopY());     }
    Vector2D getBottomRight()   const { return Vector2D(getRightX(),    getBottomY());  }
    Vector2D getBottomLeft()    const { return Vector2D(getLeftX(),     getBottomY());  }

    float getRightX() const { return mPosition.getX() + mBounds.getX(); }
    float getLeftX() const { return mPosition.getX() - mBounds.getX(); }
    float getTopY() const { return mPosition.getY() - mBounds.getY(); }
    float getBottomY() const { return mPosition.getY() + mBounds.getY(); }

private:

    // You will need someway to keep track of the bounds on the collider 
    // This can work or you could store these in a Bounds stuct/class or just store the center and the size 
    // That is all up to you 
    Vector2D mBounds;
};
