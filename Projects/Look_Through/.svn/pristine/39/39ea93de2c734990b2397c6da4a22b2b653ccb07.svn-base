#include "UnitManager.h"

UnitManager::UnitManager()
{

}

void UnitManager::cleanup()
{

	//for (vector<Unit* >::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)//why is the ++ on the left side
	//{
	//	Unit* Unit = *iter;
	//	delete Unit;
	//}

	for (int i = 0; i < mpUnits.size(); i++)
	{
		Unit* pUnit = mpUnits[i];
		delete pUnit;
	}

	mpUnits.clear();
}

//add unit
void UnitManager::createAndAddUnit(Animation smurfAnimation, Animation deanAnimation)
{

	Unit* pUnit = new Unit(smurfAnimation, deanAnimation);//send animations to unit to create animation 

	mpUnits.push_back(pUnit);//store unit in Unit Manager
}

//void UnitManager::setUnit(int opt)
//{
//
//}

//UpdateAll: call update on all units
void UnitManager::update(double dt)//call Unit update(dt)
{
	//loop until iter reaches end
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->update(dt);
	}
}


//draw each individual unit on the screen
void UnitManager::draw(GraphicsSystem* graphicsSystem) //call Unit draw
{
	//loop through all units 
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->draw(graphicsSystem);
	}
}

//delete on right click
void UnitManager::deleteUnitOnClick(Vector2D pos)
{
	//Loop until unit that matches mouse postion is found and deleted
	for (int i = 0; i < mpUnits.size(); i++)
	{
		Unit* pUnit = mpUnits[i];

		Vector2D pixels = pUnit->mLocation;//the pixel center location of the sprite 
		
		//min and max positions of smurf sprite
		float Xmin = pixels.getX() - SMURF_HALF_PIXELS;
		float Xmax = pixels.getX() + SMURF_HALF_PIXELS;
		float Ymin = pixels.getY() - SMURF_HALF_PIXELS;
		float Ymax = pixels.getY() + SMURF_HALF_PIXELS;

		//compare mouse position to bounds of sprite X position
		if (Xmin < pos.getX() && pos.getX() < Xmax)
		{
			//compare mouse position to bounds of sprite Y position
			if (Ymin < pos.getY() && pos.getY() < Ymax)
			{
				destroyUnit(pUnit);
				break;
			}		
		}
	}
}

//delete unit
void UnitManager::destroyUnit(Unit* pUnitDestroying)
{
	for (int i = 0; i < mpUnits.size(); i++)
	{
		Unit* pUnit = mpUnits[i];

		if (pUnit == pUnitDestroying)
		{
			delete pUnit;
			mpUnits.erase(mpUnits.begin() + i);
			break;
		}
	}
}

void UnitManager::pauseAllUnits()
{
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->unitPause();
	}
}

//get a particular unit
Unit* UnitManager::getUnit()//take in key name
{
	if (mpUnits.size() > 0)
	{
		return mpUnits[(mpUnits.size()-1)];
	}
	else
	{
		return nullptr;
	}
}



