#pragma once

#include <Trackable.h>
#include <Vector2D.h>
#include <allegro5/allegro.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>
#include "GraphicsBuffer.h"
#include "Sprite.h"
#include "Font.h"
#include "Color.h"

enum class TextAlignment
{
    LEFT = ALLEGRO_ALIGN_LEFT,
    RIGHT = ALLEGRO_ALIGN_RIGHT,
    CENTER = ALLEGRO_ALIGN_CENTER,
};

class GraphicsSystem : public Trackable
{
    friend class InputSystem;

public:
    /* Constuctors */ 
    GraphicsSystem(int width, int height);

    GraphicsSystem() = delete;
    GraphicsSystem(const GraphicsSystem& other);

    ~GraphicsSystem();

    /* Accessors */
    GraphicsBuffer* getBackBuffer() const { return mpBackBuffer; };
    int getWidth() const { return mWidth; }
    int getHeight() const { return mHeight; }
    bool isInitted() const { return mIsInitted; }

    /* Memeber Functions */
    void resizeDisplay(int width, int height);

    void flip() const;

    static void draw(const Vector2D& loc, const Sprite& sprite, float scale = 1.0f);
    static void draw(const GraphicsBuffer& buffer, const Vector2D& loc, const Sprite& sprite, float scale = 1.0f);
    static void drawText(const Vector2D& loc, const Font& font, const Color& color, const TextAlignment alignment, const std::string& text);
    static void drawText(const GraphicsBuffer& buffer, const Vector2D& loc, const Font& font, const Color& color, const TextAlignment alignment, const std::string& text);
    static void clearToColor(const Color& color);
    static void clearToColor(const GraphicsBuffer& buffer, const Color& color);
    static void saveBuffer(const GraphicsBuffer& bufferToSave, const std::string& path);

    void init();
    void cleanUp();

private:
    ALLEGRO_DISPLAY* getDisplay() { return mpDisplay; }

    ALLEGRO_DISPLAY* mpDisplay;
    GraphicsBuffer* mpBackBuffer;
    int mWidth;
    int mHeight;

    bool mIsInitted = false;
};
