#pragma once

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>

#include "Sprite.h"

const int NUM_FRAMES = 16;
const float DEFAULT_TIMER = 0.001;

class Animation : public Trackable
{
public:
	Animation();
	Animation(Animation* copy);
	Animation(GraphicsBuffer* pBuffer, bool loop);
	Animation(GraphicsBuffer* pBuffer);
	
	Animation(GraphicsBuffer* pBuffer, int width, int height);
	~Animation();
	void cleanUp();

	void Update(double dt);
	void changeTimer(float timerChange);

	void slice(GraphicsBuffer* pBuffer, int count);
	void specificSlice(GraphicsBuffer* pBuffer, int width, int height);
	Sprite* getCurrentSprite() {return mpSprites[mCurrentSprite]; };
	float getTime() { return mTimer; };
private:
	std::vector<Sprite*> mpSprites;
	float mTimer;
	float mCurrentTime;
	int mCurrentSprite;
	int mNumSprites;
	bool mShouldLoop;
};
