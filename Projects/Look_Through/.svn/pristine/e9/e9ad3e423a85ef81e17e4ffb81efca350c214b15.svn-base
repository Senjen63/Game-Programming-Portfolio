#include "Animation.h"

#include "Sprite.h"
#include "GraphicsBuffer.h"


Animation::Animation(GraphicsBuffer* sprites, int sheetWidth, int sheetHeight, int spriteWidth, int spriteHeight, int startingRow, float frameRate, bool doesLoop)
{
	int frameCount = -1;

	for (int i = startingRow; i < sheetHeight + startingRow; i++)
	{
		for (int j = 0; j < sheetWidth; j++)
		{
			Vector2D spriteLocation = Vector2D(j * spriteWidth, i * spriteHeight);
			mvpAnimSprites.push_back(Sprite(sprites, spriteLocation, spriteWidth, spriteHeight));
			frameCount++;
		}
	}

	mNumFrames = frameCount;

	if (frameRate == 0)
	{
		mIsPaused = true;		
	}
	else
	{
		mTimePerFrameinMS = (1.0 / (double)frameRate) * 1000;
	}	

	mDoesLoop = doesLoop;
}
Animation::~Animation()
{
	mvpAnimSprites.erase(mvpAnimSprites.begin(), mvpAnimSprites.end());
}

void Animation::update(double dt)
{
	if (!mIsPaused)
	{
		mTimeRemaing -= dt;

		if (mTimeRemaing < 0)
		{
			mCurrentFrame++;
			mTimeRemaing = mTimePerFrameinMS;

			// End of animiation checks
			if (mCurrentFrame > mNumFrames)
			{
				if (mDoesLoop)
				{
					mCurrentFrame = 0;
				}
				else
				{
					mCurrentFrame = mNumFrames;
				}
			}
		}
	}
}

Sprite* Animation::getCurrentSprite()
{
	return &mvpAnimSprites[mCurrentFrame];
}
void Animation::speedUp()
{  
	mTimePerFrameinMS -= mSpeedFactor;
}
void Animation::slowDown()
{
	mTimePerFrameinMS += mSpeedFactor;
}

void Animation::setPause(bool pause)
{
	mIsPaused = pause;
}
