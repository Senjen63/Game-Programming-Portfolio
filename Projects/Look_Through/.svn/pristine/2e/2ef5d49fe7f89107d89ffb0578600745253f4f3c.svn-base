#pragma once
#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_image.h>

#include <iostream>
#include <cassert>
#include <string>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>

#include "GraphicsBuffer.h"
#include "Sprite.h"
#include "Font.h"
#include "Color.h"

using namespace std;

const int DEFAULT_DISPLAY_HEIGHT = 600;
const int DEFAULT_DISPLAY_WIDTH = 800;

const float DEFAULT_DRAW_XSCALE = 1.0;
const float DEFAULT_DRAW_YSCALE = 1.0;

class GraphicsSystem : public Trackable
{
private:
	ALLEGRO_DISPLAY* mpDisplay;
	GraphicsBuffer* mpBackBuffer;

	bool mIsActive;

	int mHeight;
	int mWidth;

public:
	GraphicsSystem();
	GraphicsSystem(int height, int width);
	~GraphicsSystem();

	bool init();
	void deinit();

	int getHeight() const;
	int getWidth() const;
	GraphicsBuffer* getBackBuffer() const;

	void flip();

	void draw(Vector2D position, Sprite* pSource, double xScale = DEFAULT_DRAW_XSCALE, double yScale = DEFAULT_DRAW_YSCALE);
	void draw(Vector2D position, GraphicsBuffer* pSource, double xScale = DEFAULT_DRAW_XSCALE, double yScale = DEFAULT_DRAW_YSCALE);
	void draw(GraphicsBuffer* pTarget, Vector2D position, Sprite* pSource, double xScale = DEFAULT_DRAW_XSCALE, double yScale = DEFAULT_DRAW_YSCALE);
	void draw(GraphicsBuffer* pTarget, Vector2D position, GraphicsBuffer* pSource, double xScale = DEFAULT_DRAW_XSCALE, double yScale = DEFAULT_DRAW_YSCALE);

	void writeText(Vector2D position, Font* pFont, const Color& color, const string& text);
	void writeText(GraphicsBuffer* pTarget, Vector2D position, Font* pFont, const Color& color, const string& text);

	void saveBuffer(const string& filename);
	void saveBuffer(GraphicsBuffer* pBuffer, const string& filename);
};
