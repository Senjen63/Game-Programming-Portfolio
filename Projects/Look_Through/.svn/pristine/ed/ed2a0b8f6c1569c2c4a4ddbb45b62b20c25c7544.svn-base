/*
Author: David Silverman
Class: GPR-250-01
Assignment: Assignment 2
Certification of Authenticity:
I certify that this assignment is entirely my own work.
 */

#pragma once
#include <string>
#include "graphicsbuffer.h"

using namespace std;

/* Pre:  Nothing
*  Post:  The graphics buffer
*  Purpose:  Return the Graphics buffer
*********************************************************/
ALLEGRO_BITMAP* GraphicsBuffer::getBuffer()
{
	return mpBuffer;
}

/* Pre:  Nothing
*  Post:  A Graphics Buffer
*  Purpose:  Creates a Graphics Buffer
*********************************************************/
GraphicsBuffer::GraphicsBuffer()
{
	mpBuffer = nullptr;
	mWidth = DEFAULT_WIDTH;
	mHeight = DEFAULT_HEIGHT;
}

/* Pre:  A Graphics Buffer
*  Post:  Nothing
*  Purpose:  Clean up after the graphics buffer
*********************************************************/
GraphicsBuffer::~GraphicsBuffer()
{
	al_destroy_bitmap(mpBuffer);
	mpBuffer = nullptr;
}

/* Pre:  A string and dimensions
*  Post:  A buffer
*  Purpose:  Create a buffer
*********************************************************/
GraphicsBuffer::GraphicsBuffer(string gBuff, int wi, int hi)
{
	mpBuffer = al_load_bitmap((ASSET_PATH + gBuff).c_str());
	assert(mpBuffer);
	mWidth = wi;
	mHeight = hi;
}

/* Pre:  A color and dimensions
*  Post:  A buffer
*  Purpose:  Create a buffer
*********************************************************/
GraphicsBuffer::GraphicsBuffer(Color col, int wi, int hi)
{
	mpBuffer = al_create_bitmap(wi, hi);
	assert(mpBuffer);
	al_set_target_bitmap(mpBuffer);
	al_clear_to_color(col.getColor());
	mWidth = wi;
	mHeight = hi;
}

/* Pre:  A height
*  Post:  Nothing
*  Purpose:  Set the Buffer's Height
*********************************************************/
void GraphicsBuffer::setHeight(int hi)
{
	mHeight = hi;
}

/* Pre:  A width
*  Post:  Nothing
*  Purpose:  Set the Buffer's Width
*********************************************************/
void GraphicsBuffer::setWidth(int wi)
{
	mWidth = wi;
}

/* Pre:  Nothing
*  Post:  A height
*  Purpose:  Return the Buffer's Height
*********************************************************/
int GraphicsBuffer::getHeight()
{
	return mHeight;
}

/* Pre:  Nothing
*  Post:  A width
*  Purpose:  Return the Buffer's Width
*********************************************************/
int GraphicsBuffer::getWidth()
{
	return mWidth;
}

/* Pre:  A graphics buffer
*  Post:  Nothing
*  Purpose:  Set the graphics buffer as another buffer
*********************************************************/
GraphicsBuffer GraphicsBuffer::operator = (GraphicsBuffer const& gra)
{
	mpBuffer = gra.mpBuffer;
	mWidth = gra.mWidth;
	mHeight = gra.mHeight;
	mIsColor = gra.mIsColor;

	return *this;
}