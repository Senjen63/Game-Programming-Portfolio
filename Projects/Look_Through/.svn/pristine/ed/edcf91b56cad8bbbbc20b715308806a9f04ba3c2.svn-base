#include "Game.h"

//Game* gpGame = nullptr;
Game* Game::mpGameInst = NULL;

Game::Game(int width, int height)
{
	mpGameInst;
	mpEventSystem = nullptr;
	mpInput = nullptr;
	mpFont = nullptr;

	// initialize the member GraphicsSystem object
	mpGraphics = new GraphicsSystem;
	assert(mpGraphics);
	mpGraphics->init(width, height);
}

Game::Game()
{
	//mpGameInst = NULL;
	mpEventSystem = nullptr;
	mpInput = nullptr;
	mpFont = nullptr;

	// initialize the member GraphicsSystem object
	mpGraphics = new GraphicsSystem;
	assert(mpGraphics);
	mpGraphics->init(DISP_WIDTH, DISP_HEIGHT);

}

Game::~Game()
{
	cleanup();
}

void Game::cleanup()
{
	// clean up the program
	//delete mpUnit;

	//delete mpUnitManager;
	//delete mpgBufferManager;
	delete mpGraphics;
	delete mpInput;
	delete mpFont;

	//mpUnitManager = nullptr;
	//mpgBufferManager = nullptr;
	mpInput = nullptr;
	mpGraphics = nullptr;
	mpFont = nullptr;

	mpEventSystem->cleanup();
}

Game* Game::getInstance()
{
	assert(mpGameInst != nullptr);
	return mpGameInst;
}

void Game::createInstance() 
{ 
	if (mpGameInst == NULL)
	{
		mpGameInst = new Game;
	}
}

void Game::destroyInstance() 
{ 
	delete mpGameInst;
	mpGameInst = NULL;
}

void Game::init()
{
	mpFont = new Font(ASSET_PATH + FONT, 20);

	//create Background_1
	mpgBufferManager.createAndManageGraphicsBuffers(BG_1, (ASSET_PATH_PICTURES + BACKGROUND_1_FILENAME).c_str());

	//Create Wall Buffer
	mpgBufferManager.createAndManageGraphicsBuffers(WALL, (ASSET_PATH_PICTURES + WALL_FILENAME).c_str());

	//Wall Sprite
	mWallAnimation.addSprite(mpgBufferManager.getBuffer(WALL), ORIGIN_X, ORIGIN_Y, mpgBufferManager.getBuffer(WALL)->getHeight(),
		mpgBufferManager.getBuffer(WALL)->getWidth());

	mpgBufferManager.createAndAddGraphicsBuffer(HUD, 800, 100);//Was 608 100

	//Create Snake Buffer
	mpgBufferManager.createAndManageGraphicsBuffers(SNAKE, (ASSET_PATH_PICTURES + SNAKE_FILENAME).c_str());

	// Snake Sprite
	mSnakeAnimation.addSprite(mpgBufferManager.getBuffer(SNAKE), ORIGIN_X, ORIGIN_Y, mpgBufferManager.getBuffer(SNAKE)->getHeight(),
		mpgBufferManager.getBuffer(SNAKE)->getWidth());

	//create Apple
	mpgBufferManager.createAndManageGraphicsBuffers(APPLE, (ASSET_PATH_PICTURES + APPLE_FILENAME).c_str());

	//create Speed Power
	mpgBufferManager.createAndManageGraphicsBuffers(SPEED_POWER, (ASSET_PATH_PICTURES + SPEED_FILENAME).c_str());

	//create Slow Power
	mpgBufferManager.createAndManageGraphicsBuffers(SLOW_POWER, (ASSET_PATH_PICTURES + SLOW_FILENAME).c_str());

	////Apple Animation
	mAppleAnimation.addAnimatedSprite(mpgBufferManager.getBuffer(APPLE), ORIGIN_X, ORIGIN_Y, mpgBufferManager.getBuffer(APPLE)->getHeight(),
		mpgBufferManager.getBuffer(APPLE)->getWidth());

	mAppleAnimation.addAnimatedSprite(mpgBufferManager.getBuffer(APPLE), ORIGIN_X, ORIGIN_Y, mpgBufferManager.getBuffer(APPLE)->getHeight(),
		mpgBufferManager.getBuffer(APPLE)->getWidth());

	PowerUp1Animation.addAnimatedSprite(mpgBufferManager.getBuffer(SPEED_POWER), ORIGIN_X, ORIGIN_Y, mpgBufferManager.getBuffer(SPEED_POWER)->getHeight(),
		mpgBufferManager.getBuffer(SPEED_POWER)->getWidth());

	PowerUp2Animation.addAnimatedSprite(mpgBufferManager.getBuffer(SLOW_POWER), ORIGIN_X, ORIGIN_Y, mpgBufferManager.getBuffer(SLOW_POWER)->getHeight(),
		mpgBufferManager.getBuffer(SLOW_POWER)->getWidth());

	// initialize the member InputSystem object
	mpInput = new InputSystem;
	assert(mpInput);

	mpEventSystem = EventSystem::getInstance();
	mpEventSystem->init();

	mpEventSystem->getInstance()->addListener((EventType)INPUT_EVENT, this);
	mpEventSystem->getInstance()->addListener((EventType)GAMEPLAY_EVENT, this);
}

void Game::doLoop()
{
	Color white(255, 255, 255, 255);
	Color black(0, 0, 0, 255);

	//fps
	double normalFPS = 60;
	double targetTime = 1000.0 / normalFPS;
	double HUD_FPS = 0;

	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;
	Timer loopTimer;
	Timer elapsedTime;
	elapsedTime.start();

	mpHUD = new HUDClass(mpFont);

	mSnakeUnitManager.createAndAddSnakeUnit(mSnakeAnimation);
	mUnitManagerApple.createAndAddUnit(mAppleAnimation);
	mUnitManagerPowerUp1.createAndAddUnit(PowerUp1Animation);
	mUnitManagerPowerUp2.createAndAddUnit(PowerUp2Animation);

	/*level1 = true;*/

	while (shouldContinue)
	{
		//SWITCH LEVELS
		//**********************************************************
		if (run1)
		{
			mLevelManager.createLevel1(mpGraphics, mpgBufferManager, WALL, mLevelUnitManager, mWallAnimation, ORIGIN_X, ORIGIN_Y);
			run1 = false;
			currentLevel = 0;
		}
		if (run2)
		{
			mLevelManager.createLevel2(mpGraphics, mpgBufferManager, WALL, mLevelUnitManager, mWallAnimation, ORIGIN_X, ORIGIN_Y);
			run2 = false;	
		}
		if (run3)
		{
			mLevelManager.createLevel3(mpGraphics, mpgBufferManager, WALL, mLevelUnitManager, mWallAnimation, ORIGIN_X, ORIGIN_Y);
			run3 = false;
		}
		//*******************************************************************
		
		//INPUT Event System Call
		mpInput->getKeyEvent();

		std::string currentAnimation = "smurf";

		pPerformanceTracker->clearTracker("loop");
		pPerformanceTracker->startTracking("loop");

		loopTimer.start();

		// update the input system during every loop
		mpInput->update();

		//UPDATE
		mUnitManagerApple.update(targetTime);//animates unit
		mUnitManagerPowerUp1.update(targetTime);//animates unit
		mUnitManagerPowerUp2.update(targetTime);
	
	//Game
	//*************************
		//background
		mpGraphics->draw(mpgBufferManager.getBuffer(BG_1), ORIGIN_X, ORIGIN_Y, DISP_WIDTH, DISP_HEIGHT);

		if (startScreen && !Lost)
		{
			mpGraphics->writeText(400, 300, mpFont, black, "Press space to Begin");
		}
		else if (Lost)
		{
			mLevelManager.setScore(0);

			appear = false;
			powerShow = false;
			powerShow2 = false;

			if (mUnitManagerApple.getSize() > 0)
			{
				mUnitManagerApple.cleanup();
			}
			if (mUnitManagerPowerUp1.getSize() > 0)
			{
				mUnitManagerPowerUp1.cleanup();
			}
			if (mUnitManagerPowerUp2.getSize() > 0)
			{
				mUnitManagerPowerUp2.cleanup();
			}
			
			//Clean Up Level
			mLevelUnitManager.cleanup();
			
			mSnakeUnitManager.cleanup();
			mpGraphics->writeText(400, 300, mpFont, black, "You Lost Press space to Begin");
		}
		else if (startNewLevel)
		{
			appear = false;
			powerShow = false;
			powerShow2 = false;

			if (mUnitManagerApple.getSize() > 0)
			{
				mUnitManagerApple.cleanup();
			}
			if (mUnitManagerPowerUp1.getSize() > 0)
			{
				mUnitManagerPowerUp1.cleanup();
			}
			if (mUnitManagerPowerUp2.getSize() > 0)
			{
				mUnitManagerPowerUp2.cleanup();
			}

			//Clean Up Level
			if (mLevelUnitManager.getSize() > 0)
			{
				mLevelUnitManager.cleanup();
			}
			
			if (mSnakeUnitManager.getSize() > 0)
			{
				mSnakeUnitManager.cleanup();
			}

			if (currentLevel == 3)
			{
				mpGraphics->writeText(400, 300, mpFont, black, "You Won! Press Space to Replay");
			}
			else
			{
				mpGraphics->writeText(400, 300, mpFont, black, "Press Space to begin Next Level");
			}
		}
		else
		{
			mpHUD->timeAndFPSText(mpGraphics, mpgBufferManager.getBuffer(HUD), elapsedTime.getElapsedTime() / 1000, HUD_FPS * 3.6);
			mpHUD->scoreText(mpGraphics, mpgBufferManager.getBuffer(HUD), mLevelManager.getScore());

			//SNAKE
			//*******************************************************************************
			if (mSnakeUnitManager.getSize() == 0)
			{
				Vector2D location = Vector2D(300, 300);
				mSnakeUnitManager.createAndAddSnakeUnit(mSnakeAnimation);
				mSnakeUnitManager.getUnit(0)->setLocation(location);
			}

			mSnake.snakeMovementManager(mSnakeUnitManager, Up, Down, Right, Left, targetTime);

			mSnakeUnitManager.draw(mpGraphics);//draw the Snake
			//*******************************************************************************
			
			//LEVEL
			//*******************************************************************************
			mLevelUnitManager.draw(mpGraphics);
			
			//COLLECTIBLES
			//***************************************************
			if (mUnitManagerApple.getSize() == 0)
			{
				mUnitManagerApple.createAndAddUnit(mAppleAnimation);
				appear = false;
			}
			if (mUnitManagerPowerUp1.getSize() == 0)
			{
				mUnitManagerPowerUp1.createAndAddUnit(PowerUp1Animation);
				powerShow = false;
			}
			if (mUnitManagerPowerUp2.getSize() == 0)
			{
				mUnitManagerPowerUp2.createAndAddUnit(PowerUp2Animation);
				powerShow2 = false;
			}
			//****************************************************
			
			//Apple
			mLevelManager.RandomPlacement(mpGraphics, mpgBufferManager, WALL, mUnitManagerApple, ORIGIN_X, ORIGIN_Y, appear, currentLevel);
			appear = true;

			//Speed
			mLevelManager.RandomPlacement(mpGraphics, mpgBufferManager, WALL, mUnitManagerPowerUp1, ORIGIN_X, ORIGIN_Y, powerShow, currentLevel);
			powerShow = true;

			//Slow
			mLevelManager.RandomPlacement(mpGraphics, mpgBufferManager, WALL, mUnitManagerPowerUp2, ORIGIN_X, ORIGIN_Y, powerShow2, currentLevel);
			powerShow2 = true;
			//*******************************************************************************	

			//COLLSION
			//*******************************************************************************
			if (mSnakeUnitManager.snakeCollisionWithSelf())
			{
				Lost = true;
			}
			
			Vector2D headLoc = mSnakeUnitManager.getUnit(0)->getLocation();

			//Collision with wall
			for (int i = 0; i < mLevelUnitManager.getSize(); i++)
			{
				Vector2D wall = mLevelUnitManager.getUnit(i)->getLocation();
				float dist = headLoc.getDistanceBetween(headLoc, wall);

				if (dist < 32)
				{
					Lost = true;
				}
			}

			//Snake Collision with Apple
			for (int i = 0; i < mUnitManagerApple.getSize(); i++)
			{
				Vector2D apple = mUnitManagerApple.getUnit(i)->getLocation();
				float dist = headLoc.getDistanceBetween(headLoc, apple);

				if (dist < 32)
				{
					mSnakeUnitManager.createAndAddSnakeUnit(mSnakeAnimation);
					mUnitManagerApple.cleanup();

					if (mLevelManager.Score(currentLevel))
					{
						mLevelManager.setScore(0);
						startNewLevel = true;
						currentLevel += 1;//change curretn level
						cout << "Current Level:" << currentLevel << endl;
					}
				}
			}

			//Snake Collision with Speed PowerUp
			for (int i = 0; i < mUnitManagerPowerUp1.getSize(); i++)
			{
				Vector2D apple = mUnitManagerPowerUp1.getUnit(i)->getLocation();
				float dist = headLoc.getDistanceBetween(headLoc, apple);

				if (dist < 32)
				{
					mUnitManagerPowerUp1.cleanup();
					mSnakeUnitManager.speedUp();
				}
			}

			//Snake Collision with Slow PowerUp
			for (int i = 0; i < mUnitManagerPowerUp2.getSize(); i++)
			{
				Vector2D apple = mUnitManagerPowerUp2.getUnit(i)->getLocation();
				float dist = headLoc.getDistanceBetween(headLoc, apple);

				if (dist < 32)
				{
					mUnitManagerPowerUp2.cleanup();
					mSnakeUnitManager.normalSpeed();
				}
			}
			//********************************************************************************
		}
	
		//flip the front and back buffer 
		//this steps allows everything to apear on screen
		mpGraphics->flip();
		
		loopTimer.sleepUntilElapsed(targetTime);
		pPerformanceTracker->stopTracking("loop");
		HUD_FPS = pPerformanceTracker->getElapsedTime("loop");
		/*std::cout << pPerformanceTracker->getElapsedTime("loop") << std::endl;
		cout << targetTime << endl;*/
	}
	delete pPerformanceTracker;
}

//HANDLER
void Game::handleEvent(const Event& event)
{
	if (event.getType() == MOVE_EVENT)
	{

	}

	if (event.getType() == INPUT_EVENT)
	{
		const InputEvent& inputEvent = static_cast<const InputEvent&>(event);

		if (inputEvent.getKeyCode() == (int)MyKeyCode::SPACE)
		{
			Right = true;
			Up = false;
			Down = false;
			Left = false;

			startScreen = false;

			//LOSE STATE RESET TO CURRENT LEVEL
			if (Lost)
			{
				Lost = false;

				//level 2
				if (!run2 && currentLevel == 1)
				{
					run1 = false;
					run2 = true;
				}

				//level3
				if (!run3 && currentLevel == 2)
				{
					run2 = false;
					run3 = true;
				}

				//restart
				if (run3 && currentLevel == 3)
				{
					run3 = false;
					run1 = true;
				}
			}

			//NEW LEVEL 
			if (startNewLevel)
			{
				startNewLevel = false;

				//level 2
				if (!run2 && currentLevel == 1)
				{
					run1 = false;
					run2 = true;
				}

				//level3
				if (!run3 && currentLevel == 2)
				{
					run2 = false;
					run3 = true;
				}

				//restart
				if (run3 && currentLevel == 3)
				{
					run3 = false;
					run1 = true;
				}
			}

			//First call when nothing exists
			if (!startScreen && !run1 && !run2 && !run3)
			{
				run1 = true;
			}
		}

		if (inputEvent.getKeyCode() == (int)MyKeyCode::ESC_KEY)
		{
			shouldContinue = false;
		}
		
		if (inputEvent.getKeyCode() == (int)MyKeyCode::LEFT_ARROW)
		{
			if (Right) {}
			else
			{
				Up = false;
				Down = false;
				Right = false;
				Left = true;
			}
		}
		if (inputEvent.getKeyCode() == (int)MyKeyCode::RIGHT_ARROW)
		{
			if (Left) {}
			else
			{
				Up = false;
				Down = false;
				Right = true;
				Left = false;
			}
		}
		if (inputEvent.getKeyCode() == (int)MyKeyCode::UP_ARROW)
		{
			if (Down) {}
			else
			{
				Up = true;
				Down = false;
				Right = false;
				Left = false;
			}
		}
		if (inputEvent.getKeyCode() == (int)MyKeyCode::DOWN_ARROW)
		{
			if (Up) {}
			else
			{
				Up = false;
				Down = true;
				Right = false;
				Left = false;
			}
		}
	}
}