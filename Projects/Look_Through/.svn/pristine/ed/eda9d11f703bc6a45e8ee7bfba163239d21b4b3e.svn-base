#include "InputSystem.h"

InputSystem::InputSystem()
{
	mpQueue = nullptr;
	memset( mKeys, 0, sizeof( mKeys ) );
}

InputSystem::~InputSystem()
{
	mpQueue = nullptr;
}

void InputSystem::init()
{
	assert( al_install_keyboard() );
	assert( al_install_mouse() );

	mpQueue = al_create_event_queue();
	assert( mpQueue );

	al_register_event_source( mpQueue, al_get_keyboard_event_source() );
	al_register_event_source( mpQueue, al_get_mouse_event_source() );
}

void InputSystem::cleanup()
{
	al_destroy_event_queue( mpQueue );
	mpQueue = nullptr;
}

void InputSystem::pollInputs()
{
	while( al_get_next_event( mpQueue, &mEvent ) )
	{
		switch( mEvent.type )
		{
			case ALLEGRO_EVENT_KEY_DOWN:
				mKeys[ mEvent.keyboard.keycode ] = (unsigned char) KeyState::PRESSED;
				break;
			case ALLEGRO_EVENT_KEY_UP:
				mKeys[ mEvent.keyboard.keycode ] = (unsigned char) KeyState::RELEASED;
				break;
			case ALLEGRO_EVENT_MOUSE_AXES:
				mMouseState.mMousePosition.setX( mEvent.mouse.x );
				mMouseState.mMousePosition.setY( mEvent.mouse.y );
				break;
			case ALLEGRO_EVENT_MOUSE_BUTTON_DOWN:
				mMouseState.mClicking = true;
				break;
		}
	}
}

KeyState InputSystem::getKeyState( Key key )
{
	if( mKeys[ (int) key ] )
	{
		mKeys[ (int) key ] = (unsigned char) KeyState::RELEASED;
		return KeyState::PRESSED;
	}
	return KeyState::RELEASED;
}

MouseState InputSystem::getMouseState()
{
	MouseState mouse( mMouseState );
	mMouseState.mClicking = false;
	return mouse;
}
