#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

#include <iostream>
#include <cassert>
#include <string>

#include "GraphicsSystem.h"
#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>
#include <time.h>

using namespace std;

int main()
{
	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;

	if (!al_install_audio())
	{
		cout << "error - Audio Add-on not initted\n";
		system("pause");
		//return 1;
	}
	if (!al_init_acodec_addon())
	{
		cout << "error - Audio Codec Add-on not initted\n";
		system("pause");
		//return 1;
	}
	if (!al_reserve_samples(1))
	{
		cout << "error - samples not reserved\n";
		system("pause");
		//return 1;
	}


	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;
	const int SMURF_SPACE = 4;
	int SQUARE_WIDTH = 400;
	int SQUARE_HEIGHT = 300;

	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string BACKGROUND_FILENAME = "axamer-lizum.png";
	const string GARGAMEL_MESSAGE = "CURSE YOU PAPA SMURF!!!!!!!!";
	const string SMURF_FILENAME = "smurf_sprites.png";
	const string QUIMBY_FILENAME = "mayor_quimby.png";
	const string FONT_FILENAME = "cour.ttf";
	const int FONT_SIZE = 24;
	const string SAMPLE_FILENAME = "clapping.wav";
	const string CAPTURE_ONE_FILE = "fullcapture.png";
	const string CAPTURE_TWO_FILE = "justredcapture.png";
	const double SLEEP_TIME = 5.0;

	//Create graphics system
	GraphicsSystem* display = nullptr;

	if (display->init())
	{
		display = new GraphicsSystem(DISP_HEIGHT, DISP_WIDTH);

		//Create font
		Font smurfFont = Font(FONT_SIZE, (ASSET_PATH + FONT_FILENAME));
		Color myTextColor = Color(255, 255, 255);

		//Create background
		GraphicsBuffer* background = new GraphicsBuffer((ASSET_PATH + BACKGROUND_FILENAME));
		Sprite backSprite = Sprite(background);

		//Red square
		Color myRed = Color(255, 0, 0);
		GraphicsBuffer* redSquare = new GraphicsBuffer(SQUARE_HEIGHT, SQUARE_WIDTH, myRed);
		Sprite redSquareSprite = Sprite(redSquare);

		//Quimby
		GraphicsBuffer* quimbyBuff = new GraphicsBuffer((ASSET_PATH + QUIMBY_FILENAME));
		Sprite quimby = Sprite(quimbyBuff);

		//Create Smurfs
		GraphicsBuffer* smurfBuff = new GraphicsBuffer((ASSET_PATH + SMURF_FILENAME));

		display->Draw(redSquare, Vector2D(105, 50),quimby, 1.0f);
		display->WriteText(Vector2D(100, 100), smurfFont, myTextColor, GARGAMEL_MESSAGE);
		display->Draw(background, Vector2D(0, 0), backSprite, 1.0f);
		display->Draw(redSquare, Vector2D(400, 300), redSquareSprite, 1.0f);

		//Random smurf placement
		for (int i = 0; i < SMURF_SPACE; i++)
		{
			for (int j = 0; j < SMURF_SPACE; i++)
			{
				int randomH = rand() % display->getDisplayWidth();
				int randomV = rand() % display->getDisplayHeight();
				Sprite smurf = Sprite(smurfBuff);
				display->Draw(Vector2D(randomH, randomV), smurf, 1.0f);
			}
		}

		display->SaveBuffer(display->getBackBuffer(), CAPTURE_ONE_FILE);
		display->SaveBuffer(redSquare, CAPTURE_TWO_FILE);

		//Wait a bit
		display->flip();
		Timer time;
		time.sleep(5000.0);

		//Clear up
		delete redSquare;
		delete smurfBuff;
		delete quimbyBuff;
		delete background;
		delete display;
	}
	display = nullptr;

	delete pPerformanceTracker;
	MemoryTracker::getInstance()->reportAllocations(cout);

	system("pause");
	return 0;
}