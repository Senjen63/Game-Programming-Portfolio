#include "UnitManager.h"

UnitManager::UnitManager()
{

}

void UnitManager::cleanup()
{
	for (int i = 0; i < mpUnits.size(); i++)
	{
		Unit* pUnit = mpUnits[i];
		delete pUnit;
	}

	mpUnits.clear();
}

//add unit
void UnitManager::createAndAddUnit(Animation aniSprite)
{

	Unit* pUnit = new Unit(aniSprite);//send animations to unit to create animation 

	mpUnits.push_back(pUnit);//store unit in Unit Manager
}

void UnitManager::createAndAddUnit(Animation aniSprite, Vector2D location)
{

	Unit* pUnit = new Unit(aniSprite);//send animations to unit to create animation 
	pUnit->setLocation(location);
	mpUnits.push_back(pUnit);//store unit in Unit Manager
}

//UpdateAll: call update on all units
void UnitManager::update(double dt)//call Unit update(dt)
{
	//loop until iter reaches end
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->update(dt);
	}
}

//draw each individual unit on the screen
void UnitManager::draw(GraphicsSystem* graphicsSystem) //call Unit draw
{
	//loop through all units 
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->draw(graphicsSystem);
	}
}

void UnitManager::setLocation(Vector2D location)
{
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->setLocation(location);
	}
}

//delete on right click
void UnitManager::deleteUnitOnClick(Vector2D pos)
{
	//Loop until unit that matches mouse postion is found and deleted
	for (int i = 0; i < mpUnits.size(); i++)
	{
		Unit* pUnit = mpUnits[i];

		Vector2D pixels = pUnit->mLocation;//the pixel center location of the sprite 
		
		//min and max positions of smurf sprite
		float Xmin = pixels.getX() - SMURF_HALF_PIXELS;
		float Xmax = pixels.getX() + SMURF_HALF_PIXELS;
		float Ymin = pixels.getY() - SMURF_HALF_PIXELS;
		float Ymax = pixels.getY() + SMURF_HALF_PIXELS;

		//compare mouse position to bounds of sprite X position
		if (Xmin < pos.getX() && pos.getX() < Xmax)
		{
			//compare mouse position to bounds of sprite Y position
			if (Ymin < pos.getY() && pos.getY() < Ymax)
			{
				destroyUnit(pUnit);
				break;
			}		
		}
	}
}

//delete unit
void UnitManager::destroyUnit(Unit* pUnitDestroying)
{
	for (int i = 0; i < mpUnits.size(); i++)
	{
		Unit* pUnit = mpUnits[i];

		if (pUnit == pUnitDestroying)
		{
			delete pUnit;
			mpUnits.erase(mpUnits.begin() + i);
			break;
		}
	}
}

void UnitManager::pauseAllUnits()
{
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->unitPause();
	}
}

//get a particular unit
Unit* UnitManager::getUnit(int index)//take in key name
{
	if (UnitManager::mpUnits.size() > 0)
	{
		return mpUnits[index];
	}
	else
	{
		return nullptr;
	}
}

//****************************************************************************
void UnitManager::SnakeMovement(int direction)
{
	for (int i = 0; i < mpUnits.size(); i++)
	{
		Unit* pUnit = mpUnits[i];

		switch (direction)
		{
		case 1: 
			pUnit->Up(); 
			break;
		case 2: 
			pUnit->Down();
			break;
		case 3:
			pUnit->Right(); 
			break;
		case 4: 
			pUnit->Left(); 
			break;
		}
	}
}

int UnitManager::getSize()
{
	int size = mpUnits.size();
	return size;
}