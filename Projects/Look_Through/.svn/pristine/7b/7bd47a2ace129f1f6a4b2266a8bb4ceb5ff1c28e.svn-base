#include "GraphicsBuffer.h"


GraphicsBuffer::GraphicsBuffer(std::string fullPath)
{
	mOwnsBitmap = true;
	mpBitmap = new sf::RenderTexture();

	sf::Texture t = sf::Texture();
	t.loadFromFile(fullPath);
	sf::Sprite s = sf::Sprite(t);

	Vector2D size = Vector2D((int) t.getSize().x, (int) t.getSize().y);

	mpBitmap->create(size.getX(), size.getY());
	mpBitmap->draw(s);
	mpBitmap->display();
}


GraphicsBuffer::GraphicsBuffer(Vector2D size)
{
	mOwnsBitmap = true;
	mpBitmap = new sf::RenderTexture();
	
	if (!mpBitmap->create(size.getX(), size.getY()))
	{
		throw "Error creating mpBitmap";
	}

	mpBitmap->display();
}


GraphicsBuffer::GraphicsBuffer(Vector2D size, Color color) : GraphicsBuffer::GraphicsBuffer(size)
{
	sf::Color sfCol = sf::Color(color.r, color.g, color.b, color.a);

	sf::VertexArray dimensionData = sf::VertexArray(sf::Quads, 4);
	dimensionData[0].position = sf::Vector2f(0, 0);
	dimensionData[1].position = sf::Vector2f(size.getX(), 0);
	dimensionData[2].position = sf::Vector2f(size.getX(), size.getY());
	dimensionData[3].position = sf::Vector2f(0, size.getY());

	dimensionData[0].color = sfCol;
	dimensionData[1].color = sfCol;
	dimensionData[2].color = sfCol;
	dimensionData[3].color = sfCol;

	//mpBitmap->clear(sf::Color(color.r, color.g, color.b, color.a));
	mpBitmap->draw(dimensionData);
	mpBitmap->display();
}


GraphicsBuffer::GraphicsBuffer(const GraphicsBuffer* og)
{
	mOwnsBitmap = false;
	mpBitmap = og->getBitmap();
}


GraphicsBuffer::GraphicsBuffer(sf::RenderTexture* pBitmap)
{
	mOwnsBitmap = false;
	mpBitmap = pBitmap;
}


GraphicsBuffer::~GraphicsBuffer()
{
	if (mOwnsBitmap && mpBitmap)
	{
		delete mpBitmap;
	}
}
