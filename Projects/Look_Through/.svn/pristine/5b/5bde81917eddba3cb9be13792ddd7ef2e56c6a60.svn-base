#include "GraphicsSystem.h"
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

GraphicsSystem::GraphicsSystem(int width, int height)
{
	mpDisplay = nullptr;
	mWidth = width;
	mHeight = height;
}

GraphicsSystem::~GraphicsSystem()
{
	cleanup();
}

ALLEGRO_BITMAP* GraphicsSystem::getBackBuffer()
{
	return al_get_backbuffer(mpDisplay);
}

int GraphicsSystem::init()
{
	if (!al_init())
	{
		cout << "error initting Allegro\n";
		system("pause");
		return 1;
	}
	if (!al_init_image_addon())
	{
		cout << "error - Image Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_font_addon())
	{
		cout << "error - Font Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_ttf_addon())
	{
		cout << "error - TTF Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_primitives_addon())
	{
		cout << "error - primitives Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_install_audio())
	{
		cout << "error - Audio Add-on not initted\n";
		system("pause");
		//return 1;
	}
	if (!al_init_acodec_addon())
	{
		cout << "error - Audio Codec Add-on not initted\n";
		system("pause");
		//return 1;
	}
	if (!al_reserve_samples(1))
	{
		cout << "error - samples not reserved\n";
		system("pause");
		//return 1;
	}

	mpDisplay = al_create_display(mWidth, mHeight);
	assert(mpDisplay);
}

void GraphicsSystem::cleanup()
{
	//al_destroy_display(mpDisplay);
}

void GraphicsSystem::flip()
{
	al_flip_display();
}

void GraphicsSystem::draw(Vector2D destination, Vector2D source, Sprite sprite, float scale)
{
	al_draw_scaled_bitmap(sprite.getBitmap()->getBuffer(),source.getX(),source.getY(),sprite.getWidth(),sprite.getHeight(),destination.getX(),destination.getY(), sprite.getWidth() * scale, sprite.getHeight() * scale, 0);
}

void GraphicsSystem::draw(GraphicsBuffer* buffer, Vector2D destination, Vector2D location, Sprite sprite, float scale)
{
	ALLEGRO_BITMAP* oldBitmap = al_get_target_bitmap();
	al_set_target_bitmap(buffer->getBuffer());
	al_draw_scaled_bitmap(sprite.getBitmap()->getBuffer(), location.getX(), location.getY(), sprite.getWidth(), sprite.getHeight(), destination.getX(), destination.getY(), sprite.getWidth() * scale, sprite.getHeight() * scale, 0);
	al_set_target_bitmap(oldBitmap);
}

void GraphicsSystem::writeText(Vector2D location, Font font, Color color, string text)
{
	al_draw_text(font.getFont(), color.getColor(), location.getX(), location.getY(), ALLEGRO_ALIGN_LEFT, text.c_str());
}

void GraphicsSystem::writeText(GraphicsBuffer* buffer, Vector2D location, Font font, Color color, string text)
{
	ALLEGRO_BITMAP* oldBitmap = al_get_target_bitmap();
	al_set_target_bitmap(buffer->getBuffer());
	al_draw_text(font.getFont(), color.getColor(), location.getX(), location.getY(), ALLEGRO_ALIGN_LEFT, text.c_str());
	al_set_target_bitmap(oldBitmap);
}

void GraphicsSystem::saveBuffer(GraphicsBuffer* buffer, string filename)
{
	al_save_bitmap(filename.c_str(), buffer->getBuffer());
}