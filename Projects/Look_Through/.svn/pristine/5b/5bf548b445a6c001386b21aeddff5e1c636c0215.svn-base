#include "LevelManager.h"
#include <fstream>
#include <iomanip>

using namespace std;

bool LevelManager::init()
{
    mpEventSystem = EventSystem::getInstance();
    return true;
}

void LevelManager::cleanup()
{
    deleteAllLevels();
    mpEventSystem = nullptr;
}

void LevelManager::instantiateLevel(int num, UnitManager* um, AnimationManager* am, GraphicsBuffer* wall)
{

    if (num >= mLevels.size())
    {
        std::cout << "Level num error" << std::endl;
        system("pause");
        return;
    }

    Level* thisLevel = mLevels[num];

    if (um->getNumUnits() > 0)
    {
        um->removeAllUnits();
    }

    vector<Vector2D> vec = thisLevel->getWallLocations();
    const string WALL_TAG = "Wall";

    for (unsigned int i = 0; i < vec.size(); i++)
    {
        double fps = 30;
        Vector2D thisVec = vec[i];
        um->addUnit(thisVec.getX(), thisVec.getY(), 1, 1, "Wall");
        Unit* wallUnit = um->getLastUnit();
        Animation* anim = am->getAnim("wall");
        wallUnit->setAnimation(anim);
    }
}

void LevelManager::loadLevel(string path, GraphicsBuffer* wall)
{
    ifstream fin;

    if (!fin.fail() && !fin.eof())
    {
        Level* newLevel = new Level();

        fin.open(path);


        string currentLine;

        getline(fin, currentLine); 

        int yIndex = 0;

        while (currentLine != "")
        {
            //skip spaces
            for (unsigned int stringIndex = 0; stringIndex < currentLine.length(); stringIndex += 2)
            {
                //add new wall if character is 1, add new empty space if 0
                if (currentLine[stringIndex] == '1')
                {
                    int xIndex = stringIndex / 2; 
                    Vector2D newPos = Vector2D((float)xIndex * wall->getWidth(), (float)yIndex * wall->getHeight());
                    newLevel->addWallLocation(newPos);
                }
                else if (currentLine[stringIndex] == '0')
                {
                    int xIndex = stringIndex / 2;
                    Vector2D newPos = Vector2D((float)xIndex * wall->getWidth(), (float)yIndex * wall->getHeight());
                    newLevel->addEmptyLocation(newPos);
                }
            }

            getline(fin, currentLine);
            yIndex++;
        }

        mLevels.push_back(newLevel);
    }
}

void LevelManager::deleteAllLevels()
{
    for (unsigned int i = 0; i < mLevels.size(); i++)
    {
        delete mLevels[i];
    }

    mLevels.clear();
}