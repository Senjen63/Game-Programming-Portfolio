#pragma once

#include "Trackable.h"
#include "Level.h"
#include "Wall.h"
#include <vector>
#include <EventListener.h>

class LevelManager : public EventListener
{

public:
	LevelManager(int numLevels);
	~LevelManager();

	void init();
	void nextLevelCheck(int snakeSize);
	void gotoNextLevel();
	void loadLevelWalls();

	void update(float elapsedTime);
	void draw();

	int getLevelNum() { return mCurrentLevel; }
	void setLevelNum(int levelNum) { mCurrentLevel = levelNum; }
	Level* getCurrentLevel() { return mLevels[mCurrentLevel]; }
	int getNumPowerups() { return mPowerups.size(); }
	int getNumWalls() { return mWalls.size(); }
	int getNumLevels() { return mLevels.size(); }
	Wall* getWall(int i) { return mWalls[i]; }
	Powerup* getPowerup(int i) { return mPowerups[i]; }
	Powerup* getFruit() { return mCurrentFruit; }

	void setPowerupAnim(Animation* anim, int num) { mPowerupAnimations[num] = anim; }
	void setWallAnim(Animation* anim) { mWallAnimation = anim; }
	void initFruit();
	bool checkOverlap(Powerup* toCheck);

	void handleEvent(const Event& theEvent);

	const int POWERUP_TYPES = 4;
	const int BONUS_POINTS_MULT = 5;
	const std::string ASSET_PATH = "Assets\\Levels\\";
private:
	int mCurrentLevel;
	std::vector<Level*> mLevels;
	std::vector<Powerup*> mPowerups;
	std::vector<Wall*> mWalls;

	Animation* mPowerupAnimations[4];
	Animation* mWallAnimation;
	int mIDLevel;

	Powerup* mCurrentFruit;
};
