#include "FoodManager.h"

#include <vector>

FoodManager & FoodManager::getInstance()
{
    static FoodManager sFoodManager;
    return sFoodManager;
}

void FoodManager::generateFood( const int width, const int height, std::vector< Vector2D > & walls )
{
    const Vector2D foodPos( rand() % width, rand() % height );
    mFoods.push_back( foodPos );
    for(auto & wall : walls)
    {
        isTouchingFood( wall, width, height, walls );
    }
}

std::list< Vector2D > & FoodManager::getFoods()
{
    return mFoods;
}

bool FoodManager::isTouchingFood( const Vector2D & position )
{
    for ( auto pos = mFoods.begin(); pos != mFoods.end(); ++pos )
    {
        if ( position == *pos )
        {
            mFoods.remove( *pos );
            return true;
        }
    }
    return false;
}

bool FoodManager::isTouchingFood( const Vector2D & position, const int width, const int height, std::vector< Vector2D > & walls )
{
    for ( auto pos = mFoods.begin(); pos != mFoods.end(); ++pos )
    {
        if ( position == *pos )
        {
            mFoods.remove( *pos );
            generateFood( width, height, walls );
            return true;
        }
    }
    return false;
}

void FoodManager::generatePowerUp( const int width, const int height, const std::vector<Vector2D> & walls )
{
    const Vector2D powerPos( rand() % width, rand() % height );
    mPowerUps.push_back( powerPos );
    for(auto & wall : walls)
    {
        isTouchingPowerUp( wall );
    }
}

std::list< Vector2D > & FoodManager::getPowerUps()
{
    return mPowerUps;
}

bool FoodManager::isTouchingPowerUp( const Vector2D & position )
{
    for ( auto pos = mPowerUps.begin(); pos != mPowerUps.end(); ++pos )
    {
        if ( position == *pos )
        {
            mPowerUps.remove( *pos );
            return true;
        }
    }
    return false;
}

