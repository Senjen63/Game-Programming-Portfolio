#pragma once

#include <PerformanceTracker.h>
#include <Timer.h>
#include <Trackable.h>

#include "GraphicsBuffer.h"
#include "GraphicsBufferManager.h"
#include "GraphicsSystem.h"

#include "InputSystem.h"
#include "HUD.h"

#include "UnitManager.h"
#include "Unit.h"
#include "SnakeManager.h"

#include "LevelManager.h"
#include "SnakeManager.h"

#include "EventSystem.h"
#include "EventListener.h"

//EVENTS.h
#include "GameEvent.h"

using namespace std;

//DISPLAY
const int DISP_WIDTH = 800;
const int DISP_HEIGHT = 600;

//DIRECTORIES
const string ASSET_PATH = "..\\..\\common\\assets\\";
const string ASSET_PATH_PICTURES = "Assets\\";
const string FONT = "cour.ttf";

//Level
const string BACKGROUND_1_FILENAME = "TealBackground.png";
const string WALL_FILENAME = "32pxWall.png";
const string SNAKE_FILENAME = "Snake.png";
const string APPLE_FILENAME = "Apple.png";
const string SPEED_FILENAME = "SpeedPower.png";
const string SLOW_FILENAME = "SlowPower.png";

//BUFFER KEYS
const string BG_1 = "BACKGROUND_1";
const string HUD = "Hud";
const string WALL = "WALL";
const string SNAKE = "SNAKE";
const string APPLE = "APPLE";
const string SPEED_POWER = "SPEED";
const string SLOW_POWER = "Slow";

//SCREEN POSITIONS
const int ORIGIN_X = 0;
const int ORIGIN_Y = 0;

static class Game : public EventListener
{
private:

	static Game* mpGameInst;
	Game(int width,int height);

	EventSystem* mpEventSystem;

	InputSystem* mpInput;

	GraphicsSystem* mpGraphics;

	GraphicsBufferManager mpgBufferManager;

	//HUD
	HUDClass* mpHUD;
	
	//SNAKE/Level
	LevelManager mLevelManager;
	UnitManager mLevelUnitManager;
	Animation mWallAnimation;

	SnakeManager mSnake;
	SnakeUnitManager mSnakeUnitManager;
	Animation mSnakeAnimation;

	//Collectibles
	UnitManager mUnitManagerApple;
	UnitManager mUnitManagerPowerUp1;
	UnitManager mUnitManagerPowerUp2;

	Animation mAppleAnimation;
	Animation PowerUp1Animation;
	Animation PowerUp2Animation;

	//Font and Colors
	Font* mpFont;

	//Do Loop
	bool startScreen = true;
	bool Lost = false;
	bool mHoldDown = false;
	bool shouldContinue = true;

	//movement
	bool Up = false;
	bool Down = false;
	bool Right = false;
	bool Left = false;

	//Randomizer
	bool appear = false;
	bool powerShow = false;
	bool powerShow2 = false;

	int currentLevel = 0;
	bool startNewLevel = false;
	bool run1 = false;
	bool run2 = false;
	bool run3 = false;

	Vector2D direction = Vector2D(0, 0);

	Game();
	~Game();

	public:

		static void createInstance();
		static Game* getInstance();
		static void destroyInstance();

		//need static functions
		 void init();
		 void cleanup();
		 void doLoop();

		 //HANDLE EVENTS
		 virtual void handleEvent(const Event& theEvent);

};

//extern Game* gpGame;