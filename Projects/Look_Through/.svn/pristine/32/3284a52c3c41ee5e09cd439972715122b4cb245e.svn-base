#pragma once

#include <vector>
#include <Trackable.h>
#include "Vector2D.h"
#include "Animation.h"
#include "Unit.h"

using namespace std;

class Unit;

class UnitManager : public Trackable 
{
	float mHalf;

	int mZero;

	const string FILE_PATH = "unit_data.txt";
	protected:
		int mArrLength;
		vector<Unit*> mpUnits;
	public:
		UnitManager();
		UnitManager(int size);
		~UnitManager();

		virtual void createAndAddUnit(Vector2D location, Animation, Animation altAnimation);
		virtual void createAndAddUnit(Vector2D location, Animation);
		void addUnits(int quantity, Vector2D location, Animation, Animation altAnimation);
		void addUnits(int quantity, Vector2D location, Animation);
		virtual void activateUnit(Vector2D pos);
		void deactivateUnit(int uNum);
		void deleteUnit(Unit*);
		void deleteUnit(Vector2D);

		void cleanScreen();

		void clearUnits();

		virtual void updateAll(double);
		void drawAll();
		void drawActive();

		vector<Unit*> getUnits() { return mpUnits; }

		bool collideCheck(Unit* host, Unit* oncoming);

		virtual void detectCollisions(vector<Unit*> pUnArr);
};