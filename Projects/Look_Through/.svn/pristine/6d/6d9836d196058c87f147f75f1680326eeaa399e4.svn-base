/*
 *  Author: Tommy Wagner
 *  Class: GPR-250-01
 *  Assignment: Assignment 1
 *  Certification of Authenticity:
 *      I certify that this assignment is entirely my own work.
 */

#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

#include <iostream>
#include <cassert>
#include <string>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>

#include "GraphicsSystem.h"
#include "GraphicsBuffer.h"
#include "Color.h"
#include "Sprite.h"
#include "Font.h"

#include <time.h>

int main()
{
	srand(time(NULL));

	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;
	Timer timer;

	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;
	const Vector2D ZERO = Vector2D(0, 0);
	const int SMURF_SIZE = 60;


	const std::string ASSET_PATH = "..\\..\\common\\assets\\";
	const std::string BACKGROUND_FILENAME = "steps.png";
	const std::string QUIMBY_FILENAME = "mayor_quimby.png";
	const std::string SMURFS_FILENAME = "smurf_sprites.png";

	const std::string FONT_FILENAME = "cour.ttf";
	const int FONT_SIZE = 48;
	const double SLEEP_TIME = 5.0;
	
	GraphicsSystem* pDisplay = new GraphicsSystem(DISP_WIDTH, DISP_HEIGHT);

	Color* pRed = new Color(255, 0, 0);
	Color* pBlack = new Color(0, 0, 0);

	GraphicsBuffer* pBackground = new GraphicsBuffer((ASSET_PATH + BACKGROUND_FILENAME).c_str());
	GraphicsBuffer* pSmurfs = new GraphicsBuffer((ASSET_PATH + SMURFS_FILENAME).c_str()); 
	GraphicsBuffer* pQuimby = new GraphicsBuffer((ASSET_PATH + QUIMBY_FILENAME).c_str());
	GraphicsBuffer* pRedRect = new GraphicsBuffer(pRed, DISP_WIDTH, DISP_HEIGHT);

	Font* pCour_font = new Font((ASSET_PATH + FONT_FILENAME).c_str(), FONT_SIZE);

	Sprite* psQuimby = new Sprite(ZERO, pQuimby);
	Sprite* psRedRect = new Sprite(ZERO, pRedRect);
	
	pDisplay->Draw(pRedRect, ZERO, psQuimby, 1);

	std::string curse = "Curse you Papa Smurf!";
	pDisplay->WriteText(pRedRect, ZERO, pCour_font, pBlack, curse);

	Sprite* psBackground = new Sprite(pBackground);

	pDisplay->Draw(ZERO, psBackground, 1);
	int redX = (DISP_WIDTH * (1.f / 6.f));
	int redY = (DISP_HEIGHT * (1.f / 6.f));

	pDisplay->Draw(Vector2D(redX, redY), psRedRect, (2.f / 3.f));


	Vector2D smurfPos;
	for (int i = 0; i < 16; i++)
	{
		smurfPos.setX(rand() % (DISP_WIDTH - SMURF_SIZE));
		smurfPos.setY(rand() % (DISP_HEIGHT - SMURF_SIZE));
		Sprite* pSingleSmurf = new Sprite(smurfPos, SMURF_SIZE, SMURF_SIZE, pSmurfs);

		pDisplay->Draw(smurfPos, pSingleSmurf, 1.);
		delete pSingleSmurf;
	}

	pDisplay->saveBuffer(pDisplay->getBackBuffer(), "backbuffer.jpg");
	pDisplay->saveBuffer(pRedRect, "redbuffer.jpg");
	pDisplay->flip();

	timer.sleep(5000.0);
	
	//deleting everything
	delete pBackground;
	delete psBackground;
	delete pSmurfs;
	delete pQuimby;
	delete psQuimby;
	delete pRedRect;
	delete psRedRect;
	delete pRed;
	delete pBlack;
	delete pCour_font;
	delete pDisplay;
	delete pPerformanceTracker;

	MemoryTracker::getInstance()->reportAllocations(std::cout);
	system("pause");
	return 0;
}