#include <iostream>
#include <cassert>
#include <string>
#include <map>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>
#include <vector>

#include "UnitManager.h"
#include "Unit.h"

//----------------------------------------Unit Manager----------------------------------------

UnitManager::UnitManager()
{
	Clear();
	collidedUnit = nullptr;
}

UnitManager::~UnitManager()
{
	Clear();
	std::vector<Unit*>().swap(unitVector); //this swap makes unitVector empty, and temp unitVector is destroyed
	collidedUnit = nullptr;
	delete collidedUnit;
}

void UnitManager::UpdateAll()
{
	for (int i = 0; i < unitVector.size(); i++) {
		getUnit(i)->update();
	}
}

void UnitManager::deleteUnit(int unitPos)
{
	delete unitVector[unitPos];
	unitVector.erase(unitVector.begin() + unitPos);
}

void UnitManager::DrawAll()
{
	for (int i = 0; i < unitVector.size(); i++) {
		getUnit(i)->draw();
	}
}

bool UnitManager::checkCollision(Vector2D pos)
{
	int unitNum = 0;
	for (std::vector<Unit*>::iterator i = unitVector.begin(); i != unitVector.end(); i++)
	{
		unitNum++;
		Unit* temp = *i;
		Vector2D tempPos(temp->getXPos(), temp->getYPos());

		if (tempPos == pos) {
			collidedUnit = temp;
			mCollidedUnit = unitNum;
			return true;
		}
	}
	return false;
}

bool UnitManager::checkSelfCollision(Vector2D pos)
{
	int unitNum = 0;
	for (std::vector<Unit*>::iterator i = unitVector.begin()+1; i != unitVector.end(); i++)
	{
		unitNum++;
		Unit* temp = *i;
		Vector2D tempPos(temp->getXPos(), temp->getYPos());

		if (tempPos == pos) {
			collidedUnit = temp;
			mCollidedUnit = unitNum;
			return true;
		}
	}
	return false;
}

void UnitManager::Clear()
{
	for (int i = 0; i < unitVector.size(); i++)
	{
		deleteUnit(i);
	}
	unitVector.clear();
}