#pragma once

#include "GraphicsSystem.h"
#include "InputSystem.h"
#include "UnitManager.h"
#include "MenuManager.h"
//#include "AudioManager.h"
//#include "SceneManager.h"
#include "EventListener.h"

#include <ctime>
#include <Timer.h>
#include <PerformanceTracker.h>
#include <Trackable.h>

class SceneManager;
class AudioManager;

class Game : public EventListener, public Trackable
{
public:
	static Game* getGame();

	static void createInstance(float displayWidth, float displayHeight);
	static void deleteInstance();

	void init();
	void clean();

	void doLoop();

	GraphicsSystem* getGraphicsSystem() { return mpGraphicsSystem; }
	InputSystem* getInputSystem() { return mpInputSystem; }
	MenuManager* getMenuManager() { return mpMenuManager; }
	SceneManager* getSceneManager() { return mpSceneManager; }
	AudioManager* getAudioManager() { return mpAudioManager; }

	// Would it be better to handle updates here through an event?
	// That way random objects can't change these values anytime they want.
	void changeDifficulty(float newDifficulty) { mDifficulty = newDifficulty; }
	void changeSoundEnabled(bool enabledBool) { mSoundOn = enabledBool; }

	float getDifficulty() { return mDifficulty; }
	bool getSoundAvailability() { return mSoundOn; }

	void updateGameState(bool inGame) { mInGame = inGame; }

	void saveGame();
	void loadGame();

	virtual void handleEvent(const Event& theEvent);

private:
	static Game* mpsGame;
	Game(float displayWidth, float displayHeight);
	~Game();

	bool continueLoop = true;
	GraphicsSystem* mpGraphicsSystem;
	InputSystem* mpInputSystem;
	MenuManager* mpMenuManager;
	SceneManager* mpSceneManager;
	AudioManager* mpAudioManager;

	float mDifficulty = 1;
	std::string mLanguage = "English"; // enum?
	bool mSoundOn = true;

	bool mInGame = false;
};