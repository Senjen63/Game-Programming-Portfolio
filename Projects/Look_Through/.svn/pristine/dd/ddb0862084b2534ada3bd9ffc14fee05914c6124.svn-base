#include "GraphicsSystem.h"
#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>
#include <iostream>


GraphicsSystem::GraphicsSystem(int height, int width)
{
	mDisplayHeight = height;
	mDisplayWidth = width;
	mpDisplay = al_create_display(width, height);
	mpBackBuffer = new GraphicsBuffer(al_get_backbuffer(mpDisplay));
}

GraphicsSystem::~GraphicsSystem()
{
	delete mpBackBuffer;
	delete mpDisplay;
	mpBackBuffer = nullptr;
	mpDisplay = nullptr;
}

bool GraphicsSystem::init()
{
	if (!al_init())
	{
		std::cout << "error initting Allegro\n";
		system("pause");
		return false;
	}
	if (!al_init_image_addon())
	{
		std::cout << "error - Image Add-on not initted\n";
		system("pause");
		return false;
	}
	if (!al_init_font_addon())
	{
		std::cout << "error - Font Add-on not initted\n";
		system("pause");
		return false;
	}
	if (!al_init_ttf_addon())
	{
		std::cout << "error - TTF Add-on not initted\n";
		system("pause");
		return false;
	}
	if (!al_init_primitives_addon())
	{
		std::cout << "error - primitives Add-on not initted\n";
		system("pause");
		return false;
	}
	return true;
}

void GraphicsSystem::cleanUp()
{
	al_destroy_display(mpDisplay);
}

void GraphicsSystem::flip()
{
	al_flip_display();
}

//scale defaults to 1.0f
void GraphicsSystem::Draw(Vector2D loc, Sprite sprite, float scale)
{
	ALLEGRO_BITMAP* oldBackBuffer = al_get_target_bitmap();
	GraphicsBuffer* buffer = sprite.getBuffer();
	ALLEGRO_BITMAP* bitmap = buffer->getBitmap();
	al_set_target_bitmap(mpBackBuffer->getBitmap());

	if (scale == 1.0f)
	{
		//pass the bitmap.
		al_draw_bitmap(bitmap, loc.getX(), loc.getY(), 0);
	}
	else
	{
		al_draw_scaled_bitmap(bitmap, loc.getX(), loc.getY(), sprite.getWidth(), sprite.getHeight(), loc.getX(), loc.getY(), sprite.getWidth() * scale, sprite.getHeight() * scale, 0);
	}
	al_set_target_bitmap(oldBackBuffer);
}

void GraphicsSystem::Draw(GraphicsBuffer* buff, Vector2D loc, Sprite sprite, float scale)
{
	int flags = 0;
	ALLEGRO_BITMAP* oldBackBuffer = al_get_target_bitmap();
	GraphicsBuffer* buffer = sprite.getBuffer();
	ALLEGRO_BITMAP* bitmap = buffer->getBitmap();
	al_set_target_bitmap(buff->getBitmap());

	if (scale == 1.0f)
	{
		//pass the bitmap.
		al_draw_bitmap(bitmap, loc.getX(), loc.getY(), flags);
	}
	else
	{
		al_draw_scaled_bitmap(bitmap, loc.getX(), loc.getY(), sprite.getWidth(), sprite.getHeight(), loc.getX(), loc.getY(), sprite.getWidth() * scale, sprite.getHeight() * scale, flags);
	}
	al_set_target_bitmap(oldBackBuffer);
}

void GraphicsSystem::WriteText(Vector2D loc, Font font, Color color, std::string text)
{
	al_draw_text(font.getFont(), color.getColor(), loc.getX(), loc.getY(), ALLEGRO_ALIGN_LEFT, text.c_str());
}

void GraphicsSystem::WriteText(GraphicsBuffer* buff, Vector2D loc, Font font, Color color, std::string text)
{
	ALLEGRO_BITMAP* oldBackBuffer = al_get_target_bitmap();
	al_set_target_bitmap(buff->getBitmap());
	al_draw_text(font.getFont(), color.getColor(), loc.getX(), loc.getY(), ALLEGRO_ALIGN_LEFT, text.c_str());
	al_set_target_bitmap(oldBackBuffer);
}

bool GraphicsSystem::SaveBuffer(GraphicsBuffer* buff, std::string fileName)
{
	if (al_save_bitmap(fileName.c_str(), buff->mpBitmap))
	{
		return true;
	}
	else
	{
		std::cout << "There was an issue saving the selected bitmap." << std::endl;
		return false;
	}
}