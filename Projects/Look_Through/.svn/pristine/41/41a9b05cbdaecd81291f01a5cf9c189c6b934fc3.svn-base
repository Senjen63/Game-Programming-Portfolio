#include "Game.h"
#include "ButtonComponent.h"
#include "StartMenu.h"
#include "SettingsMenu.h"


Game* Game::mpGame;

const int HUD_FONT_SIZE = 32;

void Game::update(float dt)
{
	mpUnitManager->update(dt);
}


void Game::render()
{
	mpUnitManager->draw(mpGraphicsSystem);
}


void Game::handleInput()
{
	mpInputSystem->handleInputQueue();
}


Game* Game::getInstance()
{
	return mpGame;
}


Game* Game::createInstance(int targetFramerate)
{
	assert(mpGame == nullptr);

	mpGame = new Game(targetFramerate);

	return mpGame;
}


void Game::initInstance(Vector2D windowSize)
{
	const std::string FONT_PATH = "Fonts\\";

	mWindowSize = windowSize;

	mpGraphicsSystem = new GraphicsSystem();
	mpGraphicsSystem->init(windowSize.getX(), windowSize.getY());

	mpInputSystem = new InputSystem();
	mpInputSystem->init();

	mpUnitManager = new UnitManager();

	mpGraphicsBufferManager = new GraphicsBufferManager(mpGraphicsSystem->getBackBuffer());

	mpAnimationManager = new AnimationManager();

	mpLevelManager = new LevelManagerNew();

	mpCurrentMenu = new StartMenu();

	mpScreenChangeManager = new ScreenChangeManager();
	mpScreenChangeManager->init();

	mpFont = new Font(FONT_PATH + "cour.ttf", HUD_FONT_SIZE);

	mpSoundBufferManager = new SoundBufferManager();

	//EventSystem::initInstance();
	//EventSystem::getInstance()->init();
}


void Game::cleanupInstance()
{
	//EventSystem::cleanupInstance();

	if (mpSoundBufferManager != nullptr)
	{
		delete mpSoundBufferManager;
	}

	if (mpAnimationManager != nullptr)
	{
		delete mpAnimationManager;
	}

	if (mpGraphicsBufferManager != nullptr)
	{
		delete mpGraphicsBufferManager;
	}

	if (mpUnitManager != nullptr)
	{
		delete mpUnitManager;
	}

	if (mpInputSystem != nullptr)
	{
		delete mpInputSystem;
	}

	if (mpGraphicsSystem != nullptr)
	{
		delete mpGraphicsSystem;
	}

	if (mpLevelManager != nullptr)
	{
		delete mpLevelManager;
	}

	if (mpScreenChangeManager != nullptr)
	{
		delete mpScreenChangeManager;
	}

	if (mpCurrentMenu != nullptr)
	{
		delete mpCurrentMenu;
	}
}


void Game::importSprites(std::string assetDictionaryPath, std::string spritePath)
{
	std::ifstream input = std::ifstream(assetDictionaryPath);

	if (!input.good())
	{
		throw "importSprites failed";
	}

	std::string name;
	std::string spriteName;

	while (!input.eof())
	{
		input >> name;
		input >> spriteName;

		mpGraphicsBufferManager->addGraphicsBuffer(name, spritePath + spriteName);
	}
}


void Game::importSoundBuffers(std::string soundDictionaryPath, std::string soundPath)
{
	std::ifstream input = std::ifstream(soundDictionaryPath);

	if (!input.good())
	{
		throw "importSounds failed";
	}

	std::string name;
	std::string soundName;

	while (!input.eof())
	{
		input >> name;
		input >> soundName;

		mpSoundBufferManager->addSoundBuffer(name, soundPath + soundName);
	}
}


void Game::changeCurrentScreen(ScreenType newScreen)
{
	mpUnitManager->deleteAllUnits();
	//EventSystem::getInstance()->cleanup();
	//EventSystem::getInstance()->init();


	mCurrentScreen = newScreen;

	handleInput(); // Handle with no receivers so we don't have leftover inputs

	if (mpCurrentMenu != nullptr)
	{
		delete mpCurrentMenu;
		mpCurrentMenu = nullptr;
	}

	switch (newScreen)
	{
		case(ScreenType::MAIN_GAME):
		{
			mInLevel = true;

			mpLevelManager->init();

			break;
		}

		case(ScreenType::LOADED_MAIN_GAME):
		{
			mInLevel = true;

			mpLevelManager->initLoad();

			break;
		}

		case(ScreenType::START_MENU):
		{
			mInLevel = false;
			mpCurrentMenu = new StartMenu();
			mpCurrentMenu->init();
			break;
		}

		case(ScreenType::LOSE_SCREEN):
		{
			mInLevel = false;
			break;
		}

		case(ScreenType::LEVEL_WIN_SCREEN):
		{
			mpLevelManager->incrementLevel();

			mInLevel = false;
			break;
		}

		case(ScreenType::SETTINGS):
		{
			mInLevel = false;
			mpCurrentMenu = new SettingsMenu();
			mpCurrentMenu->init();
			break;
		}

		case(ScreenType::GAME_WIN_SCREEN):
		{
			mpLevelManager->incrementLevel();

			mInLevel = false;
			break;
		}

		default:
		{
			throw "ScreenType not valid";
		}
	}
}


void Game::doLoop()
{
	const std::string SPRITE_PATH = "Sprites\\";
	const std::string DATA_PATH = "Data\\";
	const std::string SOUND_PATH = "Sounds\\";

	mRunGame = true;

	Timer loopTimer;
	PerformanceTracker* pPerformanceTracker = new PerformanceTracker();

	importSprites(ASSET_DICTIONARY_PATH, SPRITE_PATH);
	importSoundBuffers(SOUND_DICTIONARY_PATH, SOUND_PATH);

	mpGraphicsBufferManager->addGraphicsBuffer("HUDBackground", Vector2D(mWindowSize.getX(), (float)HUD_FONT_SIZE), Color(0, 0, 0, 255));
	mpGraphicsBufferManager->addGraphicsBuffer("DrawRefreshBox", mWindowSize, Color(0, 0, 0));
	mpGraphicsBufferManager->addGraphicsBuffer("StartMenuBackground", mWindowSize, Color(0, 0, 0));
	mpGraphicsBufferManager->addGraphicsBuffer("InfoScreenBackground", mWindowSize, Color(0, 0, 0));

	Sprite backgroundSprite = Sprite(&mpGraphicsBufferManager->getGraphicsBuffer("BackgroundBuffer"));
	Sprite infoScreenBackgroundSprite = Sprite(&mpGraphicsBufferManager->getGraphicsBuffer("InfoScreenBackground"));

	//EventSystem::getInstance()->cleanup();
	//EventSystem::getInstance()->init();

	StartMenu* startMenu = new StartMenu();
	startMenu->init();

	HUD hud = HUD(*mpLevelManager, *mpFont, Color(), &mpGraphicsBufferManager->getGraphicsBuffer("HUDBackground"));

	//mScreenChangeManager.init();

	//buttonParams = UnitParameters()
	//mpUnitManager->createUnit();

	std::string musicPath = "Music\\Spiderman 2 - Pizza Theme (HD).wav";
	Music music = Music();
	music.init(musicPath, true);
	music.play();

	mpLevelManager->initLevelLoadPaths({ "Data\\Level1Frogger.txt", "Data\\Level2Frogger.txt", "Data\\Level3Frogger.txt" });

	while (mRunGame)
	{
		pPerformanceTracker->clearTracker(PERFORMANCE_TRACKER_STRING);
		pPerformanceTracker->startTracking(PERFORMANCE_TRACKER_STRING);

		loopTimer.start();

		mpScreenChangeManager->mCanHandleEvents = true;

		mpGraphicsSystem->draw(Vector2D(0, 0), &mpGraphicsBufferManager->getGraphicsBuffer("DrawRefreshBox"));

		Game::getInstance()->getGraphicsSystem()->writeText(Vector2D(250, 50), Game::getInstance()->getFont(), Color(), "Frogger Pogger :O");


		handleInput();
		update(mTargetTimeInMilliseconds);

		if (mpInputSystem->getKeyState(Keycode::ESCAPE))
		{
			mRunGame = false;
			continue;
		}

		if (mInLevel && mCurrentScreen == ScreenType::MAIN_GAME)
		{
			mpLevelManager->update(mTargetTimeInMilliseconds);
			hud.update(mTargetTimeInMilliseconds);

			mpGraphicsSystem->draw(Vector2D(0, 0), backgroundSprite);
			hud.draw(mpGraphicsSystem);
		}
		else
		{
			if (mpInputSystem->getKeyState(Keycode::SPACE))
			{
				//mInLevel = true;
				//mCurrentScreen = ScreenType::MAIN_GAME;
				//handleInput(); // Handle with no receivers so we don't have leftover inputs
				//mpUnitManager->cleanup();
				////EventSystem::getInstance()->cleanup();
				////EventSystem::getInstance()->init();
				//mpLevelManager->init();
				////mScreenChangeManager.init();
			}
			else
			{
				//mpGraphicsSystem->draw(Vector2D(0, 0), infoScreenBackgroundSprite);

				switch (mCurrentScreen)
				{
				case(ScreenType::LOSE_SCREEN):
					mpGraphicsSystem->writeText(Vector2D(250, 250), mpFont, Color(), "You lost! Press space to try again");
					break;

				case(ScreenType::LEVEL_WIN_SCREEN):
					mpGraphicsSystem->writeText(Vector2D(0, 0), mpFont, Color(), "You won the level! Press space to go to the next one");
					break;

				case(ScreenType::GAME_WIN_SCREEN):
					mpGraphicsSystem->writeText(Vector2D(0, 0), mpFont, Color(), "You won the game! Press space to restart");
					break;

				case(ScreenType::START_MENU):
					//mpGraphicsSystem->writeText(Vector2D(0, 0), font, Color(), "Welcome to Snake! Press space to start");
					break;
				case(ScreenType::SETTINGS):
					cout << "INSETTINGS MENU" << endl;
					mpCurrentMenu->cleanup();
					break;
				}
			}
		}

		render();

		if (mInLevel && mCurrentScreen == ScreenType::MAIN_GAME)
		{
			mpLevelManager->getCurLevel()->getFrog()->draw(mpGraphicsSystem);
		}

		mpGraphicsSystem->flip();

		loopTimer.sleepUntilElapsed(mTargetTimeInMilliseconds);

		pPerformanceTracker->stopTracking(PERFORMANCE_TRACKER_STRING);
	}

	if (startMenu != nullptr) delete startMenu;
	if (mpFont != nullptr) delete mpFont;

	delete pPerformanceTracker;
}


void Game::setGameRunStatus(bool runStatus)
{
	mRunGame = runStatus;
}
