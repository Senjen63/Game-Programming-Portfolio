#pragma once

#include <allegro5/allegro.h>
#include <Trackable.h>
#include <Vector2D.h>

enum class KeyCode
{
    A = ALLEGRO_KEY_A, B = ALLEGRO_KEY_B, C = ALLEGRO_KEY_C, D = ALLEGRO_KEY_D, E = ALLEGRO_KEY_E, F = ALLEGRO_KEY_F, G = ALLEGRO_KEY_G, H = ALLEGRO_KEY_H, I = ALLEGRO_KEY_I, J = ALLEGRO_KEY_J, K = ALLEGRO_KEY_K, L = ALLEGRO_KEY_L, M = ALLEGRO_KEY_M, N = ALLEGRO_KEY_N, O = ALLEGRO_KEY_O, P = ALLEGRO_KEY_P, Q = ALLEGRO_KEY_Q, R = ALLEGRO_KEY_R, S = ALLEGRO_KEY_S, T = ALLEGRO_KEY_T, U = ALLEGRO_KEY_U, V = ALLEGRO_KEY_V, W = ALLEGRO_KEY_W, X = ALLEGRO_KEY_X, Y = ALLEGRO_KEY_Y, Z = ALLEGRO_KEY_Z,
    ONE = ALLEGRO_KEY_1, TWO = ALLEGRO_KEY_2, THREE = ALLEGRO_KEY_3, FOUR = ALLEGRO_KEY_4, FIVE = ALLEGRO_KEY_5, SIX = ALLEGRO_KEY_6, SEVEN = ALLEGRO_KEY_7, EIGHT = ALLEGRO_KEY_8, NINE = ALLEGRO_KEY_9, ZERO = ALLEGRO_KEY_0,
    PAD_ONE = ALLEGRO_KEY_PAD_1, PAD_TWO = ALLEGRO_KEY_PAD_2, PAD_THREE = ALLEGRO_KEY_PAD_3, PAD_FOUR = ALLEGRO_KEY_PAD_4, PAD_FIVE = ALLEGRO_KEY_PAD_5, PAD_SIX = ALLEGRO_KEY_PAD_6, PAD_SEVEN = ALLEGRO_KEY_PAD_7, PAD_EIGHT = ALLEGRO_KEY_PAD_8, PAD_NINE = ALLEGRO_KEY_PAD_9, PAD_ZERO = ALLEGRO_KEY_PAD_0,
    F1 = ALLEGRO_KEY_F1, F2 = ALLEGRO_KEY_F2, F3 = ALLEGRO_KEY_F3, F4 = ALLEGRO_KEY_F4, F5 = ALLEGRO_KEY_F5, F6 = ALLEGRO_KEY_F6, F7 = ALLEGRO_KEY_F7, F8 = ALLEGRO_KEY_F8, F9 = ALLEGRO_KEY_F9, F10 = ALLEGRO_KEY_F10, F11 = ALLEGRO_KEY_F11, F12 = ALLEGRO_KEY_F12,
    ESCAPE = ALLEGRO_KEY_ESCAPE,
    TAB = ALLEGRO_KEY_TAB,
    ENTER = ALLEGRO_KEY_ENTER,
};

enum class MouseButton
{
    LEFT = 1, RIGHT = 2, MIDDLE = 3,
};

class MouseState : public Trackable
{
    friend class InputSystem;

private:
    // Only InputSystem is able to create a MouseState 
    MouseState(ALLEGRO_MOUSE_STATE* pMouseState);

    Vector2D mPosition;
    int mScrollPosition;
    int mButtonsBitfield;

public:
    Vector2D getPosition() { return mPosition; }
    int getMouseWheelPosition() { return mScrollPosition; }
    int getButtonsBitfield() { return mButtonsBitfield; }
};

class InputSystem : public Trackable
{
public:
    // Deleted funcs should be public for better errors 
    InputSystem(const InputSystem&) = delete;
    void operator=(const InputSystem&) = delete;
    ~InputSystem() {};

    static void init();
    static void cleanUp();

    static bool getKeyState(KeyCode keycode);
    static MouseState getMouseState();
    static bool getMouseButtonDown(int mouseButton);
    static bool getMouseButtonDown(MouseButton mouseButton);
    static Vector2D getMousePosition();

private:
    InputSystem() = default;

    ALLEGRO_MOUSE_STATE mMouseState;
    ALLEGRO_KEYBOARD_STATE mKeyBoardState;

    static InputSystem* inst; // Attempt at singleton structure 
};
