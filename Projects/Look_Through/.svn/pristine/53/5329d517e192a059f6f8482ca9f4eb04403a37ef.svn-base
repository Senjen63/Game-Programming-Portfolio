#include "include/InputTranslator.hpp"

#include <iostream>

InputTranslator::InputTranslator()
{
    mpEventSystem = std::make_shared< EventSystem >();
    mpInputSystem = std::make_shared< InputSystem >( mpEventSystem );
}

void InputTranslator::createBinding( const std::string & name, AxisType axis )
{
    if ( mBindings.contains( name ) )
    {
        mBindings[ name ].push_back( axis );
    } else
    {
        mBindings[ name ] = { axis };
    }
}

float InputTranslator::getAxis( const std::string & name )
{
    if ( !mBindings.contains( name ) ) return 0.0f;

    for ( auto & [ positiveButton, input ] : mBindings[ name ] )
    {
        if ( mStates[ input ] == ButtonState::Pressed || mStates[ input ] == ButtonState::Held )
        {
            return positiveButton ? 1.0f : -1.0f;
        }
    }

    return 0.0f;
}

bool InputTranslator::getButtonDown( const InputType input )
{
    return mStates[ input ] == ButtonState::Pressed;
}

bool InputTranslator::getButtonUp( const InputType input )
{
    return mStates[ input ] == ButtonState::Released;
}

void InputTranslator::handleEvent( const Event & event )
{
    switch ( event.type )
    {
    case EventType::KeyboardInput:
        {
            const auto & [ keyState, keyCode ] = std::get< KeyboardEventData >( event.data );
            if ( mStates[ keyCode ] == ButtonState::Held && keyState == ButtonState::Pressed ) break;

            mStates[ keyCode ] = keyState;
            break;
        }
    case EventType::MouseInput:
        mStates[ std::get< MouseEventData >( event.data ).mouseButton ] = std::get< MouseEventData >( event.data ).mouseState;
        break;
    default:
        break;
    }
}

void InputTranslator::update()
{
    for ( auto & [ input, state ] : mStates )
    {
        switch ( state )
        {
        case ButtonState::Released:
            state = ButtonState::None;
            break;
        case ButtonState::Pressed:
            state = ButtonState::Held;
            break;
        default:
            break;
        }
    }
    mpInputSystem->pollInputs();
}
