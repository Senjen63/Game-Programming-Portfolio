#include "GraphicsBufferManager.h"
#include "GraphicsBuffer.h"

GraphicsBufferManager::~GraphicsBufferManager()
{
	clearAllGraphicsBuffers();
}

void GraphicsBufferManager::createGraphicsBuffer(const GraphicsBufferKey& key, std::string filename)
{
	GraphicsBuffer* pNewGraphicsBuffer = nullptr;

	auto gbAtKey = mGraphicsBufferMap.find(key);

	if (gbAtKey == mGraphicsBufferMap.end())
	{
		pNewGraphicsBuffer = new GraphicsBuffer(filename);

		mGraphicsBufferMap[key] = pNewGraphicsBuffer;
	}
}

void GraphicsBufferManager::createGraphicsBuffer(const GraphicsBufferKey& key, int bitmapWidth, int bitmapHeight)
{
	GraphicsBuffer* pNewGraphicsBuffer = nullptr;

	auto gbAtKey = mGraphicsBufferMap.find(key);

	if (gbAtKey == mGraphicsBufferMap.end())
	{
		pNewGraphicsBuffer = new GraphicsBuffer(bitmapWidth, bitmapHeight);

		mGraphicsBufferMap[key] = pNewGraphicsBuffer;
	}
}

void GraphicsBufferManager::deleteGraphicsBuffer(const GraphicsBufferKey& key)
{
	auto gbAtKey = mGraphicsBufferMap.find(key);

	if (gbAtKey != mGraphicsBufferMap.end())
	{
		delete gbAtKey->second;

		mGraphicsBufferMap.erase(gbAtKey);
	}
}

void GraphicsBufferManager::deleteGraphicsBuffer(GraphicsBuffer* bufferToDelete)
{
	for (auto gb : mGraphicsBufferMap)
	{
		if (bufferToDelete == gb.second)
		{
			delete bufferToDelete;

			mGraphicsBufferMap.erase(gb.first);

			return;
		}
	}
}

GraphicsBuffer* GraphicsBufferManager::getGraphicsBuffer(const GraphicsBufferKey& key)
{
	auto gbAtKey = mGraphicsBufferMap.find(key);

	if (gbAtKey != mGraphicsBufferMap.end())
	{
		return gbAtKey->second;
	}

	return nullptr;
}

void GraphicsBufferManager::clearAllGraphicsBuffers()
{
	for (auto gb : mGraphicsBufferMap)
	{
		GraphicsBuffer* pGraphicsBuffer = gb.second;
		delete pGraphicsBuffer;
	}
	mGraphicsBufferMap.clear();
}