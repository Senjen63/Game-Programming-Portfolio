#include "Unit.h"
#include "Game.h"
#include "Sprite.h"
#include "Animation.h"
#include "GraphicsSystem.h"

Unit::Unit(Vector2D location)
{
	this->mLocation = location;
	this->mpAnim = nullptr;
	this->mIsAnimated = true;
	this->mAnimSwapped = false;
}

Unit::~Unit() {};

void Unit::update(double animTime)
{
	if (!mAnimSwapped)
	{
		mPrimaryAnim.update(animTime);
	}
	else
	{
		mSecondaryAnim.update(animTime);
	}
}

void Unit::draw()
{
	if (!mAnimSwapped)
	{
		Game::getGameInstance()->getGraphicsSystem()->draw(mLocation, mPrimaryAnim.getCurrentSprite());
	}
	else
	{
		Game::getGameInstance()->getGraphicsSystem()->draw(mLocation, mSecondaryAnim.getCurrentSprite());
	}
}

void Unit::setAnim(Animation* newAnim)
{
	this->mpAnim = newAnim;
}

void Unit::setPrimaryAnim(Animation newAnim)
{
	this->mPrimaryAnim = newAnim;
}

void Unit::setSecondaryAnim(Animation newAnim)
{
	this->mSecondaryAnim = newAnim;
}

void Unit::pauseAnim()
{
	mIsAnimated = false;
}

void Unit::resumeAnim()
{
	mIsAnimated = true;
}

void Unit::swapAnim()
{
	if (!mAnimSwapped)
	{
		mAnimSwapped = true;
	}
	else
	{
		mAnimSwapped = false;
	}
}

void Unit::setLocation(Vector2D newLocation)
{
	this->mLocation = newLocation;
}

Animation Unit::getCurrentAnim()
{
	if (!mAnimSwapped)
	{
		return mPrimaryAnim;
	}
	else
	{
		return mSecondaryAnim;
	}
}

Animation* Unit::getCurrentAnimPointer()
{
	if (!mAnimSwapped)
	{
		return &mPrimaryAnim;
	}
	else
	{
		return &mSecondaryAnim;
	}
}