#include "GraphicsSystem.h"

GraphicsSystem::GraphicsSystem()
{
	init(DISPLAY_HEIGHT, DISPLAY_WIDTH);
}

//GraphicsSystem::GraphicsSystem(int height, int width)
//{
//	mpDisplay = al_create_display(width, height);
//	assert(mpDisplay);
//}

GraphicsSystem::~GraphicsSystem()
{
	cleanUp();
}

bool GraphicsSystem::init(int height, int width)
{
	if (!al_init())
	{
		cout << "error initting Allegro\n";
		system("pause");
	}
	if (!al_init_image_addon())
	{
		cout << "error - Image Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_font_addon())
	{
		cout << "error - Font Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_ttf_addon())
	{
		cout << "error - TTF Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_primitives_addon())
	{
		cout << "error - primitives Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_install_audio())
	{
		cout << "error - Audio Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_acodec_addon())
	{
		cout << "error - Audio Codec Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_reserve_samples(1))
	{
		cout << "error - samples not reserved\n";
		system("pause");
		return 1;
	}

	mpDisplay = al_create_display(width, height);
	assert(mpDisplay);
}

void GraphicsSystem::cleanUp()
{
	if (mpDisplay)
	{
		al_destroy_display(mpDisplay);
		mpDisplay = nullptr;
	}
}

int GraphicsSystem::getHeight()
{
	return al_get_display_height(mpDisplay);
}

int GraphicsSystem::getWidth()
{
	return al_get_display_width(mpDisplay);
}

ALLEGRO_DISPLAY* GraphicsSystem::getBackBuff()
{
	return mpDisplay;
}

ALLEGRO_BITMAP* GraphicsSystem::getBitmap()
{
	return al_get_backbuffer(mpDisplay);
}

void GraphicsSystem::flip()
{
	al_flip_display();
}

void GraphicsSystem::draw(GraphicsBuffer* pBuff)
{
	al_draw_bitmap(pBuff->getBitmap(), 0, 0, 0);
}

void GraphicsSystem::draw(Vector2D location, Sprite* sprite, float width, float height)
{
	al_draw_bitmap_region(sprite->getBuff()->getBitmap(), sprite->getLocation().getX(), sprite->getLocation().getY(), width, height, location.getX(), location.getY(), 0);
}

void GraphicsSystem::draw(GraphicsBuffer* pBuff, Vector2D location, float scale)
{
	al_set_target_bitmap(al_get_backbuffer(getBackBuff()));
	al_draw_scaled_bitmap(pBuff->getBitmap(), 0, 0, pBuff->getWidth(), pBuff->getHeight(), location.getX(), location.getY(), pBuff->getWidth() * scale, pBuff->getHeight() * scale, 0);
}
void GraphicsSystem::draw(GraphicsBuffer* pTarget, GraphicsBuffer* pBuff, Vector2D location, float scale)
{
	ALLEGRO_BITMAP* preBitmap = al_get_target_bitmap();
	
	al_set_target_bitmap(pTarget->getBitmap());
	al_draw_scaled_bitmap(pBuff->getBitmap(), 0, 0, pBuff->getWidth(), pBuff->getHeight(), location.getX(), location.getY(), pBuff->getWidth() * scale, pBuff->getHeight() * scale, 0);
	al_set_target_bitmap(preBitmap);
}

void GraphicsSystem::draw(GraphicsBuffer* pGraphicsBuffer, Vector2D location, Sprite* sprite, float scale)
{
	al_draw_scaled_bitmap(pGraphicsBuffer->getBitmap(), 0, 0, sprite->getWidth(), sprite->getHeight(), location.getX(), location.getY(), sprite->getWidth() * scale, sprite->getHeight() * scale, 0);
}

void GraphicsSystem::drawText(Vector2D location, Font* pFont, Color color, string text)
{
	al_draw_text(pFont->getFont(), color.getColor(), location.getX(), location.getY(), ALLEGRO_ALIGN_CENTER, text.c_str());
}

void GraphicsSystem::drawText(GraphicsBuffer* pGraphicsBuffer, Vector2D location, Font* pFont, Color color, string text)
{
	ALLEGRO_BITMAP* preBitmap = al_get_target_bitmap();
	al_set_target_bitmap(pGraphicsBuffer->getBitmap());

	al_draw_text(pFont->getFont(), color.getColor(), location.getX(), location.getY(), ALLEGRO_ALIGN_LEFT, text.c_str());
	al_set_target_bitmap(preBitmap);
}

void GraphicsSystem::saveBuffer(GraphicsBuffer* pBuff, string filename)
{
	al_save_bitmap(filename.c_str(), pBuff->getBitmap());
}