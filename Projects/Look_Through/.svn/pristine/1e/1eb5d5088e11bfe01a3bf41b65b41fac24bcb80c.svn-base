#include "InputSystem.h"
#include "Game.h"

InputSystem::InputSystem()
{
    mpEventQueue = nullptr;
    mpEventSystem = nullptr;
}
InputSystem::~InputSystem()
{
    cleanup();
}
void InputSystem::init()
{
    if (!mInitialized)
    {
        al_install_keyboard();
        al_install_mouse();
        mpEventSystem = EventSystem::getInstance();
        mpEventQueue = al_create_event_queue();
        al_register_event_source(mpEventQueue, al_get_keyboard_event_source());
        al_register_event_source(mpEventQueue, al_get_mouse_event_source());

        mInitialized = true;
    }
}
void InputSystem::cleanup()
{
    if (!mCleaned)
    {
        if (mpEventQueue != nullptr)
        {
            al_destroy_event_queue(mpEventQueue);
        }
        mCleaned = true;
    }
}
bool InputSystem::getKeyState(int keyNum)
{
    ALLEGRO_KEYBOARD_STATE keyState;
    al_get_keyboard_state(&keyState);
    
    if ( al_key_down(&keyState, keyNum) )
    {
        return true;
    }

    return false;
}
bool InputSystem::getMouseState(int mouseNum)
{
    ALLEGRO_MOUSE_STATE mouseState;
    al_get_mouse_state(&mouseState);

    if (mouseState.buttons & mouseNum)
    {
        return true;
    }

    return false;
}
Vector2D InputSystem::getMousePosition()
{
    ALLEGRO_MOUSE_STATE mouseState;
    al_get_mouse_state(&mouseState);

    return Vector2D(mouseState.x, mouseState.y);
}
void InputSystem::fireInputEvents()
{
    ALLEGRO_KEYBOARD_STATE keyState;
    ALLEGRO_MOUSE_STATE mouseState;

    al_get_keyboard_state(&keyState);
    al_get_mouse_state(&mouseState);

    while (!al_is_event_queue_empty(mpEventQueue))
    {
        ALLEGRO_EVENT currentEvent;
        al_get_next_event(mpEventQueue, &currentEvent);

        if (currentEvent.type == ALLEGRO_EVENT_KEY_DOWN)
        {
            mpEventSystem->fireEvent(InputEvent((int)currentEvent.keyboard.keycode));
        }
    }
}
