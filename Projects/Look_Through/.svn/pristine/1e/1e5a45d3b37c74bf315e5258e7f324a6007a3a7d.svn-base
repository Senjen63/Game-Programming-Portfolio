#include "graphicsSystem.h"

GraphicsSystem::GraphicsSystem()
{
	mpGraphicsDisplay = nullptr;
	mpBackBuffer = nullptr;
}
GraphicsSystem::GraphicsSystem(int width, int height)
{
	mpGraphicsDisplay = al_create_display(width, height);
	mpBackBuffer = new GraphicsBuffer(al_get_backbuffer(mpGraphicsDisplay));
}
GraphicsSystem::~GraphicsSystem()
{
	GraphicsCleanup();
}
bool GraphicsSystem::GraphicsInit()
{
	if (!al_init())
	{
		cout << "error initting Allegro\n";
		system("pause");
		return false;
	}
	if (!al_init_image_addon())
	{
		cout << "error - Image Add-on not initted\n";
		system("pause");
		return false;
	}
	if (!al_init_font_addon())
	{
		cout << "error - Font Add-on not initted\n";
		system("pause");
		return false;
	}
	if (!al_init_ttf_addon())
	{
		cout << "error - TTF Add-on not initted\n";
		system("pause");
		return false;
	}
	if (!al_init_primitives_addon())
	{
		cout << "error - primitives Add-on not initted\n";
		system("pause");
		return false;
	}

	return true;
}
void GraphicsSystem::GraphicsCleanup()
{
	delete mpBackBuffer;
	al_destroy_display(mpGraphicsDisplay);
}
void GraphicsSystem::flipDisplay()
{
	al_flip_display();
}
int GraphicsSystem::getHeight()
{
	//return mheight;
	return al_get_display_height(mpGraphicsDisplay);
}
int GraphicsSystem::getWidth()
{
	return al_get_display_width(mpGraphicsDisplay);
}
GraphicsBuffer* GraphicsSystem::getBackBuffer()
{
	return mpBackBuffer;
}
void GraphicsSystem::draw(int xPos, int yPos, Sprite sprite, float xScale = 1.0f, float yScale = 1.0f)
{
	//al_set_target_bitmap(mpBackBuffer->mpBitmap);
	Vector2D sourcePos = sprite.getSourceLocation();
	Vector2D sourceWH = sprite.getWidthAndHeigth();

	al_draw_scaled_bitmap(sprite.getGraphicsBuffer()->mpBitmap, sourcePos.getX(), sourcePos.getY(),
		sourceWH.getX(), sourceWH.getY(), xPos, yPos, xScale * sourceWH.getX(), yScale * sourceWH.getY(), 0);
}

void GraphicsSystem::draw(Vector2D destination, Vector2D source, Sprite sprite, float scale)
{
	al_draw_scaled_bitmap(sprite.getGraphicsBuffer()->getBuffer(), source.getX(), source.getY(), sprite.getSpriteWidth(), sprite.getSpriteHeight(), destination.getX(), destination.getY(), sprite.getSpriteWidth() * scale, sprite.getSpriteHeight() * scale, 0);
}

void GraphicsSystem::draw(GraphicsBuffer* pBackBuffer, int xPos, int yPos, float xScale = 1.0f, float yScale = 1.0f)
{
	int defaultX = 0;
	int defaultY = 0;
	al_draw_scaled_bitmap(pBackBuffer->mpBitmap, defaultX, defaultY, pBackBuffer->getWidth(), pBackBuffer->getHeight(),
		xPos, yPos, xScale * pBackBuffer->getWidth(), yScale * pBackBuffer->getHeight(), 0);
}
void GraphicsSystem::draw(GraphicsBuffer* pBackBuffer, int xPos, int yPos, Sprite sprite, float xScale = 1.0f, float yScale = 1.0f)
{
	Vector2D sourcePos = sprite.getSourceLocation();
	Vector2D sourceWH = sprite.getWidthAndHeigth();
	ALLEGRO_BITMAP* oldBitmap = al_get_target_bitmap();

	al_set_target_bitmap(pBackBuffer->mpBitmap);

	al_draw_scaled_bitmap(sprite.getGraphicsBuffer()->mpBitmap, sourcePos.getX(), sourcePos.getY(),
		sourceWH.getX(), sourceWH.getY(), xPos, yPos, xScale * sourceWH.getX(), yScale * sourceWH.getY(), 0);

	al_set_target_bitmap(oldBitmap);
}
void GraphicsSystem::writeText(int xPos, int yPos, Font* font, Color color, string text)
{
	ALLEGRO_COLOR newCol = al_map_rgba(color.getR(), color.getG(), color.getB(), color.getA());
	ALLEGRO_BITMAP* oldBitmap = al_get_target_bitmap();

	al_set_target_bitmap(mpBackBuffer->mpBitmap);

	al_draw_text(font->mpLoadedFont, newCol, xPos, yPos, 0, text.c_str());

	al_set_target_bitmap(oldBitmap);
}
void GraphicsSystem::writeText(GraphicsBuffer* pBackBuffer, int xPos, int yPos, Font* font, Color color, string text)
{
	ALLEGRO_COLOR newCol = al_map_rgba(color.getR(), color.getG(), color.getB(), color.getA());
	ALLEGRO_BITMAP* oldBitmap = al_get_target_bitmap();

	al_set_target_bitmap(pBackBuffer->mpBitmap);

	al_draw_text(font->mpLoadedFont, newCol, xPos, yPos, 0, text.c_str());

	al_set_target_bitmap(oldBitmap);
}
bool GraphicsSystem::saveBuffer(GraphicsBuffer* pSaveBuffer, string fileName)
{
	if (al_save_bitmap(fileName.c_str(), pSaveBuffer->mpBitmap))
	{
		return true;
	}

	cout << "ERROR - Save Failed" << endl;
	return false;
}
