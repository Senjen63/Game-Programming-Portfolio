#pragma once

#include "Trackable.h"
#include "Vector2D.h"
#include "Animation.h"
#include "Direction.h"
#include "Wall.h"
#include "EnemyBase.h"
#include "FlyingFist.h"

class Sprite;
class Animation;
class Vector2D;

class Player : public Trackable
{
	const int SPRITE_SIZE = 32;
	const double PLAYER_ANIM_SPEED = 0.01;
	const int PLAYER_HP_EASY = 8;
	const int PLAYER_HP_NORMAL = 5;
	const int PLAYER_HP_HARD = 3;
	const int PLAYER_IFRAMES = 60;
	const int PLAYER_FLASH_TIME = 8;
	const std::string PLAYER_SPRITE_SHEET = "spr_dean_sheet.png";
	const std::string FIST_SPRITE_SHEET = "spr_fist_sheet.png";
	const Color BASE_COLOR = Color(255, 255, 255);
	const Color FLASH_COLOR = Color(255, 0, 0);

public:

	// initialization
	Player(std::string filename);
	~Player();

	void loadAssets();
	void update();
	void drawPlayer();

	// accessors
	Vector2D getLocation() { return mLocation; }
	float getX() { return mLocation.getX(); }
	float getY() { return mLocation.getY(); }
	float getSize() { return mCurrentSize; }
	int getHP() { return mHP; }
	bool canPunch() { return mCanPunch; }
	bool canRoll() { return mCanRoll; }

	// mutators
	void setHP(int hp) { mHP = hp; }
	void resetHP();
	void setX(float x) { mLocation.setX(x); }
	void setY(float y) { mLocation.setY(y); }
	void setLocation(Vector2D location) { mLocation = location; }

	// movement mechanics
	void movePlayer(Direction newDir);
	void movePlayerRoll();
	void resetMoveTimer() { mRemainingMoveTick = mCurrentMoveTick; }
	void setPlayerDirection(Direction newDir);
	void animatePlayer();
	void changePlayerAnimation(AnimationBase* newAnim);
	Direction getDirection() { return mDirection; }

	//collisions and damaging
	bool isColliding(Vector2D locationColliding);
	void checkEnemyCollisions(Vector2D locationColliding);
	void punchPlayer();
	void rollPlayer();
	void die();
	void nextLevel();

private:

	// animations
	float mScale;
	float mCurrentSize;
	Animation* mpCurrentAnimation;
	AnimationBase* mpCurrentAnimationBase;
	
	// states
	enum PlayerStates
	{
		IDLE,
		MOVING,
		ATTACKING,
		ROLLING,
		HURTING,
		DEAD
	};

	PlayerStates mState;

	// attack
	bool mCanPunch;
	FlyingFist* mpFlyingFist;

	// roll
	bool mCanRoll;

	// movement vars
	Direction mDirection;
	Vector2D mLocation;
	double mDefaultMoveTick;
	double mCurrentMoveTick;
	double mRemainingMoveTick;
	int mDefaultMoveSpeed;
	int mCurrentMoveSpeed;

	// stats
	int mMaxHP;
	int mHP;
	int mCurrentIFrames;
	int mCurrentFlashFrames;

	Color mColor;
};