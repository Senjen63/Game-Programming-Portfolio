/*
Author: David Silverman
Class: GPR-250-01
Assignment: Assignment 2
Certification of Authenticity:
I certify that this assignment is entirely my own work.
 */


#pragma once
#include "game.h"


using namespace std;



Game* gpGame = nullptr;

/* Pre:  Nothing
*  Post:  A game
*  Purpose:  Create the game
*********************************************************/
Game::Game()
{
	gpGame;
}

/* Pre:  The game
*  Post:  Nothing
*  Purpose:  Destroy the game
*********************************************************/
Game::~Game()
{

}

/* Pre:  The Game
*  Post:  The Game
*  Purpose:  Initialize the game
*********************************************************/
void Game::Init()
{
	mpGraphics = new GraphicsSystem;
	mpInput = new InputSystem;
	mpUnit = new Unit(Vector2D(DISPLAY_WIDTH / 2, DISPLAY_HEIGHT/ 2));

	mpGraphics->Init(DISPLAY_WIDTH, DISPLAY_HEIGHT);
	mpInput->Init();

	mpSmurfs = new GraphicsBuffer(SMURF_FILENAME, SMARF, SMARF);
	mpDeans = new GraphicsBuffer(DEAN_FILENAME, SMARF, SMARF);
	mpStairs = new GraphicsBuffer(BACKGROUND_FILENAME, STAIRS_WIDTH, STAIRS_HEIGHT);

	
	mpSmurfAnimation = new Animation(mpSmurfs, SPRITE_HEIGHT, SPRITE_WIDTH, SMURF, SMURF, SIXTY_FRAMES);
	mpDeanAnimation = new Animation(mpDeans, SPRITE_HEIGHT, SPRITE_WIDTH, SMURF, SMURF, SIXTY_FRAMES);
	mpBackground = new Sprite(TOP_LEFT, STAIRS_HEIGHT, STAIRS_WIDTH, mpStairs);

	mRate = RATE;
	mpUnit->setAnimation(mpSmurfAnimation);
	mpPerformanceTracker = new PerformanceTracker;
}

/* Pre:  The game
*  Post:  The game
*  Purpose:  Destroy the game's pointers
*********************************************************/
void Game::Cleanup()
{
	delete mpPerformanceTracker;
	delete mpUnit;
	delete mpSmurfAnimation;
	delete mpDeanAnimation;
	delete mpBackground;
	delete mpSmurfs;
	delete mpDeans;
	delete mpStairs;
	mpGraphics->Cleanup();
	mpInput->Cleanup();
	delete mpGraphics;
	delete mpInput;
}

/* Pre:  The game
*  Post:  Animation
*  Purpose:  Draw the game
*********************************************************/
void Game::doLoop()
{
	bool keepGoing = true;

	while (keepGoing)
	{
		Timer loopTimer;
		loopTimer.start();

		mpPerformanceTracker->clearTracker("mpPerformanceTracker");
		mpPerformanceTracker->startTracking("mpPerformanceTracker");
		
		mpInput->getMouseState();

		if (mpInput->getKeyState(mpInput->S_KEY))
		{
			mpUnit->setUnitCurrentSpeed(false, mRate);
		}

		if (mpInput->getKeyState(mpInput->F_KEY) && clampRate())
		{
			mpUnit->setUnitCurrentSpeed(true, mRate);
		}

		if (mpInput->getKeyState(mpInput->ENTER_KEY))
		{
			if (mIsSecondAnimation == false)
			{
				mIsSecondAnimation = true;
				mpUnit->setAnimation(mpDeanAnimation);
			}
			else
			{
				mIsSecondAnimation = false;
				mpUnit->setAnimation(mpSmurfAnimation);
			}
		}

		if (mpInput->getMouseState())
		{
			mpUnit->setPosition(mpInput->getPosition());
		}

		if (mpInput->getKeyState(mpInput->ESCAPE_KEY))
		{
			keepGoing = false;
		}

		mpGraphics->Draw(TOP_LEFT, *mpBackground, HALF, HALF);

		mpUnit->draw();

		mpGraphics->Flip();

		mpUnit->update(SIXTY_FRAMES);

		loopTimer.sleepUntilElapsed(SIXTY_FRAMES);
		mpPerformanceTracker->stopTracking("mpPerformanceTracker");
		cout << mpPerformanceTracker->getElapsedTime("mpPerformanceTracker") << endl;
	}
}

/* Pre:  Nothing
*  Post:  Nothing
*  Purpose:  Set the smurf animation
*********************************************************/
void Game::setSmurfAnimation(Animation animation)
{
	mpSmurfAnimation = &animation;
}

/* Pre:  Nothing
*  Post:  Nothing
*  Purpose:  Set the dean animation
*********************************************************/
void Game::setDeanAnimation(Animation animation)
{
	mpDeanAnimation = &animation;
}

/* Pre:  Nothing
*  Post:  A boolean
*  Purpose:  Make sure the animation speed doesn't go under 0
*********************************************************/
bool Game::clampRate()
{
	float tester = mpUnit->mpAnimation->getAnimationSpeed() - mRate;

	if (tester > 0)
		return true;
	else
		return false;
}