#pragma once

#include <PerformanceTracker.h>
#include <MemoryTracker.h>

#include "Sprite.h"
#include "Unit.h"
#include "Square.h"
#include "Level.h"

using namespace std;

class Snake : public Trackable
{
public:
	Snake();
	Snake(Sprite snakeHead, Sprite snakeBody, int startX, int startY);
	~Snake();
	void update(double timePassed, Level level);
	void addSegment();
	void setHead(Sprite head);
	void setBody(Sprite body);
	void setPosition(Square* square);
	void setSegments(int numSegments);
	void setMoveDirection(char direction);
	void setSpeed(float speed);
	void draw(GraphicsSystem * system);
	void resetLength();
	int getLength();
	Sprite getHead();
	Square* getCurrentSquare();
	Unit getSegment(int num);
	void speedUp();
	void slowDown();

private:
	Sprite mSnakeHead;
	Sprite mSnakeBody;
	int mX, mY;
	float mTimeRemaining;
	double mSpeed;
	double mTimePerMove;
	const float SPEED_MODIFIER = .0016666667;
	const double SPEED_ADJUSTMENT = 2;
	char mMoveDirection = 'R';
	Square* mpCurrentSquare;
	vector<Unit> mSnakeSegments;
};
