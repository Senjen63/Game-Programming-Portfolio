#include "Projectile.h"
#include "Player.h"
#include "AudioManager.h"

Projectile::Projectile(std::pair<float, float> targetPosition, std::pair<float, float>location, std::pair<float, float>scale, int damage, std::string creatorTag, std::string animationDataFilePath) : Unit(location, scale, animationDataFilePath)
{
	std::pair<float, float> dirVector = std::make_pair(targetPosition.first - location.first, targetPosition.second - location.second);
	std::pair<float, float> upVector = std::make_pair(0, 1);

	float dot = (dirVector.first * upVector.first) + (dirVector.second * upVector.second);
	float determinant = (dirVector.first * upVector.second) + (upVector.first * dirVector.second);
	float angle = atan2(determinant, dot);

	// replace 50 with desired speed
	float velocityX = 50 * sin(angle);
	float velocityY = 50 * cos(angle);

	mCurrentVelocity = std::make_pair(velocityX, velocityY);
	mDamage = damage;
	mCreatorTag = creatorTag;
}

Projectile::~Projectile()
{

}

void Projectile::update(float deltaTime)
{
	std::pair<float, float> currentLocation = getLocation();
	std::pair<float, float> newLocation = std::make_pair(currentLocation.first + (mCurrentVelocity.first * (0.01 * deltaTime)), currentLocation.second + (mCurrentVelocity.second * (0.01 * deltaTime)));

	std::vector<Unit*> collidedObjects = collision(make_pair(newLocation.first, currentLocation.second));

	for (int i = 0; i < collidedObjects.size(); i++)
	{
		if (dynamic_cast<Player*>(collidedObjects[i]) != nullptr && mCreatorTag != "Player")
		{
			dynamic_cast<Player*>(collidedObjects[i])->updateHealth(-mDamage);
			Game::getGame()->getAudioManager()->playSound("Hit");
			deleteSelf();
			return;
		}

		else if (dynamic_cast<Enemy*>(collidedObjects[i]) != nullptr && mCreatorTag != "Enemy")
		{
			dynamic_cast<Enemy*>(collidedObjects[i])->updateHealth(-mDamage);
			Game::getGame()->getAudioManager()->playSound("Hit");
			deleteSelf();
			return;
		}

		// Switch to check for collision object
		if (dynamic_cast<Projectile*>(collidedObjects[i]) == nullptr &&
			dynamic_cast<Player*>(collidedObjects[i]) == nullptr &&
			dynamic_cast<Enemy*>(collidedObjects[i]) == nullptr)
		{
			Game::getGame()->getAudioManager()->playSound("Hit");
			deleteSelf();
			return;
		}
	}

	updateLocation(newLocation);

	mCurrentTimeAlive += deltaTime;

	if (mCurrentTimeAlive >= mTimeBeforeDeletion)
	{
		deleteSelf();
	}
}