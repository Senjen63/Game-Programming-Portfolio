#include "GraphicsSystem.h"

//Default constructor.
GraphicsSystem::GraphicsSystem()
{
	mWidth = 0;
	mHeight = 0;
	mpDisplay = nullptr;
	mpBuffer = nullptr;
}

//Constructor with a given size for the display.
GraphicsSystem::GraphicsSystem(int height, int width)
{
	mWidth = width;
	mHeight = height;
	mpDisplay = nullptr;
	mpBuffer = nullptr;
}

//Destructor
GraphicsSystem::~GraphicsSystem()
{
	cleanup();

	delete mpBuffer;
}

//Checks if everything is working then creates a display.
bool GraphicsSystem::init()
{
	if (!al_init())
	{
		cout << "error initting Allegro\n";
		system("pause");
		return 1;
	}
	if (!al_init_image_addon())
	{
		cout << "error - Image Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_font_addon())
	{
		cout << "error - Font Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_ttf_addon())
	{
		cout << "error - TTF Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_primitives_addon())
	{
		cout << "error - primitives Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_install_audio())
	{
		cout << "error - Audio Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_acodec_addon())
	{
		cout << "error - Audio Codec Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_reserve_samples(1))
	{
		cout << "error - samples not reserved\n";
		system("pause");
		return 1;
	}
	mpDisplay = al_create_display(mWidth, mHeight);
	assert(mpDisplay);
	mpBuffer = new GraphicsBuffer(al_get_backbuffer(mpDisplay));

	return 0;
}

//Deals with the display so that memory is not leaked.
void GraphicsSystem::cleanup()
{

	al_destroy_display(mpDisplay);
}

//Draws a sprite in the chosen location on the current bitmap.
void GraphicsSystem::draw(Vector2D targetLocation, Sprite* sprite, float scale = 1)
{
	al_set_target_bitmap(al_get_backbuffer(mpDisplay));
	al_draw_scaled_bitmap(sprite->getBuffer()->getBitmap(), sprite->getLocation().getX(), sprite->getLocation().getY(), sprite->getWidth(), sprite->getHeight(), targetLocation.getX(), targetLocation.getY(), sprite->getWidth() * scale, sprite->getHeight() * scale, 0);
}

//Draws a sprite in the chosen location on the current bitmap.
void GraphicsSystem::draw(Vector2D targetLocation, Sprite sprite, float scale = 1)
{
	al_set_target_bitmap(al_get_backbuffer(mpDisplay));
	al_draw_scaled_bitmap(sprite.getBuffer()->getBitmap(), sprite.getLocation().getX(), sprite.getLocation().getY(), sprite.getWidth(), sprite.getHeight(), targetLocation.getX(), targetLocation.getY(), sprite.getWidth() * scale, sprite.getHeight() * scale, 0);
}

//Draws a sprite on a targeted bitmap.
void GraphicsSystem::draw(GraphicsBuffer* targetBuffer, Vector2D targetLocation, Sprite* sprite, float scale = 1)
{
	ALLEGRO_BITMAP* holder = al_get_target_bitmap();
	al_set_target_bitmap(targetBuffer->getBitmap());
	al_draw_scaled_bitmap(sprite->getBuffer()->getBitmap(), sprite->getLocation().getX(), sprite->getLocation().getY(), sprite->getWidth(), sprite->getHeight(), targetLocation.getX(), targetLocation.getY(), sprite->getWidth() * scale, sprite->getHeight() * scale, 0);
	al_set_target_bitmap(holder);
}

//Presents the back buffer.
void GraphicsSystem::flip()
{
	al_flip_display();
}

GraphicsBuffer* GraphicsSystem::getBackBuffer()
{
	return mpBuffer;
}

//Accessor for the height of the display.
int GraphicsSystem::getHeight()
{
	return al_get_display_height(mpDisplay);
}

//Accessor for the width of the display.
int GraphicsSystem::getWidth()
{
	return al_get_display_width(mpDisplay);
}

//Saves the current bitmap to a file.
void GraphicsSystem::saveBuffer(GraphicsBuffer* buffer, string fileName)
{
	al_save_bitmap(fileName.c_str(), buffer->getBitmap());
}

//Writes text to the current bitmap.
void GraphicsSystem::writeText(Vector2D targetLocation, Font* font, Color color, string text)
{
	al_draw_text(font->getFont(), color.getColor(), targetLocation.getX(), targetLocation.getY(), ALLEGRO_ALIGN_LEFT, text.c_str());
}

//Writes text to a targeted bitmap.
void GraphicsSystem::writeText(GraphicsBuffer* targetBuffer, Vector2D targetLocation, Font* font, Color color, string text)
{
	ALLEGRO_BITMAP* holder = al_get_target_bitmap();
	al_set_target_bitmap(targetBuffer->getBitmap());
	al_draw_text(font->getFont(), color.getColor(), targetLocation.getX(), targetLocation.getY(), ALLEGRO_ALIGN_LEFT, text.c_str());
	al_set_target_bitmap(holder);
}
