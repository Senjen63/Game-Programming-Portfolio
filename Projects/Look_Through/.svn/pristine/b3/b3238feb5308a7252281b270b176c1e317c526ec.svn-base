#include "include/GraphicsBuffer.hpp"

#include <iostream>
#include <SDL_image.h>

#include "include/GraphicsSystem.hpp"

GraphicsBuffer::GraphicsBuffer()
{
    mpTexture = nullptr;
    mWidth = 0;
    mHeight = 0;
}

GraphicsBuffer::GraphicsBuffer( const char * pFilename, const GraphicsSystem * pSystem )
{
    mpTexture = nullptr;
    mWidth = 0;
    mHeight = 0;
    loadImage( pFilename, pSystem );
}

/*GraphicsBuffer::GraphicsBuffer( const Font * pFont, const char * pText, const Color & color, const GraphicsSystem * pSystem )
{
    SDL_Surface * pTextSurface = TTF_RenderUTF8_Blended( pFont->mpFont, pText, SDL_Color{ color.r, color.g, color.b, color.a } );
    SDL_Texture * pTextTexture = SDL_CreateTextureFromSurface( pSystem->mpRenderer, pTextSurface );

    mWidth = pTextSurface->w;
    mHeight = pTextSurface->h;
    
    SDL_FreeSurface( pTextSurface );
    pTextSurface = nullptr;

    mpTexture = pTextTexture;
}*/

GraphicsBuffer::~GraphicsBuffer()
{
    SDL_DestroyTexture( mpTexture );
    mpTexture = nullptr;
}

bool GraphicsBuffer::loadImage( const char * pFilename, const GraphicsSystem * pSystem )
{
    if ( mpTexture )
    {
        SDL_DestroyTexture( mpTexture );
        mpTexture = nullptr;
    }

    SDL_Surface * pSurface = IMG_Load( pFilename );
    if ( !pSurface )
    {
        std::cout << "Failed to load " << pFilename << std::endl << SDL_GetError() << std::endl;
        return false;
    }

    mWidth = pSurface->w;
    mHeight = pSurface->h;

    mpTexture = SDL_CreateTextureFromSurface( pSystem->mpRenderer, pSurface );

    SDL_FreeSurface( pSurface );
    pSurface = nullptr;
    return true;
}

int GraphicsBuffer::getWidth() const
{
    return mWidth;
}

int GraphicsBuffer::getHeight() const
{
    return mHeight;
}
