#pragma once

#include <string>
#include <iostream>
#include "Trackable.h"
#include "Color.h"
#include "Font.h"
#include "GraphicsBuffer.h"
#include "Sprite.h"
#include "Vector2D.h"
#include <allegro5/allegro.h>

class GraphicsSystem : public Trackable
{
private:

	ALLEGRO_DISPLAY* mpDisplay = nullptr;
	int mWidth = 0;
	int mHeight = 0;

	void cleanup();

	int getWidth() { return mWidth; }
	int getHeight() { return mHeight; }
	ALLEGRO_DISPLAY* getDisplay() { return mpDisplay; }

public:

	GraphicsSystem();
	~GraphicsSystem();

	void init(int newWidth, int newHeight);
	void flip();
	void draw(Vector2D location, Sprite sprite, double defaultScale = 1.0);
	void draw(GraphicsBuffer* pBuffer, Vector2D location, Sprite sprite, double defaultScale = 1.0);
	void writeText(Vector2D location, Font* pFont, Color color, std::string text, const int alignment);
	void writeText(GraphicsBuffer* pBuffer, Vector2D location, Font* pFont, Color color, std::string text, const int alignment);
	void setColor(GraphicsBuffer* pBuffer, Color* pColor);
	void saveBuffer(GraphicsBuffer* pBufferToSave, std::string filename);

	ALLEGRO_COLOR createColor(Color* pColor);

	ALLEGRO_BITMAP* getBackBuffer() { return al_get_backbuffer(mpDisplay); }
};
