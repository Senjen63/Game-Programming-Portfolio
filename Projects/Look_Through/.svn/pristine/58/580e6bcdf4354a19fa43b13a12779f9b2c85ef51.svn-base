#pragma once

#include "GameSystem.h"
#include "InputSystem.h"
#include "GraphicsSystem.h"
#include "GraphicsBuffer.h"
#include "Sprite.h"
#include "InputSystem.h"
#include "Unit.h"
#include "Animation.h"

using namespace std;


GameSystem::GameSystem()
{
	bool working = init();
	if (working)
	{
		display = new GraphicsSystem(DISP_WIDTH, DISP_HEIGHT);
		input = new InputSystem();
		animSpeed = DEFAULT_ANIM_SPEED;
	}
}

void GameSystem::Gameplay()
{
	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string BACKGROUND_FILENAME = "axamer-lizum.png";
	const string QUIMBY_FILENAME = "mayor_quimby.png";
	const string FONT_FILENAME = "cour.ttf";
	const string SMURF_FILENAME = "smurf_sprites.png";
	const string SMURF_NUMBER_FILENAME = "smurf_sprites_numbered.png";
	const int FONT_SIZE = 24;
	const string SAMPLE_FILENAME = "clapping.wav";
	const double SLEEP_TIME = 5.0;
	const float SCALE_FACTOR = 0.75f;

	Timer timer;

	GraphicsBuffer* bitmap = new GraphicsBuffer(ASSET_PATH, BACKGROUND_FILENAME);
	GraphicsBuffer* smurfs = new GraphicsBuffer(ASSET_PATH, SMURF_FILENAME);
	GraphicsBuffer* smurfs_numbered = new GraphicsBuffer(ASSET_PATH, SMURF_NUMBER_FILENAME);

	bool flipped = false;

	do {
		//fastforward
		if (input->getKeyState(ALLEGRO_KEY_F))
		{
			animSpeed = FASTER_ANIM_SPEED;
		}
		//slowdown
		else if (input->getKeyState(ALLEGRO_KEY_S))
		{
			animSpeed = SLOWER_ANIM_SPEED;
		}
		else {
			animSpeed = DEFAULT_ANIM_SPEED;
		}

		if (input->getMouseState(0))
		{
			Unit* smurf = new Unit(smurfs, smurfs_numbered, mouseX(), mouseY());
		}
		//exit
		if (input->getKeyState(ALLEGRO_KEY_ESCAPE))
		{
			playing == false;
		}
		
		for (int i = 0; i < unitList.size(); i++)
		{
			unitList[i]->Update();
			timer.sleep(animSpeed);
		}
		if (flipped == false)
		{
			display->Flip();
			flipped = true;
		}
	} while (playing == true);
}

float GameSystem::mouseX()
{
	return al_get_mouse_state_axis(cursor, 0);
}

float GameSystem::mouseY()
{
	return al_get_mouse_state_axis(cursor, 1);
}

GraphicsSystem* GameSystem::getGraphics()
{
	return display;
}

bool GameSystem::init()
{
	if (!al_init())
	{
		cout << "error initting Allegro\n";
		system("pause");
		return 1;
	}
	if (!al_init_image_addon())
	{
		cout << "error - Image Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_font_addon())
	{
		cout << "error - Font Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_ttf_addon())
	{
		cout << "error - TTF Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_primitives_addon())
	{
		cout << "error - primitives Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_install_audio())
	{
		cout << "error - Audio Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_acodec_addon())
	{
		cout << "error - Audio Codec Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_reserve_samples(1))
	{
		cout << "error - samples not reserved\n";
		system("pause");
		return 1;
	}

	return 0;
}