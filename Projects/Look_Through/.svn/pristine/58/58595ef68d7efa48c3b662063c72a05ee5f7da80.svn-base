#include "GraphicsBuffer.h"
#include <cassert>

const int COLOR_DEPTH = sizeof(Color) * 8; // sizeof() returns num bytes but SDL wants num bits 

GraphicsBuffer::GraphicsBuffer(std::string filePath)
{
    mpSurface = IMG_Load(filePath.c_str());
    if (mpSurface == NULL)
    {
        printf("Failed to Load Bitmap: %s\n", IMG_GetError());
        assert(false);
    }
}

GraphicsBuffer::GraphicsBuffer(Color color, int width, int height) :
    mOwnsBitmap(true)
{
    mpSurface = SDL_CreateRGBSurface(0, width, height, COLOR_DEPTH, 0, 0, 0, 0);
    assert(mpSurface);

    SDL_FillRect(mpSurface, NULL, SDL_MapRGBA(mpSurface->format, color.getR(), color.getG(), color.getB(), color.getA()));
}

GraphicsBuffer::~GraphicsBuffer()
{
    if (mOwnsBitmap)
        SDL_FreeSurface(mpSurface);

    cleanUpTexture();
}

int GraphicsBuffer::getWidth() const
{
    if (mpSurface)
        return mpSurface->w;

    return 0;
}

int GraphicsBuffer::getHeight() const
{
    if (mpSurface)
        return mpSurface->h;

    return 0;
}

GraphicsBuffer::GraphicsBuffer(SDL_Surface* pSurface) :
    mpSurface(pSurface), mOwnsBitmap(false)
{}

void GraphicsBuffer::initTexture(SDL_Renderer* pRenderer)
{
    if (mpTexture == nullptr)
    {
        mpTexture = SDL_CreateTextureFromSurface(pRenderer, mpSurface);
    }
}

void GraphicsBuffer::cleanUpTexture()
{
    if (mpTexture)
    {
        SDL_DestroyTexture(mpTexture);
        mpTexture = nullptr;
    }
}
