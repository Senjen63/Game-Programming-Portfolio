#include "InputSystem.h"

InputSystem::InputSystem()
{
	mMouseState;
	mKeyboardState;
    mpQueue;
    mpEventSystem = nullptr;
}
InputSystem::~InputSystem()
{
	cleanup();
}

void InputSystem::init()
{
    if (!al_init())
    {
        throw new std::exception("error initting Allegro\n");
    }
    if (!al_install_keyboard())
    {
        throw new std::exception("error - keyboard not installed\n");
    }
    if (!al_install_mouse())
    {
        throw new std::exception("error - mouse not installed\n");
    }
    al_install_keyboard();
    al_install_mouse();

    mpQueue = al_create_event_queue();
    al_register_event_source(mpQueue, al_get_keyboard_event_source());

    mpEventSystem = EventSystem::getInstance();
    mpEventSystem->init();
}
void InputSystem::cleanup()
{
    mpEventSystem->cleanup();
}

void InputSystem::getKeyEvent()
{
    //this goes in inputsystem
    while (!al_is_event_queue_empty(mpQueue))
    {
        ALLEGRO_EVENT theEvent;
        al_get_next_event(mpQueue, &theEvent);
        if (theEvent.type == ALLEGRO_EVENT_KEY_DOWN)
        {
            mpEventSystem->fireEvent(InputEvent((int)theEvent.keyboard.keycode));
            //cout << theEvent.keyboard.keycode << " key down\n";
        }
    }
}

Vector2D InputSystem::getMousePos()
{
    return Vector2D(mMouseState.x, mMouseState.y);
}

bool InputSystem::getKeyState(KeyCode code)
{
    al_get_keyboard_state(&mKeyboardState);
    return al_key_down(&mKeyboardState, (int)code);
}
bool InputSystem::getMouseDown(MouseCode code)
{
    al_get_mouse_state(&mMouseState);
    return al_mouse_button_down(&mMouseState, (int)code);
}