#include "GraphicsSystem.h"

#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

#include <Vector2D.h>
#include "GraphicsBuffer.h"
#include "Sprite.h"
#include "Color.h"
#include "Font.h"


GraphicsSystem::~GraphicsSystem()
{
	cleanup();
}

void GraphicsSystem::init(int width, int height)
{
	if (!al_init())
	{
		cout << "error initting Allegro\n";
		system("pause");
		return;
	}
	if (!al_init_image_addon())
	{
		cout << "error - Image Add-on not initted\n";
		system("pause");
		return;
	}
	if (!al_init_font_addon())
	{
		cout << "error - Font Add-on not initted\n";
		system("pause");
		return;
	}
	if (!al_init_ttf_addon())
	{
		cout << "error - TTF Add-on not initted\n";
		system("pause");
		return;
	}
	if (!al_init_primitives_addon())
	{
		cout << "error - primitives Add-on not initted\n";
		system("pause");
		return;
	}
	if (!al_init_acodec_addon())
	{
		cout << "error - Audio Codec Add-on not initted\n";
		system("pause");
		//return;
	}	

	mpDisplay = al_create_display(width, height);
	assert(mpDisplay);

	mpBackBuffer = new GraphicsBuffer(al_get_backbuffer(mpDisplay));
	assert(mpBackBuffer);
}
void GraphicsSystem::cleanup()
{
	al_destroy_display(mpDisplay);
	delete mpBackBuffer;
}
void GraphicsSystem::flip()
{
	al_flip_display();
}

int GraphicsSystem::getHeight()
{
	return al_get_display_height(mpDisplay);
}
int GraphicsSystem::getWidth()
{
	return al_get_display_width(mpDisplay);
}
GraphicsBuffer* GraphicsSystem::getBackBuffer()
{
	return mpBackBuffer;
}

void GraphicsSystem::draw(Vector2D loc, Sprite* pSprite, float scale)
{
	float sx = pSprite->mLocation.getX();
	float sy = pSprite->mLocation.getY();
	float sw = pSprite->mWidth;
	float sh = pSprite->mHeight;
	float dx = loc.getX();
	float dy = loc.getY();
	float dw = sw * scale;
	float dh = sh * scale;

	al_draw_scaled_bitmap(pSprite->mpBuffer->mpBitmap, sx, sy, sw, sh, dx, dy, dw, dh, 0);
}
void GraphicsSystem::draw(Vector2D loc, GraphicsBuffer* pBuffer, float scale)
{
	float sw = pBuffer->getWidth();
	float sh = pBuffer->getHeight();
	float dx = loc.getX();
	float dy = loc.getY();
	float dw = sw * scale;
	float dh = sh* scale;

	al_draw_scaled_bitmap(pBuffer->mpBitmap, 0, 0, sw, sh, dx, dy, dw, dh, 0);
}
void GraphicsSystem::draw(GraphicsBuffer* pBuffer, Vector2D loc, Sprite* pSprite, float scale)
{
	float sx = pSprite->mLocation.getX();
	float sy = pSprite->mLocation.getY();
	float sw = pSprite->mWidth;
	float sh = pSprite->mHeight;
	float dx = loc.getX();
	float dy = loc.getY();
	float dw = sw * scale;
	float dh = sh * scale;

	al_set_target_bitmap(pBuffer->mpBitmap);
	al_draw_scaled_bitmap(pSprite->mpBuffer->mpBitmap, sx, sy, sw, sh, dx, dy, dw, dh, 0);
	al_set_target_bitmap(al_get_backbuffer(mpDisplay));
}

void GraphicsSystem::fillColor(Color color)
{
	ALLEGRO_COLOR col = al_map_rgba(color.getRed(), color.getGreen(), color.getBlue(), color.getAlpha());
	al_clear_to_color(col);
}
void GraphicsSystem::fillColor(GraphicsBuffer* pBuffer, Color color)
{
	ALLEGRO_COLOR col = al_map_rgba(color.getRed(), color.getGreen(), color.getBlue(), color.getAlpha());
	al_set_target_bitmap(pBuffer->mpBitmap);
	al_clear_to_color(col);
	al_set_target_bitmap(al_get_backbuffer(mpDisplay));
}

void GraphicsSystem::writeText(Vector2D loc, Font* pFont, Color color, string text)
{
	ALLEGRO_COLOR col = al_map_rgba(color.getRed(), color.getGreen(), color.getBlue(), color.getAlpha());
	al_draw_text(pFont->mpFont, col, loc.getX(), loc.getY(), ALLEGRO_ALIGN_CENTER, text.c_str());
}
void GraphicsSystem::writeText(GraphicsBuffer* pBuffer, Vector2D loc, Font* pFont, Color color, string text)
{
	ALLEGRO_COLOR col = al_map_rgba(color.getRed(), color.getGreen(), color.getBlue(), color.getAlpha());

	al_set_target_bitmap(pBuffer->mpBitmap);
	al_draw_text(pFont->mpFont, col, loc.getX(), loc.getY(), ALLEGRO_ALIGN_CENTER, text.c_str());
	al_set_target_bitmap(al_get_backbuffer(mpDisplay));
}

void GraphicsSystem::saveBuffer(GraphicsBuffer* pBuffer, string fileName)
{
	al_save_bitmap(fileName.c_str(), pBuffer->mpBitmap);
}
