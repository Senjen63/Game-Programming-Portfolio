#include "Unit.h"

Unit::Unit(int x, int y, Animation* anim, Animation* anim2)
{
	mX = x;
	mY = y;
	mUnitAnimationA = anim;
	mUnitAnimationB = anim2;


}

Unit::~Unit()
{
	delete mUnitAnimationA;
	delete mUnitAnimationB;
}

void Unit::enableAnimation()
{
	if (mUsingAltAnimation) { mUnitAnimationB->enable(); }
	else { mUnitAnimationA->enable(); }
}

void Unit::disableAnimation()
{
	if (mUsingAltAnimation) { mUnitAnimationB->disable(); }
	else { mUnitAnimationA->disable(); }
}

bool Unit::getAnimationEnabled()
{
	if (mUsingAltAnimation) { return mUnitAnimationB->getEnabled(); }
	else { return mUnitAnimationA->getEnabled(); }
}

void Unit::update(float elapsedTime)
{
	if (mUsingAltAnimation)
	{
		mUnitAnimationB->update(elapsedTime);
	}

	else
	{
		mUnitAnimationA->update(elapsedTime);
	}
}

void Unit::draw()
{
	if (mUsingAltAnimation)
	{
		Game::instance()->getGraphics()->draw(mX, mY, mUnitAnimationB->getCurrentSprite());
	}

	else
	{
		Game::instance()->getGraphics()->draw(mX, mY, mUnitAnimationA->getCurrentSprite());
	}
}

bool Unit::collision(int colX, int colY)
{
	bool isWithinXBounds;
	bool isWithinYBounds;

	if (mUsingAltAnimation) 
	{ 
		isWithinXBounds = (mX < colX) && (colX < mX + mUnitAnimationB->getCurrentSprite().getWidth());
		isWithinYBounds = (mY < colY) && (colY < mY + mUnitAnimationB->getCurrentSprite().getWidth());
	}
	else
	{
		isWithinXBounds = (mX < colX) && (colX < mX + mUnitAnimationA->getCurrentSprite().getWidth());
		isWithinYBounds = (mY < colY) && (colY < mY + mUnitAnimationA->getCurrentSprite().getWidth());
	}

	return isWithinXBounds && isWithinYBounds;
}