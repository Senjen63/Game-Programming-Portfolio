#include "InputSystem.h"

InputSystem::InputSystem()
{
	mpEventSystem = nullptr;
}

InputSystem::~InputSystem()
{
	cleanup();
}

void InputSystem::init()
{
	if (!al_init())
	{
		throw new std::exception("error initting Allegro\n");
	}
	if (!al_install_keyboard())
	{
		throw new std::exception("error - keyboard not installed\n");
	}
	if (!al_install_mouse())
	{
		throw new std::exception("error - mouse not installed\n");
	}

	mpEventQueue = al_create_event_queue();
	al_register_event_source(mpEventQueue, al_get_keyboard_event_source());

	mpEventSystem = EventSystem::getInstance();
	mpEventSystem->init();
}

void InputSystem::cleanup()
{
	mpEventSystem->cleanup();
}

bool InputSystem::getKeyState(KeyCode keyCode)
{
	al_get_keyboard_state(&mKeyboardState);
	return al_key_down(&mKeyboardState, (int)keyCode);
}

void InputSystem::getKeyEvent()
{
	while (!al_is_event_queue_empty(mpEventQueue))
	{
		ALLEGRO_EVENT anEvent;
		al_get_next_event(mpEventQueue, &anEvent);

		if (anEvent.type == ALLEGRO_EVENT_KEY_DOWN)
		{
			mpEventSystem->fireEvent(InputEvent((int)anEvent.keyboard.keycode));
		}
	}
}

bool InputSystem::getMouseState(Mouse code)
{
	al_get_mouse_state(&mMouseState);
	return al_mouse_button_down(&mMouseState, (int)code);
}

Vector2D InputSystem::getMousePosition()
{
	al_get_mouse_state(&mMouseState);
	return Vector2D(mMouseState.x, mMouseState.y);
}
