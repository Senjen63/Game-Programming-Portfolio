/*
* Author: Quincy Gomes-Cedeno
* Class: GPR-250-02
* Assignment: Assignment 3
* Certification of Authenticity:
* I certify that this assignment is entirely my own work 
* EXCEPT:
* for work copied from Ananda Shumock-Bailey from Assignments 2
*/

#include <iostream>
#include <cassert>
#include <string>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include "Game.h"
#include "EventSystem.h"
#include "EventListener.h"
#include "Event.h"

using namespace std;

int main()
{
	//CREATE A HANDLER FOR GAME LISTENER
	EventSystem::initInstance();

	Game::createInstance();
	Game::getInstance()->init();


	/*EventSystem* pEventSystem = EventSystem::getInstance();

	pEventSystem->init();*/

	/*ExampleListener* pListener = new ExampleListener;*/
	//examplelistender::handlevent
	/*
	function(Event)
	if event.gettype() == moveEvent
	*/
	/*pEventSystem->fireEvent(MessageEvent(“Event1”);*/
	
	Game::getInstance()->doLoop();
	
	Game::getInstance()->destroyInstance(); //issue comes when in unit destructor
	EventSystem::cleanupInstance();

	MemoryTracker::getInstance()->reportAllocations(cout);

	system("pause");
	return 0;
}