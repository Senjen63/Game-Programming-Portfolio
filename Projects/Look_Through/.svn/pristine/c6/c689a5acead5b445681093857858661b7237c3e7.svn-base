#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

#include <iostream>
#include <cassert>
#include <string>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>
#include <random>

#include "GraphicsSystem.h"
#include "GraphicsBuffer.h"
#include "Sprite.h"

using namespace std;

int init()
{
	if (!al_init())
	{
		cout << "error initting Allegro\n";
		system("pause");
		return 1;
	}
	if (!al_init_image_addon())
	{
		cout << "error - Image Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_font_addon())
	{
		cout << "error - Font Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_ttf_addon())
	{
		cout << "error - TTF Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_primitives_addon())
	{
		cout << "error - primitives Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_install_audio())
	{
		cout << "error - Audio Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_acodec_addon())
	{
		cout << "error - Audio Codec Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_reserve_samples(1))
	{
		cout << "error - samples not reserved\n";
		system("pause");
		return 1;
	}

	return 0;
}

int main()
{
	
	srand(time(NULL));
	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;

	const string INIT_TRACKER_NAME = "init";
	const string DRAW_TRACKER_NAME = "draw";
	const string WAIT_TRACKER_NAME = "wait";

	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;

	int working = init();
	if (working == 1)
	{
		return working;
	}
	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string BACKGROUND_FILENAME = "axamer-lizum.png";
	const string QUIMBY_FILENAME = "mayor_quimby.png";
	const string FONT_FILENAME = "cour.ttf";
	const string SMURF_FILENAME = "smurf_sprites.png";
	const int FONT_SIZE = 24;
	const string SAMPLE_FILENAME = "clapping.wav";
	const double SLEEP_TIME = 5.0;
	const float SCALE_FACTOR = 0.75f;

	ALLEGRO_FONT* cour_font = al_load_ttf_font((ASSET_PATH + FONT_FILENAME).c_str(), FONT_SIZE, 0);
	assert(cour_font);

	const ALLEGRO_COLOR WHITE = al_map_rgb(255, 255, 255);
	const ALLEGRO_COLOR BLACK = al_map_rgb(0, 0, 0);
	const ALLEGRO_COLOR BLACK_TRANSPARENT = al_map_rgba(0, 0, 0, 200);
	const ALLEGRO_COLOR PURPLE = al_map_rgb(128, 64, 212);
	const ALLEGRO_COLOR RED = al_map_rgb(255, 0, 0);

	GraphicsSystem* display;
	display = new GraphicsSystem(DISP_WIDTH, DISP_HEIGHT);

	GraphicsBuffer* bitmap = new GraphicsBuffer(ASSET_PATH, BACKGROUND_FILENAME);
	GraphicsBuffer* quimby = new GraphicsBuffer(ASSET_PATH, QUIMBY_FILENAME);
	GraphicsBuffer* smurf = new GraphicsBuffer(ASSET_PATH, SMURF_FILENAME);
	GraphicsBuffer* memMap = new GraphicsBuffer(DISP_WIDTH, DISP_HEIGHT, RED);

	ALLEGRO_SAMPLE* sample = al_load_sample((ASSET_PATH + SAMPLE_FILENAME).c_str());
	assert(sample);

	al_play_sample(sample, 1.0f, ALLEGRO_AUDIO_PAN_NONE, 1.0f, ALLEGRO_PLAYMODE_LOOP, nullptr);

	display->Draw(bitmap);
	display->Draw(memMap, quimby, 0, 0);
	display->WriteText(memMap, 0, 0, cour_font, BLACK, "Curse you Papa Smurf!");
	display->Draw(memMap, 100, 100, SCALE_FACTOR);

	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			float sLocX = i * 60;
			float sLocY = j * 60;

			Sprite* sSmurf = new Sprite(smurf, sLocX, sLocY, 60, 60);
			display->Draw(sLocX, sLocY, sSmurf, DISP_WIDTH, DISP_HEIGHT);

			delete sSmurf;
		}
	}

	display->saveBitmap(bitmap, "backbuffer.jpg");
	display->saveBitmap(memMap, "Red.jpg");

	bool keepRunning = true;
	Timer timer;

	//show what you have drawn
	display->Flip();



	timer.sleep(5000.0);

	pPerformanceTracker->stopTracking("loop");
	//cout << "Frame Took:" << pPerformanceTracker->getElapsedTime("loop") << " ms" << endl;

	pPerformanceTracker->clearTracker("loop");

	al_destroy_sample(sample);
	al_destroy_font(cour_font);
	delete bitmap;
	bitmap = nullptr;
	delete quimby;
	quimby = nullptr;
	delete memMap;
	memMap = nullptr;
	delete display;
	display = nullptr;

	delete pPerformanceTracker;
	MemoryTracker::getInstance()->reportAllocations(cout);

	system("pause");
	return 0;
}