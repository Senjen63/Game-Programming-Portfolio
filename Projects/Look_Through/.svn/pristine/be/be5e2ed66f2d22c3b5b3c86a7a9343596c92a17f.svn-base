#include "GraphicsSystem.h"
#include <cassert>

const std::string GAME_TITLE = "Tank Game";
const int IMG_FLAGS_TO_INIT = IMG_INIT_PNG | IMG_INIT_JPG;
const int SDL_FLAGS_TO_INIT = SDL_INIT_VIDEO | SDL_INIT_AUDIO;

GraphicsSystem::GraphicsSystem(int width, int height) :
    mWidth(width), mHeight(height), mpWindow(nullptr), mIsInitted(false)
{}

GraphicsSystem::GraphicsSystem(const GraphicsSystem& other) : 
    GraphicsSystem(other.mWidth, other.mHeight)
{}

GraphicsSystem::~GraphicsSystem()
{
    cleanUp();
}

void GraphicsSystem::resizeDisplay(int width, int height)
{
    SDL_SetWindowSize(mpWindow, width, height);
}

void GraphicsSystem::flip() const
{
    SDL_RenderPresent(mpRenderer);
}

void GraphicsSystem::clearToColor(Color color)
{
    setRenderDrawColor(color);
    SDL_RenderClear(mpRenderer);
}

void GraphicsSystem::draw(const Vector2D& pos, const Sprite& sprite, float angle, float scale, SpriteFlip flip)
{
    // Make sure there is a texture there 
    sprite.getBuffer()->initTexture(mpRenderer);

    // Set up the rects for drawing 
    const SDL_Rect srcRect { (int)sprite.getLoc().getX(), (int)sprite.getLoc().getY(), sprite.getWidth(), sprite.getHeight() };
    const SDL_FRect dstRect{ pos.getX() - sprite.getOffsetToCenter(scale).getX(), pos.getY() - sprite.getOffsetToCenter(scale).getY(), 
        sprite.getWidth() * scale, sprite.getHeight() * scale};

    // Draw! 
    SDL_RenderCopyExF(mpRenderer, sprite.getBuffer()->getTexture(), &srcRect, &dstRect, angle, NULL, (SDL_RendererFlip)flip);
}

void GraphicsSystem::drawText(const Vector2D& pos, const Font& font, const std::string& text, const Color& color)
{
    assert(font.isValidFont());

    /*
    This method of creating a surface then converting it to a texture is not very performent 
    Consider using this 3rd party library to cache textures: https://github.com/grimfang4/SDL_FontCache 
    */

    // Create textTexture (slightly convoluted bc TTF uses surfaces but we want a texture) 
    SDL_Surface* textSurface = TTF_RenderText_Solid(font.getTTFFont(), text.c_str(), color.getSDLColor());
    SDL_Texture* textTexture = SDL_CreateTextureFromSurface(mpRenderer, textSurface);
    SDL_FreeSurface(textSurface);

    // Get size of textRect 
    int w, h;
    if (TTF_SizeText(font.getTTFFont(), text.c_str(), &w, &h) < 0)
    {
        printf("Failed to Get Text Box Size: %s\n", TTF_GetError());
        assert(false);
    }

    const SDL_Rect textRect{ (int)pos.getX(), (int)pos.getY(), w, h };

    SDL_RenderCopy(mpRenderer, textTexture, NULL, &textRect);
    SDL_DestroyTexture(textTexture);
}

void GraphicsSystem::init()
{
    // Don't clean up if initted 
    if (mIsInitted)
        return;

    /* Init anything SDL */
    if (SDL_Init(SDL_FLAGS_TO_INIT) < 0) // Returns negative num on error 
    {
        printf("Failed to Init SDL: %s\n", SDL_GetError());
        assert(false);
    }

    // IMG_Init() returns all the flags to init 
    // This bitwise and will return something non-zero if all the flags were initted correctly 
    if (!(IMG_Init(IMG_FLAGS_TO_INIT) & IMG_FLAGS_TO_INIT))
    {
        printf("Failed to Init IMG: %s\n", IMG_GetError());
        assert(false);
    }

    if (TTF_Init() < 0) // Returns negative num on error 
    {
        printf("Failed to Init TTF: %s\n", TTF_GetError());
        assert(false);
    }

    /* Init the GraphicsSystem */
    mpWindow = SDL_CreateWindow(GAME_TITLE.c_str(), SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, mWidth, mHeight, SDL_WINDOW_SHOWN);
    if (mpWindow == NULL)
    {
        printf("Failed to Create Window: %s\n", SDL_GetError());
        assert(false);
    }

    mpRenderer = SDL_CreateRenderer(mpWindow, -1, SDL_RENDERER_ACCELERATED);
    if (mpRenderer == NULL)
    {
        printf("Failed to Create Renderer: %s\n", SDL_GetError());
        assert(false);
    }

    // Default Draw Color 
    setRenderDrawColor(COLOR_WHITE);

    mpBackBuffer = new GraphicsBuffer(SDL_GetWindowSurface(mpWindow));

    mIsInitted = true;
}

void GraphicsSystem::cleanUp()
{
    // Don't clean up if not initted 
    if (!mIsInitted)
        return;

    mIsInitted = false;

    /* Clean up the GraphicsSystem */
    if (mpBackBuffer)
    {
        delete mpBackBuffer;
        mpBackBuffer = nullptr;
    }

    SDL_DestroyRenderer(mpRenderer);
    mpRenderer = nullptr;

    SDL_DestroyWindow(mpWindow);
    mpWindow = nullptr;

    /* Clean up anything SDL */
    IMG_Quit();
    SDL_Quit();
}

void GraphicsSystem::setRenderDrawColor(Color color)
{
    SDL_SetRenderDrawColor(mpRenderer, color.getR(), color.getG(), color.getB(), color.getA());
}
