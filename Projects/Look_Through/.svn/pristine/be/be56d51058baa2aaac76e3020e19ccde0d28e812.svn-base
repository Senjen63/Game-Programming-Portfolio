#include <iostream>
#include <cassert>
#include <string>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>

#include "GraphicsBuffer.h"
#include "GraphicsSystem.h"
#include "Sprite.h"
#include "Font.h"
#include "Color.h"

using namespace std;

int main()
{
	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;

	const string INIT_TRACKER_NAME = "init";
	const string DRAW_TRACKER_NAME = "draw";
	const string WAIT_TRACKER_NAME = "wait";

	Timer timer;

	srand(time(NULL));

	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;
	const int SMURFS_LENGTH = 4;
	const int FONT_SIZE = 24;

	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string BACKGROUND_FILENAME = "steps.png";
	const string QUIMBY_FILENAME = "mayor_quimby.png";
	const string SMURFS_FILENAME = "smurf_sprites.png";
	const string TEXT = "Curse you Papa Smurf!";
	const string FONT_FILENAME = "cour.ttf";


	GraphicsSystem* pGraphicsSys = new GraphicsSystem();
	pGraphicsSys->init( 800, 600 );

	const Color RED = Color(255, 0, 0);
	const Color BLACK = Color(0, 0, 0);

	GraphicsBuffer* pStepsGB = new GraphicsBuffer( ASSET_PATH + BACKGROUND_FILENAME );
	GraphicsBuffer* pQuimbyGB = new GraphicsBuffer( ASSET_PATH + QUIMBY_FILENAME );
	GraphicsBuffer* pSmurfsGB = new GraphicsBuffer( ASSET_PATH + SMURFS_FILENAME );
	GraphicsBuffer* pRedGB = new GraphicsBuffer( RED, 800, 600 );

	Sprite* pSpriteQuimby = new Sprite( pQuimbyGB, 0, 0, pQuimbyGB->getWidth(), pQuimbyGB->getHeight() );
	pGraphicsSys->draw( pRedGB, pSpriteQuimby, 0, 0, 1 );
	Font* pFont = new Font( FONT_FILENAME, FONT_SIZE );
	pGraphicsSys->writeText( pRedGB, TEXT, 0, 0, pFont, BLACK );
	pGraphicsSys->draw( pStepsGB );
	Sprite* pSpriteRedQuimby = new Sprite( pRedGB, 0, 0, pRedGB->getWidth(), pRedGB->getHeight() );
	pGraphicsSys->draw( pSpriteRedQuimby, 133, 100, ( 2.0f / 3.0f ) );

	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			int randX = rand() % pGraphicsSys->getWidth();
			int randY = rand() % pGraphicsSys->getHeight();
			Sprite* pSpriteSmurf = new Sprite( pSmurfsGB, ( pSmurfsGB->getWidth() / SMURFS_LENGTH ) * i, ( pSmurfsGB->getHeight() / SMURFS_LENGTH ) * j, pSmurfsGB->getWidth() / SMURFS_LENGTH, pSmurfsGB->getHeight() / SMURFS_LENGTH );
			pGraphicsSys->draw( pSpriteSmurf, randX, randY, 1 );
			delete pSpriteSmurf;
		}
	}

	pGraphicsSys->saveBuffer( pStepsGB, "backbuffer.png" );
	pGraphicsSys->saveBuffer(pSpriteRedQuimby->getGraphicsBuffer(), "redbuffer.jpg");

	pGraphicsSys->flip();

	timer.sleep(5000.0);

	pPerformanceTracker->stopTracking("loop");
	//cout << "Frame Took:" << pPerformanceTracker->getElapsedTime("loop") << " ms" << endl;
	pPerformanceTracker->clearTracker("loop");

	delete pSpriteRedQuimby;
	delete pFont;
	delete pSpriteQuimby;
	delete pRedGB;
	delete pQuimbyGB;
	delete pSmurfsGB;
	delete pStepsGB;
	delete pGraphicsSys;
	delete pPerformanceTracker;

	MemoryTracker::getInstance()->reportAllocations(cout);
	system("pause");

	return 0;
}