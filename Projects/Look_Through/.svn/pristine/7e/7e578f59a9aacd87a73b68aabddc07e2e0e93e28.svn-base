#include "GraphicsSystem.h"

/*
Default constructor for the GraphicsSystem class. You will have to call init afterwards.
*/
GraphicsSystem::GraphicsSystem()
{
	mpDisplay = nullptr;
	mpBackBuffer = nullptr;

	mHeight = DEFAULT_DISPLAY_HEIGHT;
	mWidth = DEFAULT_DISPLAY_WIDTH;

	mIsActive = false;
}


GraphicsSystem::GraphicsSystem(int height, int width)
{
	mpDisplay = nullptr;
	mpBackBuffer = nullptr;

	mHeight = height;
	mWidth = width;

	mIsActive = false;
}


GraphicsSystem::~GraphicsSystem()
{
	if (mIsActive)
	{
		deinit();
	}
}


/*
Initialize all Allegro modules to be used.
Returns true if initialization was successful, otherwise returns false.
*/
bool GraphicsSystem::init()
{
	PerformanceTracker graphicsInitTracker = PerformanceTracker();

	graphicsInitTracker.startTracking(GRAPHICS_INIT_TRACKER_NAME);

	if (!al_init())
	{
		cout << "Error initializing Allegro\n";
		return false;
	}

	if (!al_init_image_addon())
	{
		cout << "Error initializing image module\n";
		return false;
	}

	if (!al_init_font_addon())
	{
		cout << "Error initializing font module\n";
		return false;
	}

	if (!al_init_ttf_addon())
	{
		cout << "Error initializing ttf module\n";
		return false;
	}

	mpDisplay = al_create_display(mWidth, mHeight);
	mpBackBuffer = new GraphicsBuffer(al_get_backbuffer(mpDisplay));

	mIsActive = true;

	graphicsInitTracker.stopTracking(GRAPHICS_INIT_TRACKER_NAME);
	cout << "Graphics system initialization took: " << graphicsInitTracker.getElapsedTime(GRAPHICS_INIT_TRACKER_NAME) << " ms\n";
	graphicsInitTracker.clearTracker(GRAPHICS_INIT_TRACKER_NAME);

	return true;
}


void GraphicsSystem::deinit()
{
	al_destroy_display(mpDisplay);
	mpDisplay = nullptr;

	delete mpBackBuffer;
	mpBackBuffer = nullptr;

	al_shutdown_ttf_addon();
	al_shutdown_font_addon();
	al_shutdown_image_addon();

	mIsActive = false;
}


int GraphicsSystem::getHeight() const
{
	assert(mIsActive);
	assert(mpDisplay);
	return al_get_display_height(mpDisplay);
}


int GraphicsSystem::getWidth() const
{
	assert(mIsActive);
	assert(mpDisplay);
	return al_get_display_width(mpDisplay);
}


GraphicsBuffer* GraphicsSystem::getBackBuffer() const
{
	assert(mIsActive);
	assert(mpDisplay);
	assert(mpBackBuffer);

	return mpBackBuffer;
}


void GraphicsSystem::flip()
{
	assert(mIsActive);
	assert(mpDisplay);
	al_flip_display();
}


void GraphicsSystem::draw(Vector2D position, Sprite* pSource, double xScale, double yScale)
{
	assert(mIsActive);
	assert(mpDisplay);

	ALLEGRO_BITMAP* current = al_get_target_bitmap();
	al_set_target_bitmap(al_get_backbuffer(mpDisplay));

	Vector2D sPos = pSource->getAnchor();
	int sx = sPos.getX();
	int sy = sPos.getY();

	int sh = pSource->getHeight();
	int sw = pSource->getWidth();

	int dx = position.getX();
	int dy = position.getY();

	ALLEGRO_BITMAP* source = pSource->getBuffer()->mpBitmap;
	assert(source);

	al_draw_scaled_bitmap(source, sx, sy, sw, sh, dx, dy, sw * xScale, sh * yScale, 0);

	al_set_target_bitmap(current);
}


void GraphicsSystem::draw(Vector2D position, GraphicsBuffer* pSource, double xScale, double yScale)
{
	assert(mIsActive);
	assert(mpDisplay);

	ALLEGRO_BITMAP* current = al_get_target_bitmap();
	al_set_target_bitmap(al_get_backbuffer(mpDisplay));

	// Default to 0,0 for graphics buffers
	int sx = 0;
	int sy = 0;

	int sh = pSource->getHeight();
	int sw = pSource->getWidth();

	int dx = position.getX();
	int dy = position.getY();

	al_draw_scaled_bitmap(pSource->mpBitmap, sx, sy, sw, sh, dx, dy, sw * xScale, sh * yScale, 0);

	al_set_target_bitmap(current);
}


void GraphicsSystem::draw(GraphicsBuffer* pTarget, Vector2D position, Sprite* pSource, double xScale, double yScale)
{
	assert(mIsActive);
	assert(mpDisplay);

	ALLEGRO_BITMAP* current = al_get_target_bitmap();
	al_set_target_bitmap(pTarget->mpBitmap);

	Vector2D sPos = pSource->getAnchor();
	int sx = sPos.getX();
	int sy = sPos.getY();

	int sh = pSource->getHeight();
	int sw = pSource->getWidth();

	int dx = position.getX();
	int dy = position.getY();

	ALLEGRO_BITMAP* source = pSource->getBuffer()->mpBitmap;

	al_draw_scaled_bitmap(source, sx, sy, sw, sh, dx, dy, sw * xScale, sh * yScale, 0);

	al_set_target_bitmap(current);
}


void GraphicsSystem::draw(GraphicsBuffer* pTarget, Vector2D position, GraphicsBuffer* pSource, double xScale, double yScale)
{
	assert(mIsActive);
	assert(mpDisplay);

	ALLEGRO_BITMAP* current = al_get_target_bitmap();
	al_set_target_bitmap(pTarget->mpBitmap);

	// Default to 0,0 for graphics buffers
	int sx = 0;
	int sy = 0;

	int sh = pSource->getHeight();
	int sw = pSource->getWidth();

	int dx = position.getX();
	int dy = position.getY();

	al_draw_scaled_bitmap(pSource->mpBitmap, sx, sy, sw, sh, dx, dy, sw * xScale, sh * yScale, 0);

	al_set_target_bitmap(current);
}


void GraphicsSystem::writeText(Vector2D position, Font* pFont, const Color& color, const string& text)
{
	assert(mIsActive);
	assert(mpDisplay);

	ALLEGRO_BITMAP* current = al_get_target_bitmap();
	al_set_target_bitmap(al_get_backbuffer(mpDisplay));

	int posX = position.getX();
	int posY = position.getY();

	al_draw_text(pFont->mpFont, color.mInternalColor, posX, posY, ALLEGRO_ALIGN_CENTER, text.c_str());

	al_set_target_bitmap(current);
}


void GraphicsSystem::writeText(GraphicsBuffer* pTarget, Vector2D position, Font* pFont, const Color& color, const string& text)
{
	assert(mIsActive);
	assert(mpDisplay);

	ALLEGRO_BITMAP* current = al_get_target_bitmap();
	al_set_target_bitmap(pTarget->mpBitmap);

	int posX = position.getX();
	int posY = position.getY();

	al_draw_text(pFont->mpFont, color.mInternalColor, posX, posY, ALLEGRO_ALIGN_CENTER, text.c_str());

	al_set_target_bitmap(current);
}


void GraphicsSystem::saveBuffer(const string& filename)
{
	assert(mIsActive);

	GraphicsBuffer* pBuffer = getBackBuffer();
	assert(pBuffer->mpBitmap);

	al_save_bitmap(filename.c_str(), pBuffer->mpBitmap);
	pBuffer = nullptr;
}


void GraphicsSystem::saveBuffer(GraphicsBuffer* pBuffer, const string& filename)
{
	assert(pBuffer->mpBitmap);

	al_save_bitmap(filename.c_str(), pBuffer->mpBitmap);
}
