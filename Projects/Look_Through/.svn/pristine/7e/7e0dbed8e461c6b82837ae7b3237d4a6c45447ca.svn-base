#include "Game.h"

Game* Game::mpsInstance = nullptr;

void Game::createInstance(int width, int height)
{
	if (mpsInstance == nullptr)
	{
		mpsInstance = new Game;
		mpsInstance->init(width, height);
	}
}

void Game::destroyInstance()
{
	delete mpsInstance;
	mpsInstance = nullptr;
}

Game*Game::getGame()
{
	return mpsInstance;
}


Game::Game()
{
	mpDisplay = nullptr;
	mInputSystem.init();
}

Game::~Game()
{
	cleanup();
}

void Game::init(int width, int height)
{
	mpDisplay = new GraphicsSystem(width, height);

	mBufferManager.addBuffer(BACKGROUND_KEY, BACKGROUND_FILENAME);
	mBufferManager.addBuffer(SMURF_KEY, SMURF_FILENAME);
	mBufferManager.addBuffer(DEAN_KEY, DEAN_FILENAME);
}

void Game::cleanup()
{
	//do in reverse order of init
	mUnitManager.clear();

	mBufferManager.clear();

	mpDisplay->cleanup();
	delete mpDisplay;
}

void Game::getInputs(Vector2D &mousePos)
{
	if (mInputSystem.getMouseDown(MouseCode::LEFT))
	{
		mousePos = mInputSystem.getMousePos();
		Unit* newUnit = new Unit(SMURF_KEY, DEAN_KEY, mousePos);
		mUnitManager.addUnit(newUnit);
	}

	if (mInputSystem.getMouseDown(MouseCode::RIGHT))
	{
		Vector2D tmp;
		for (int i = 0; i < mUnitManager.getSize(); i++)
		{
			if (tmp.getDistanceBetween(mUnitManager.getUnit(i)->getPos(), mInputSystem.getMousePos()) <= DISTANCE)
			{
				mUnitManager.removeUnit(mUnitManager.getUnit(i));
			}
		}
	}

	if (mInputSystem.getKeyState(KeyCode::SPACE))
	{
		if (!spacePressed)
		{
			spacePressed = true;
			mUnitManager.toggleAnim();
		}
	}
	else
		spacePressed = false;

	//escape
	keepGoing = !(mInputSystem.getKeyState(KeyCode::ESCAPE));

	//change which animation
	if (mInputSystem.getKeyState(KeyCode::ENTER))
	{
		if (!enterPressed)
		{
			enterPressed = true;
			mUnitManager.changeAnim();
		}
	}
	else
		enterPressed = false;
	//end inputs
}


void Game::doLoop()
{
	PerformanceTracker* pTracker = new PerformanceTracker;

	Timer loopTimer;

	Vector2D mousePos = Vector2D((DISP_WIDTH / 2) + (SPRITE_WIDTH / 2), (DISP_HEIGHT / 2) + (SPRITE_HEIGHT / 2));

	while (keepGoing)
	{
		//start loop
		pTracker->clearTracker("loop");
		pTracker->startTracking("loop");

		getInputs(mousePos);

		//update
		mUnitManager.updateAll(SLEEP_MS);

		//draw
		mpDisplay->draw(mBufferManager.getBuffer(BACKGROUND_KEY), 0, 0, .5);
		mUnitManager.drawAll(mpDisplay);
		mpDisplay->flip();

		//sleep
		loopTimer.sleepUntilElapsed(SLEEP_MS);
		pTracker->stopTracking("loop");
		
		//cout << "Frame Took:" << pTracker->getElapsedTime("loop") << " ms" << endl;
	}

	delete pTracker;
}

GraphicsBufferManager* Game::getBufferManager()
{
	return &mBufferManager;
}