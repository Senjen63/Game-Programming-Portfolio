#pragma once

#include <Trackable.h>
#include "GraphicsSystem.h"
#include "InputSystem.h"
#include "EntityManager.h"
#include "GraphicsBufferManager.h"

class Game : public Trackable
{
public:
    Game() = delete;
    Game(const Game&) = delete;
    void operator=(const Game&) = delete;

    static void createInstance(int screenWidth, int screenHeight, float frameRate);
    static void destoryInstance();
    static Game* getInstance();

    GraphicsSystem* getGraphicsSystem() { return mpGraphicsSystem; }
    InputSystem* getInputSystem() { return mpInputSystem; }
    EntityManager* getEntityManager() { return mpEntityManager; }

    void init();
    void cleanUp();

    void doLoop();

private:
    // Game Specific 
    void gameSpecificCreatation();
    void gameSpecificUpdate();

    Game(int screenWidth, int screenHeight, float frameRate);
    ~Game();

    static Game* smpInst;

    double mFrameTargetTime;
    bool mIsInitted = false;

    GraphicsSystem* mpGraphicsSystem = nullptr;
    InputSystem* mpInputSystem = nullptr;
    EntityManager* mpEntityManager = nullptr;
    GraphicsBufferManager* mpGraphicsBufferManager = nullptr;

    // Game Specific 
    std::vector<Animation> mAnims;
    bool mPauseAnims = false;
};

const std::string LOOP_TRACKER_NAME = "Loop";
