#include "graphicsBufferManager.h"

GraphicsBufferManager::GraphicsBufferManager()
{

}
GraphicsBufferManager::~GraphicsBufferManager()
{
    cleanup();
}
void GraphicsBufferManager::cleanup()
{
    clear();
}void GraphicsBufferManager::clear()
{
    for (auto item : mBufferMap)
    {
        delete item.second;
    }
    mBufferMap.clear();
}
void GraphicsBufferManager::addGraphicsBuffer(GraphicsBufferKey key, GraphicsBuffer* newGB)
{
    if (mBufferMap.find(key) == mBufferMap.end())
    {
        mBufferMap[key] = newGB;
    }
}
void GraphicsBufferManager::deleteBuffer(GraphicsBuffer* newGB)
{
    for (auto item : mBufferMap)
    {
        if (item.second == newGB)
        {
            delete item.second;
            mBufferMap.erase(item.first);
            break;
        }
    }
}
void GraphicsBufferManager::deleteBuffer(GraphicsBufferKey key)
{
    auto target = mBufferMap.find(key);

    if (target != mBufferMap.end())
    {
        delete target->second;
        mBufferMap.erase(target);
    }
}
GraphicsBuffer* GraphicsBufferManager::getBuffer(GraphicsBufferKey key)
{
    if (mBufferMap.find(key) != mBufferMap.end())
    {
        return mBufferMap[key];
    }
    else
    {
        return NULL;
    }
}