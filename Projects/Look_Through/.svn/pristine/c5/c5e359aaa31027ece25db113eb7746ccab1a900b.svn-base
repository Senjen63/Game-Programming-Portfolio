#pragma once
#include <iostream>
#include <cassert>
#include <string>
#include <vector>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>

#include "Sprite.h"
#include "GraphicsBuffer.h"

using namespace std;

const bool DEFAULT_LOOP_MODE = true;

class Animation : public Trackable
{
private:
	// We don't currently need to keep the spriteSheet but might as well keep it around in case we do in the future.
	Sprite* mpSprite;

	vector<Vector2D> mSpriteAnchors;
	unsigned int mCurrentFrame;

	bool mLoopAnim;

	float mLag;
	float mDuration;

public:
	Animation();
	Animation(GraphicsBuffer*pSpriteSheet, Vector2D spriteDimensions, float duration, bool loop = DEFAULT_LOOP_MODE);
	~Animation();

	float getDuration();
	Sprite* getCurrentSprite();

	void setDuration(float duration);
	void setSpriteSheet(GraphicsBuffer* pSpriteSheet);

	void update(float dt);
};
