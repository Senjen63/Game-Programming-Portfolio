#include "Game.h"
#include <PerformanceTracker.h>
#include <Timer.h>

#include "Unit.h"

using namespace std;

Game::Game() 
{
	mGraphics = nullptr;
	mInputs = nullptr;
	mFPS = 16.67; //60fps default
}

Game::Game(int width, int height, double fps)
{
	mGraphics = new GraphicsSystem(width, height);
	mInputs = new InputSystem();
	mFPS = fps;
}

Game::~Game()
{
	delete mGraphics;
	delete mInputs;
}

bool Game::init()
{
	if (mGraphics->init() == 1) { return 1; }
	mInputs->init();

	return 0;
}

void Game::cleanup()
{
	mGraphics->cleanup();
	mInputs->cleanup();
}

void Game::doLoop() 
{

	//setup for main game loop
	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string BACKGROUND_FILENAME = "woods.png";
	const string SMURF_FILENAME = "smurf_sprites.png";
	const string DEAN_FILENAME = "dean_sprites.png";
	const string FONT_FILENAME = "cour.ttf";
	const float SCALE_FACTOR = 0.67f;

	const int SMURF_ROWS = 4;
	const int SMURF_COLS = 4;
	const int SMURF_SPRITE_COUNT = 16;
	const int SMURF_SIZE = 60;
	const double UNIT_SPEED_VALUE = 0.167;

	GraphicsBuffer* background = new GraphicsBuffer(ASSET_PATH + BACKGROUND_FILENAME);
	GraphicsBuffer* smurfs = new GraphicsBuffer(ASSET_PATH + SMURF_FILENAME);
	GraphicsBuffer* deans = new GraphicsBuffer(ASSET_PATH + DEAN_FILENAME);

	Sprite bgroundSpr = Sprite(background, 0, 0);
	Sprite smurfSpr[SMURF_SPRITE_COUNT];
	Sprite deanSpr[SMURF_SPRITE_COUNT];

	int spotInSpriteArray = 0;

	for (int i = 0; i < SMURF_ROWS; i++)
	{
		for (int j = 0; j < SMURF_COLS; j++)
		{
			smurfSpr[spotInSpriteArray] = Sprite(smurfs, j * SMURF_SIZE, i * SMURF_SIZE, SMURF_SIZE, SMURF_SIZE);
			deanSpr[spotInSpriteArray] = Sprite(deans, j * SMURF_SIZE, i * SMURF_SIZE, SMURF_SIZE, SMURF_SIZE);
			spotInSpriteArray++;
		}
	}

	bool deanAnim = false;
	Animation* unitAnimOne = new Animation(UNIT_SPEED_VALUE, 1);
	Animation* unitAnimTwo = new Animation(UNIT_SPEED_VALUE, 1);

	for (int i = 0; i < SMURF_SPRITE_COUNT; i++) {
		unitAnimOne->addSprite(smurfSpr[i]);
		unitAnimTwo->addSprite(deanSpr[i]);
	}

	Unit mainUnit = Unit(mGraphics->getWidth() / 2, mGraphics->getHeight() / 2, unitAnimOne); //center of screen
	
	//game loop
	bool looping = true;

	double currentLoopTime;
	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;

	bool keepRunning = true;
	Timer timer;

	//bools to stop inputs from running each frame
	bool fPressed = false;
	bool sPressed = false;
	bool enterPressed = false;

	while (looping) {
		pPerformanceTracker->clearTracker("loop");
		pPerformanceTracker->startTracking("loop");

		Timer loopTimer;
		loopTimer.start();

		//#1 - get user input
		if (mInputs->getKeyState(ALLEGRO_KEY_F)) 
		{
			if (!fPressed) 
			{
				if (!deanAnim) { unitAnimOne->speedUp(); }
				else { unitAnimTwo->speedUp(); }

				fPressed = true;
			}
		}
		else { fPressed = false; }

		if (mInputs->getKeyState(ALLEGRO_KEY_S))
		{
			if (!sPressed)
			{
				if (!deanAnim) { unitAnimOne->slowDown(); }
				else { unitAnimTwo->slowDown(); }
				sPressed = true;
			}
		}
		else { sPressed = false; }

		if (mInputs->getKeyState(ALLEGRO_KEY_ENTER))
		{
			if (!enterPressed)
			{
				deanAnim = !deanAnim;

				if (deanAnim) { mainUnit.setAnimation(unitAnimTwo); }
				else { mainUnit.setAnimation(unitAnimOne); }

				enterPressed = true;
			}
		}
		else { enterPressed = false; }

		if (mInputs->getKeyState(ALLEGRO_KEY_ESCAPE))
		{
			looping = false;
		}

		if (mInputs->getMouseState(1))
		{
			mainUnit.setPosition(mInputs->getMouseX() - (SMURF_SIZE / 2), mInputs->getMouseY() - (SMURF_SIZE / 2));
		}

		//#2 - adjust game state
		mainUnit.update();

		//#3 - draw current game state
		mGraphics->draw(0, 0, bgroundSpr, (mGraphics->getWidth() / float(background->getWidth())));
		mainUnit.draw();

		mGraphics->flip();

		//#4 - wait until target time has elapsed
		loopTimer.sleepUntilElapsed(mFPS);
		pPerformanceTracker->stopTracking("loop");
		cout << "Frame Took:" << pPerformanceTracker->getElapsedTime("loop") << " ms" << endl;
	}

	delete unitAnimOne;
	delete unitAnimTwo;
	delete smurfs;
	delete deans;
	delete background;

	delete pPerformanceTracker;
}

Game* gGame = nullptr;