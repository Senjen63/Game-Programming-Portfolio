#include "GraphicsSystem.h"


GraphicsSystem::GraphicsSystem(int width, int height)
{
	init();

	pDisplay = al_create_display(width, height);
	assert(pDisplay);
	mpBackBuffer = new GraphicsBuffer(al_get_backbuffer(pDisplay));
}

GraphicsSystem::~GraphicsSystem()
{
	al_destroy_display(pDisplay);

	delete mpBackBuffer;
}

void GraphicsSystem::init()
{
	if (!al_init())
	{
		throw new std::exception("error initting Allegro\n");
	}
	if (!al_init_image_addon())
	{
		throw new std::exception("error - Image Add-on not initted\n");
	}
	if (!al_init_font_addon())
	{
		throw new std::exception("error - Font Add-on not initted\n");
	}
	if (!al_init_ttf_addon())
	{
		throw new std::exception("error - TTF Add-on not initted\n");
	}
	if (!al_init_primitives_addon())
	{
		throw new std::exception("error - primitives Add-on not initted\n");
	}

}
void GraphicsSystem::cleanUp()
{
	al_destroy_display(pDisplay);
}

int GraphicsSystem::getHeight()
{
	return height;
}
int GraphicsSystem::getWidth()
{
	return width;
}
GraphicsBuffer* GraphicsSystem::getBackBuffer()
{
	return mpBackBuffer;
}

void GraphicsSystem::flip()
{
	al_flip_display();
}


void GraphicsSystem::Draw(Vector2D location, Sprite* sprite, float scale = 1.)
{
	al_set_target_bitmap(al_get_backbuffer(pDisplay));
	al_draw_scaled_bitmap(sprite->getBuffer()->getBackBuffer(), 0, 0, sprite->getWidth(), sprite->getHeight(), location.getX(), location.getY(), sprite->getWidth() * scale, sprite->getHeight() * scale, 0);
}


void GraphicsSystem::Draw(GraphicsBuffer* pBuff, Vector2D location, Sprite* sprite, float scale = 1.)
{
	al_set_target_bitmap(pBuff->mpBitmap);
	al_draw_scaled_bitmap(sprite->getBuffer()->mpBitmap, 0, 0, sprite->getWidth(), sprite->getHeight(), location.getX(), location.getY(), sprite->getWidth() * scale, sprite->getHeight() * scale, 0);
}


void GraphicsSystem::WriteText(Vector2D location, Font* font, Color* color, std::string msg)
{
	al_set_target_bitmap(al_get_backbuffer(pDisplay));
	al_draw_text(font->getFont(), color->getColor(), location.getX(), location.getY(), ALLEGRO_ALIGN_CENTER, msg.c_str());

}
void GraphicsSystem::WriteText(GraphicsBuffer* pBuff, Vector2D location, Font* pFont, Color* pColor, std::string msg)
{
	al_set_target_bitmap(pBuff->mpBitmap);
	al_draw_text(pFont->getFont(), pColor->getColor(), location.getX(), location.getY(), ALLEGRO_ALIGN_LEFT, msg.c_str());
}

void GraphicsSystem::saveBuffer(GraphicsBuffer* pBuffer, std::string fileName)
{
	al_save_bitmap(fileName.c_str(), pBuffer->mpBitmap);
}