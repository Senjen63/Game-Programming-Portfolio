#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

#include <iostream>
#include <cassert>
#include <string>
#include <random>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>

#include "GraphicsSystem.h"
#include "GraphicsBuffer.h"
#include "Font.h"
#include "Sprite.h"
#include "Color.h"

using namespace std;

int main()
{
	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;

	const string INIT_TRACKER_NAME = "init";
	const string DRAW_TRACKER_NAME = "draw";
	const string WAIT_TRACKER_NAME = "wait";

	srand(time(NULL));

	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;

	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string BACKGROUND_FILENAME = "steps.png";
	const string QUIMBY_FILENAME = "mayor_quimby.png";
	const string SMURF_FILENAME = "smurf_sprites.png";
	const string FONT_FILENAME = "cour.ttf";
	const int FONT_SIZE = 50;
	const double SLEEP_TIME = 5.0;

	GraphicsSystem* pDisplay = new GraphicsSystem();
	pDisplay->Init(DISP_WIDTH, DISP_HEIGHT);

	//Needs to be after graphics system init
	Font* pFont = new Font((ASSET_PATH + FONT_FILENAME), FONT_SIZE);
	const Color RED = Color(255, 0, 0);
	const Color BLACK = Color(0, 0, 0);


	GraphicsBuffer* pBackground = new GraphicsBuffer(ASSET_PATH + BACKGROUND_FILENAME);
	GraphicsBuffer* pSmurf = new GraphicsBuffer(ASSET_PATH + SMURF_FILENAME);
	GraphicsBuffer* pQuimby = new GraphicsBuffer(ASSET_PATH + QUIMBY_FILENAME);
	GraphicsBuffer* pRedMap = new GraphicsBuffer(RED, DISP_WIDTH, DISP_HEIGHT);


	pDisplay->Draw(pBackground);
	pDisplay->Draw(pRedMap, pQuimby, 0, 0, 1);
	pDisplay->WriteText(pRedMap, 320, 0, pFont, BLACK, "Curse you Papa Smurf!");
	pDisplay->Draw(pRedMap, 133, 100, (2.0/3.0));

	int numberOfSmurfs = 16;
	int xPosSmurf, yPosSmurf;

	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			xPosSmurf = i * 60;
			yPosSmurf = j * 60;

			Sprite* pSmurfs = new Sprite(pSmurf, xPosSmurf, yPosSmurf, 60, 60);

			pDisplay->Draw(xPosSmurf, yPosSmurf, pSmurfs, DISP_WIDTH, DISP_HEIGHT);

			delete pSmurfs;
		}
	}

	pDisplay->SaveBuffer(pDisplay->getBitMap(), "backbuffer.jpg");
	pDisplay->SaveBuffer(pRedMap->getBitmap(), "redbuffer.jpg");

	bool keepRunning = true;
	Timer timer;

	pDisplay->Flip();


	timer.sleep(5000.0);

	pPerformanceTracker->stopTracking("loop");
	//cout << "Frame Took:" << pPerformanceTracker->getElapsedTime("loop") << " ms" << endl;

	pPerformanceTracker->clearTracker("loop");

	delete pDisplay;
	delete pBackground;
	delete pSmurf;
	delete pQuimby;
	delete pRedMap;
	delete pFont;

	delete pPerformanceTracker;
	MemoryTracker::getInstance()->reportAllocations(cout);

	system("pause");
	return 0;
}