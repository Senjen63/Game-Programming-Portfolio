#pragma once

#include <PerformanceTracker.h>
#include <vector>
#include <iostream>
#include "GraphicsSystem.h"
#include "Unit.h"
#include "Vector2D.h"

using namespace std;

const float SPAWN_TIME = 500.0;

class Unit;

class UnitManager : public Trackable
{
private:
	vector<Unit*> mpUnits;
	int mNumUnits = 0;
	float mElapsedTime = 0.0;

public:
	UnitManager();
	~UnitManager();

	void cleanup();

	void createAndAddUnit(Animation* pAnim);
	void createAndAddUnit(GraphicsBuffer* pBuffer);
	void createAndAddUnit(GraphicsBuffer* pBuffer, Vector2D location, int width, int height, string text);
	void createAndAddUnit(GraphicsBuffer* pBuffer, Vector2D location);
	void setUnitPos(int index, Vector2D& position);
	void destroyUnit(Unit* pUnit);
	void deleteUnits(Vector2D position);
	bool detectUnits(Vector2D location);
	bool detectUnits();
	void update(float elapsedTime);
	void update(float elapsedTime, Vector2D newPos);
	void updateTiming(float amount);
	void doAnimation();
	void draw(GraphicsSystem* pGraphicsSystem);
	void drawWithText(GraphicsSystem* pGraphicsSystem, int index);
	Unit* getUnit();
	Unit* getUnit(int index);

	void changeBuffer(int index, GraphicsBuffer* buffer)		{ mpUnits[index]->changeBuffer(buffer);		};
	void changeColor(int index, Color color)					{ mpUnits[index]->changeColor(color);		};
	void setText(int index, string text)						{ mpUnits[index]->setText(text);			};
	string getText(int index)									{ return mpUnits[index]->getText();			};

	void setSprite(int index, Sprite* sprite)					{ mpUnits[index]->setSprite(sprite);		};
	void drawIndividual(GraphicsSystem* pDisplay, Unit* pUnit)	{ pUnit->draw(pDisplay);					};
	int getNumUnits()											{ return mNumUnits;							};
	Unit* getLastUnit()											{ return mpUnits[mNumUnits];				};
	Vector2D getPosition(int index)								{ return mpUnits[index]->getPosition();		};
	float getTiming()											{ return mpUnits[0]->getTiming();			};

	void setLast()												{ mpUnits[mNumUnits - 1]->setAnimation();	};

	friend class Game;
};