#include "StartMenu.h"
#include "Game.h"
#include "UnitManager.h"
#include "ButtonComponent.h"
#include "IButtonListener.h"
#include <fstream>

const string START_MENU_FILE = "Data\\StartMenu.txt";
const int WORDS = 4;

void StartMenu::init()
{
	std::ifstream input;// = std::ifstream(SETTINGS_MENU_FILE);
	input.open(START_MENU_FILE);

	if (!input.good())
	{
		throw "Start menu init failed";
	}

	std::string line;

	while (!input.eof())
	{
		input >> line;

		if (line == "ENGLISH")
		{
			for (int i = 0; i < WORDS; i++)
			{
				std::string key, word;
				input >> key >> word;
				mEnglish[key] = word;
			}
			input >> line;
			mLanguages.push_back(mEnglish);
		}
		if (line == "SPANISH")
		{
			for (int i = 0; i < WORDS; i++)
			{
				std::string key, word;
				input >> key >> word;
				mSpanish[key] = word;
			}
			input >> line;
			mLanguages.push_back(mSpanish);
		}
		if (line == "POLISH")
		{
			for (int i = 0; i < WORDS; i++)
			{
				std::string key, word;
				input >> key >> word;
				mPolish[key] = word;
			}
			input >> line;
			mLanguages.push_back(mPolish);
		}
	}


	UnitManager* uMan = Game::getInstance()->getUnitManager();
	GraphicsBufferManager* gbManager = Game::getInstance()->getGraphicsBufferManager();
	AnimationManager* aManager = Game::getInstance()->getAnimationManager();

	// Setting up play button
	std::vector<Sprite> playButtonSprites;
	playButtonSprites.push_back(Sprite(&gbManager->getGraphicsBuffer("PlayButtonBuffer")));
	aManager->addAnimationFrames("PlayButtonFrames", playButtonSprites);
	Animation playButtonAnimation = *aManager->addAnimation("PlayButtonAnim", "PlayButtonFrames", 1, true);
	std::unordered_map<std::string, Animation> playButtonAnims;
	playButtonAnims["PlayButtonAnim"] = playButtonAnimation;

	UnitParameters playButtonParams = UnitParameters(Vector2D(100, 250), playButtonAnims, "PlayButtonAnim");

	// Setting up options button
	std::vector<Sprite> optionsButtonSprites;
	optionsButtonSprites.push_back(Sprite(&gbManager->getGraphicsBuffer("OptionsButtonBuffer")));
	aManager->addAnimationFrames("OptionsButtonFrames", optionsButtonSprites);
	Animation optionsButtonAnimation = *aManager->addAnimation("OptionsButtonAnim", "OptionsButtonFrames", 1, true);
	std::unordered_map<std::string, Animation> optionsButtonAnims;
	optionsButtonAnims["OptionsButtonAnim"] = optionsButtonAnimation;

	UnitParameters optionsButtonParams = UnitParameters(Vector2D(100, 600), optionsButtonAnims, "OptionsButtonAnim");

	// Setting up load button
	std::vector<Sprite> loadButtonSprites;
	loadButtonSprites.push_back(Sprite(&gbManager->getGraphicsBuffer("LoadButtonBuffer")));
	aManager->addAnimationFrames("LoadButtonFrames", loadButtonSprites);
	Animation loadButtonAnimation = *aManager->addAnimation("LoadButtonAnim", "LoadButtonFrames", 1, true);
	std::unordered_map<std::string, Animation> loadButtonAnims;
	loadButtonAnims["LoadButtonAnim"] = loadButtonAnimation;

	UnitParameters loadButtonParams = UnitParameters(Vector2D(450, 250), loadButtonAnims, "LoadButtonAnim");

	// Setting up quit button
	std::vector<Sprite> quitButtonSprites;
	quitButtonSprites.push_back(Sprite(&gbManager->getGraphicsBuffer("QuitButtonBuffer")));
	aManager->addAnimationFrames("QuitButtonFrames", quitButtonSprites);
	Animation quitButtonAnimation = *aManager->addAnimation("QuitButtonAnim", "QuitButtonFrames", 1, true);
	std::unordered_map<std::string, Animation> quitButtonAnims;
	quitButtonAnims["QuitButtonAnim"] = quitButtonAnimation;

	UnitParameters quitButtonParams = UnitParameters(Vector2D(450, 600), quitButtonAnims, "QuitButtonAnim");

	// Creating buttons

	std::vector<Component*> playButtonComponents;
	playButtonComponents.push_back(new ButtonComponent("PlayButton", getWord("Start")));
	Unit& playButton = uMan->createUnit(playButtonParams, playButtonComponents);
	((ButtonComponent*)&playButton.getComponent("ButtonComponent"))->subscribeListener(this);
	
	std::vector<Component*> optionsButtonComponents;
	optionsButtonComponents.push_back(new ButtonComponent("OptionsButton", getWord("Settings")));
	Unit& optionsButton = uMan->createUnit(optionsButtonParams, optionsButtonComponents);
	((ButtonComponent*)&optionsButton.getComponent("ButtonComponent"))->subscribeListener(this);
	
	std::vector<Component*> loadButtonComponents;
	loadButtonComponents.push_back(new ButtonComponent("LoadButton", getWord("Load")));
	Unit& loadButton = uMan->createUnit(loadButtonParams, loadButtonComponents);
	((ButtonComponent*)&loadButton.getComponent("ButtonComponent"))->subscribeListener(this);

	std::vector<Component*> quitButtonComponents;
	quitButtonComponents.push_back(new ButtonComponent("QuitButton", getWord("Quit")));
	Unit& quitButton = uMan->createUnit(quitButtonParams, quitButtonComponents);
	((ButtonComponent*)&quitButton.getComponent("ButtonComponent"))->subscribeListener(this);
}


void StartMenu::cleanup()
{
}


void StartMenu::onButtonPressed(std::string buttonID)
{
	if (buttonID == "PlayButton")
	{
		Game::getInstance()->changeCurrentScreen(ScreenType::MAIN_GAME);
	}
	if (buttonID == "OptionsButton")
	{
		Game::getInstance()->changeCurrentScreen(ScreenType::SETTINGS);
		cout << "SETTINGS";
	}
	if (buttonID == "LoadButton")
	{
		Game::getInstance()->changeCurrentScreen(ScreenType::LOADED_MAIN_GAME);
		cout << "LOAD";
	}
	if (buttonID == "QuitButton")
	{
		Game::getInstance()->setGameRunStatus(false);
	}
}

std::string StartMenu::getWord(std::string text)
{
	unordered_map<std::string, std::string> test = getCurLangStrings();
	string texttest = test[text];
	return texttest;
}
