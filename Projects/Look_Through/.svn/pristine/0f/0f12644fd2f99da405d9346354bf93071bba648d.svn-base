#pragma once

#include "SDLInclude.h"

#include <PerformanceTracker.h>
#include <MemoryTracker.h>

#include <iostream>
#include <Vector2D.h>
#include "Sprite.h"
#include "Color.h"
#include "Font.h"

using namespace std;

const int DISP_WIDTH = 800;
const int DISP_HEIGHT = 800;

class GraphicsSystem : public Trackable
{
private:
	SDL_Window* mpDisplay;
	SDL_Renderer* mpRenderer;

	SDL_Window* getBackBuffer();
	SDL_Surface* getBitmap();

public:
	GraphicsSystem();
	GraphicsSystem(int height, int width);
	~GraphicsSystem();

	int init(int height, int width);
	void cleanUp();

	int getHeight();
	int getWidth();

	void flip();
	void clearFrame();

	void draw(GraphicsBuffer* pBuffer);
	void draw(Vector2D location, Sprite* pSprite);
	void draw(Vector2D location, Sprite* sprite, int xLoc, int yLoc);
	//void draw(GraphicsBuffer* pBuffer, Vector2D location, float scale);
	void draw(GraphicsBuffer* pTarget, GraphicsBuffer* pBuffer, Vector2D location, float scale);
	//void draw(GraphicsBuffer* pGraphicsBuffer, Vector2D location, Sprite* pSprite, float scale);

	void writeText(Vector2D location, Font* pFont, Color color, string text);
	//void writeText(GraphicsBuffer* pGraphicsBuffer, Vector2D location, Font* pFont, Color color, string text);

	//void saveBuffer(GraphicsBuffer* pBuffer, string fileName);

};