#include "UnitManager.h"

UnitManager::UnitManager()
{
	mUnitCount = 0;
}

UnitManager::~UnitManager()
{
	cleanup();
}

void UnitManager::cleanup()
{
	for (int i = 0; unsigned(i) < mpUnits.size(); i++)
	{
		mpUnits[i] = nullptr;
	}
	mpUnits.clear();
}

void UnitManager::addUnit(Vector2D location, Animation* pAnimation1, Animation* pAnimation2)
{
	Unit* pUnit = new Unit(pAnimation1, pAnimation2, location);
	mpUnits.push_back(pUnit);
	mUnitCount++;
}

void UnitManager::deleteUnit(Vector2D location)
{
	int mouseX = location.getX();
	int mouseY = location.getY();
	int unitNum = 0;
	int locationX, locationY;
	bool inWidth = true, inHeight = true;
	int spriteWidth = 60;
	int spriteHeight = 60;
	for (int i = 0; unsigned(i) < mpUnits.size(); i++)
	{
		locationX = mpUnits[i]->getPosition().getX();
		locationY = mpUnits[i]->getPosition().getY();
		bool inWidth = locationX <= mouseX  && locationX > mouseX - spriteWidth;
		bool inHeight = locationY <= mouseY && locationY > mouseY - spriteHeight;
		if (inWidth && inHeight)
		{
			mpUnits[i] = nullptr;
		}
		unitNum++;
	}
	
}

void UnitManager::updateAll(float time)
{
	for (int i = 0; unsigned(i) < mpUnits.size(); i++)
	{
		if(mpUnits[i]!= nullptr)
			mpUnits[i]->update(time);
	}
}

void UnitManager::drawAll(GraphicsSystem* pGraphicsSystem)
{
	for (int i = 0; unsigned(i) < mpUnits.size(); i++)
	{
		if (mpUnits[i] != nullptr)
		{
			mpUnits[i]->draw(pGraphicsSystem);
		}
	}
}

Unit* UnitManager::getLastUnit()
{
	return mpUnits.back();
}

int UnitManager::getUnitCount()
{
	return mUnitCount;
}

void UnitManager::setPause()
{
	for (int i = 0; unsigned(i) < mpUnits.size(); i++)
	{
		if (mpUnits[i] != nullptr)
		{
			mpUnits[i]->setPaused();
		}
	}
}