#pragma once
#include <cmath>

#include <Trackable.h>
#include <EventSystem.h>

#include "UnitManager.h"
#include "ScoreEvent.h"
#include "TurnEvent.h"
#include "SpawnSnakeEvent.h"
#include "CollisionEvent.h"
#include "SnakeUnit.h"

class Snake : public EventListener
{
	private:
		vector<SnakeUnit*> mSnakeStorage;

		EventSystem* mpEventSystem = nullptr;

		GraphicsBuffer* mpHeadBuffer = nullptr;
		GraphicsBuffer* mpBodyBuffer = nullptr;

		float mBaseSnakeSpeed = 0;
		float mSnakeSpeed = 0;
		unsigned int mStartSegmentNum = 0;
		unsigned int mScore = 0;
		unsigned int mEndSegmentNum = 0;
		int mFoodValue = 0;

		bool mDead = false;

		Vector2D mInitialSpawnLocation = Vector2D(0, 0);

		Vector2D mInitialDirection = Vector2D(1, 0);

	public:
		Snake();
		Snake(Vector2D initialSpawnLocation, Vector2D initialDirection, GraphicsBuffer* head, GraphicsBuffer* tail);
		~Snake();

		void init();
		void cleanup();

		float getSnakeSpeed() { return mSnakeSpeed; }
		unsigned int getStartSegmentNum() { return mStartSegmentNum; }
		unsigned int getEndSegmentNum() { return mEndSegmentNum; }
		SnakeUnit* getSnakeHead();
		SnakeUnit* getSnakeTail();
		bool isDead() { return mDead; };

		void setSnakeSpeed(float snakeSpeed);
		void setStartSegmentNum(unsigned int startSegments) { mStartSegmentNum = startSegments; }
		void setEndSegmentNum(unsigned int endSegments) { mEndSegmentNum = endSegments; }

		virtual void handleEvent(const Event& currentEvent);

		void updateSnake(float timeElapsed);
		void addSegments(unsigned int count, bool usePoints);
		void addPoints(unsigned int count);
		void clearSnake();
		void resetSnake();
		void startNewLevel(float snakeSpeed, unsigned int startSegments, unsigned int endSegments, int foodValue);
};