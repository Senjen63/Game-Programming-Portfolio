#include "GraphicsSystem.h"

GraphicsSystem::GraphicsSystem()
{
	mpWindow = nullptr;
	mpRenderer = nullptr;

	mWidth = 0;
	mHeight = 0;
}

GraphicsSystem::~GraphicsSystem()
{
	cleanup();
}

void GraphicsSystem::init(int width, int height)
{
	// Initialize SDL
	if (SDL_Init(SDL_INIT_EVERYTHING) < 0)
	{
		printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
	}
	else
	{
		mWidth = width;
		mHeight = height;

		// Create window
		// (window caption, x pos, y pos, width, height, creation flag)
		mpWindow = SDL_CreateWindow("Feeding Friends-E", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, mWidth, mHeight, SDL_WINDOW_SHOWN);

		if (mpWindow == NULL)
		{
			printf("Window could not be created! SDL_Error: %s\n", SDL_GetError());
		}
		else
		{
			// (window where render is displayed, index of the rendering driver, render flag)
			mpRenderer = SDL_CreateRenderer(mpWindow, -1, SDL_RENDERER_ACCELERATED);
		}
	}

	// Initialize image type .png
	if (!(IMG_Init(IMG_INIT_PNG) & IMG_INIT_PNG))
	{
		std::cout << "Failed to initialize SDL_image for PNG files: " << IMG_GetError() << std::endl;
	}

	// Initialize TTF
	if (TTF_Init() < 0)
	{
		std::cout << "Error initializing SDL_ttf: " << TTF_GetError() << std::endl;
	}
}

void GraphicsSystem::cleanup()
{
	// Destroy display and free up the memoryindow)
	SDL_DestroyWindow(mpWindow);
	mpWindow = nullptr;

	// ERROR RIGHT HERE
	//SDL_DestroyRenderer(mpRenderer);
	mpRenderer = nullptr;

	TTF_Quit();
	IMG_Quit();
	//SDL_Quit();
}

void GraphicsSystem::flip()
{
	// Update the window (basically flips the screen)
	SDL_RenderPresent(mpRenderer);
	SDL_RenderClear(mpRenderer);
}

// Draw a sprite
void GraphicsSystem::draw(int posX, int posY, Sprite sprite, int scaleX, int scaleY)
{
	// how the texture originally is
	SDL_Rect srcR;
	// how the texture is going to be formatted when drawn
	SDL_Rect destR;

	// (originX, originY, width, height)
	srcR.x = sprite.getX();
	srcR.y = sprite.getY();
	srcR.w = sprite.getWidth();
	srcR.h = sprite.getHeight();

	// (posX, posY, scaleX, scaleY)
	destR.x = posX;
	destR.y = posY;
	destR.w = sprite.getWidth() / scaleX;
	destR.h = sprite.getHeight() / scaleY;

	SDL_Texture* tempText = SDL_CreateTextureFromSurface(mpRenderer, sprite.getBuffer()->getSurface());

	// (rendering context, source texture, src rect, dest rect)
	SDL_RenderCopy(mpRenderer, tempText, &srcR, &destR);

	SDL_DestroyTexture(tempText);
}

// Draw the background
void GraphicsSystem::draw(GraphicsBuffer* buffer, int width, int height, int posX, int posY, int scaleX, int scaleY)
{
	// how the texture originally is
	SDL_Rect srcR;
	// how the texture is going to be formatted when drawn
	SDL_Rect destR;

	// (originX, originY, width, height)
	srcR.x = 0;
	srcR.y = 0;
	srcR.w = width;
	srcR.h = height;

	// (posX, posY, scaleX, scaleY)
	destR.x = posX;
	destR.y = posY;
	destR.w = buffer->getWidth() / scaleX;
	destR.h = buffer->getHeight() / scaleY;

	//PROBLEM
	SDL_Texture* tempText = SDL_CreateTextureFromSurface(mpRenderer, buffer->getSurface());

	// (rendering context, source texture, src rect, dest rect)
	SDL_RenderCopy(mpRenderer, tempText, NULL, &destR);
	SDL_DestroyTexture(tempText);
}

// Write to given graphicsbuffer
void GraphicsSystem::writeText(int posX, int posY, Font* font, Color color, std::string text)
{
	SDL_Surface* tempSurf = TTF_RenderText_Solid(font->getFont(), text.c_str(), color.getColor());

	if (tempSurf == NULL)
	{
		printf("Unable to render text surface! SDL_ttf Error: %s\n", TTF_GetError());
	}

	SDL_Texture* tempText = SDL_CreateTextureFromSurface(mpRenderer, tempSurf);

	if (tempText == NULL)
	{
		printf("Unable to create texture from rendered text! SDL Error: %s\n", SDL_GetError());
	}

	SDL_Rect destR;

	// (posX, posY, scaleX, scaleY)
	destR.x = posX;
	destR.y = posY;
	destR.w = tempSurf->w;
	destR.h = tempSurf->h;

	tempText = SDL_CreateTextureFromSurface(mpRenderer, tempSurf);

	// (rendering context, source texture, src rect, dest rect)
	SDL_RenderCopy(mpRenderer, tempText, NULL, &destR);

	SDL_FreeSurface(tempSurf);
	SDL_DestroyTexture(tempText);

}