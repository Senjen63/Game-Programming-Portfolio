#include "UnitManager.h"

UnitManager::UnitManager()
{
	mMaxUnitCount = 0;
	mUnitCount = 0;
}

UnitManager::UnitManager(int maxUnitCount)
{
	mMaxUnitCount = maxUnitCount;
	mUnitCount = 0;
}

UnitManager::~UnitManager()
{
	cleanup();
}

void UnitManager::cleanup()
{
	for (int i = 0; unsigned(i) < mpUnits.size(); i++)
	{
		delete mpUnits[i];
		mpUnits[i] = nullptr;
	}
	mpUnits.clear();
	mUnitCount = 0;
}

void UnitManager::addUnit(Vector2D location, Animation* pAnimation)
{
	if (mMaxUnitCount == 0 || getVector().size() < mMaxUnitCount)
	{
		Unit* pUnit = new Unit(pAnimation, location);
		mpUnits.push_back(pUnit);
	}
	mUnitCount++;
}

void UnitManager::addUnit(Vector2D location, Animation* pAnimation1, Animation* pAnimation2)
{
	if (mMaxUnitCount == 0 || getVector().size() < mMaxUnitCount)
	{
		Unit* pUnit = new Unit(pAnimation1, pAnimation2, location);
		mpUnits.push_back(pUnit);
	}

	mUnitCount++;
}

void UnitManager::addUnit(GraphicsBuffer* pBuffer, Vector2D pos)
{
	if (mMaxUnitCount == 0 || getVector().size() < mMaxUnitCount)
	{
		Unit* pUnit = new Unit(pBuffer, pos);
		mpUnits.push_back(pUnit);
	}

	mUnitCount++;
}

void UnitManager::deleteUnit(Vector2D location)
{
	int mouseX = location.getX();
	int mouseY = location.getY();
	int unitNum = 0;
	int locationX, locationY;
	bool inWidth = true, inHeight = true;
	int spriteWidth = 60;
	int spriteHeight = 60;
	for (int i = 0; unsigned(i) < mpUnits.size(); i++)
	{
		locationX = mpUnits[i]->getPosition().getX();
		locationY = mpUnits[i]->getPosition().getY();
		bool inWidth = locationX <= mouseX  && locationX > mouseX - spriteWidth;
		bool inHeight = locationY <= mouseY && locationY > mouseY - spriteHeight;
		if (inWidth && inHeight)
		{
			delete mpUnits[i];
			mpUnits[i] = nullptr;
			mUnitCount--;
		}
		unitNum++;
	}
}

void UnitManager::clearVector()
{
	for (int i = 0; unsigned(i) < mpUnits.size(); i++)
	{
		delete mpUnits[i];
		mpUnits[i] = nullptr;
	}
	mUnitCount = 0;
	mpUnits.clear();
}

void UnitManager::updateAll(float time)
{
	for (int i = 0; unsigned(i) < mpUnits.size(); i++)
	{
		if(mpUnits[i]!= nullptr)
			mpUnits[i]->update(time);
	}
}

void  UnitManager::updateSnake(float time,Vector2D pos)
{
	for (int i = mpUnits.size() - 1; unsigned(i) > 0; i--)
	{
		if (mpUnits[i - 1] != nullptr)
		{
			Unit* pUnit = mpUnits[i - 1];
			Vector2D newLocation = pUnit->getPosition();
			if(mpUnits[i] != nullptr)
				mpUnits[i]->setPosition(newLocation);
		}
		else
		{
			Unit* pUnit = mpUnits[0];
			Vector2D newLocation = pUnit->getPosition();
			if (mpUnits[i] != nullptr)
				mpUnits[i]->setPosition(newLocation);
		}
	}
		mpUnits.front()->setPosition(pos);
}

void UnitManager::drawAnimated(GraphicsSystem* pGraphicsSystem, int x, int y)
{
	for (int i = 0; unsigned(i) < mpUnits.size(); i++)
	{
		if (mpUnits[i] != nullptr)
		{
			mpUnits[i]->draw(pGraphicsSystem,1,x,y);
		}
	}
}

void UnitManager::drawSnake(GraphicsSystem* pGraphicsSystem)
{
	Unit* front = mpUnits.front();
	mpUnits[0]->draw(pGraphicsSystem, 2, front->getPosition().getX(), front->getPosition().getY());
	for (int i = 1; unsigned(i) < mpUnits.size(); i++)
	{
		if (mpUnits[i] != nullptr)
		{
			pGraphicsSystem->draw(Vector2D(), mpUnits[i]->getSprite(), mpUnits[i]->getPosition().getX(), mpUnits[i]->getPosition().getY());
		}
	}
}

void UnitManager::drawNoAnimated(GraphicsSystem* pGraphicsSystem)
{
	for (int i = 1; unsigned(i) < mpUnits.size(); i++)
	{
		if (mpUnits[i] != nullptr)
		{
			pGraphicsSystem->draw(Vector2D(), mpUnits[i]->getSprite(), mpUnits[i]->getPosition().getX(), mpUnits[i]->getPosition().getY());
		}
	}
}

Unit* UnitManager::getFirstUnit()
{
	return mpUnits.front();
}

Unit* UnitManager::getLastUnit()
{
	return mpUnits.back();
}

int UnitManager::getUnitCount()
{
	int count = 0;
	for (int i = 0; i < mpUnits.size(); i++)
	{
		if (mpUnits[i] != nullptr)
		{
			count++;
		}
	}
	return count;
}

void UnitManager::setPause()
{
	for (int i = 0; unsigned(i) < mpUnits.size(); i++)
	{
		if (mpUnits[i] != nullptr)
		{
			mpUnits[i]->setPaused();
		}
	}
}

vector<Unit*> UnitManager::getVector()
{
	return mpUnits;
}

bool UnitManager::collidingWith(UnitManager* pManager)
{
	int count = 0;
	Unit* pHead = this->getFirstUnit();
	vector<Unit*> tempVector = pManager->getVector();
	int locationX, locationY;
	int headX = pHead->getPosition().getX();
	int headY = pHead->getPosition().getY();
	bool inWidth = false, inHeight = false;
	if (this != pManager)
	{
		for (int i = 0; i < pManager->getVector().size(); i++)
		{
			locationX = tempVector[i]->getPosition().getX();
			locationY = tempVector[i]->getPosition().getY();
			bool inWidth = locationX <= headX && locationX > headX - 60;
			bool inHeight = locationY <= headY && locationY > headY - 60;
			if (inWidth && inHeight)
			{
				return true;
			}
		}
	}
	else
	{
		for (int i = 1; i < pManager->getVector().size(); i++)
		{
			locationX = tempVector[i]->getPosition().getX();
			locationY = tempVector[i]->getPosition().getY();
			bool inWidth = locationX <= headX && locationX > headX - 60;
			bool inHeight = locationY <= headY && locationY > headY - 60;
			if (inWidth && inHeight)
			{
				return true;
			}
		}
	}
	return false;
}

void UnitManager::clearSnake()
{
	for (int i = 1; i < getVector().size(); i++)
	{
		delete mpUnits[i];
		mpUnits[i] = nullptr;
	}
	mUnitCount = 1;
}

void UnitManager::moveAllUnits(Vector2D pos)
{
	for (int i = 0; i < getVector().size(); i++)
	{
		mpUnits[i]->setPosition(pos);
	}
}