#include "UnitManager.h"
#include "Unit.h"
#include "Animation.h"
#include "Game.h"

UnitManager::UnitManager()
{
	mNumUnits = 0;
}

UnitManager::~UnitManager()
{
	cleanup();
}

void UnitManager::cleanup()
{
	for (int i = 0; i < mNumUnits; i++)
	{
		Unit* pUnit = mpUnits[i];
		delete pUnit;
	}

	mNumUnits = 0;
	mpUnits.clear();
}

void UnitManager::createAndAddUnit()
{
	//create unit
	Unit* pUnit = new Unit();
	//manage the unit
	mpUnits.push_back(pUnit);
	mNumUnits++;
}

void UnitManager::setUnitPos(Vector2D& position)
{
	mpUnits[mNumUnits - 1]->setPosition(position);
}

void UnitManager::destroyUnit(Unit* pUnitToDestroy)
{
	for (int i = 0; i < mNumUnits; i++)
	{
		Unit* pUnit = mpUnits[i];
		if (pUnit == pUnitToDestroy)
		{
			delete pUnit;
			mpUnits.erase(mpUnits.begin() + i);
			mNumUnits--;
			break;
		}

	}

}

void UnitManager::deleteUnits(Vector2D mousePos)
{
	Vector2D tmp;
	float distance;

	for (int i = 0; i < mNumUnits; i++)
	{
		Unit* pUnit = mpUnits[i];

		distance = tmp.getDistanceBetween(Vector2D(pUnit->getPosition().getX() - (pUnit->currentSprite()->getWidth() / 2), pUnit->getPosition().getY() - (pUnit->currentSprite()->getHeight() / 2)), mousePos);

		if (distance <= (pUnit->currentSprite()->getWidth() / 2))
		{
			destroyUnit(pUnit);
		}

	}
}

void UnitManager::update(float elapsedTime)
{
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->update(elapsedTime);
	}
}

void UnitManager::updateTiming(float amount)
{
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->setTiming(amount);
	}
}

void UnitManager::doAnimation()
{
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->setPaused();
	}
}

void UnitManager::draw(GraphicsSystem* pGraphicsSystem)
{
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->draw(pGraphicsSystem);
	}

}

int UnitManager::getNumUnits()
{
	return mNumUnits;
}

Unit* UnitManager::getUnit()
{
	if (mpUnits.size() > 0)
		return mpUnits[0];
	else
		return nullptr;
}

Unit* UnitManager::getUnit(int index)
{
	if (index <= mNumUnits)
		return mpUnits[index];
	else
		return NULL;
}

Unit* UnitManager::getLastUnit()
{
	return mpUnits[mNumUnits];
}

Vector2D UnitManager::getPosition(int index)
{
	return mpUnits[index]->getPosition();
}

void UnitManager::setLast()
{
	mpUnits[mNumUnits - 1]->setAnimation();
}