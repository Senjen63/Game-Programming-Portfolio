#include "Unit.h"
#include "Game.h"

Unit::Unit()
{
    mLocation = Vector2D(DEFAULT_X, DEFAULT_Y);
    mFps = DEFAULT_FPS;
    mType = DEFAULT_UNIT_TYPE;
}
Unit::Unit(Vector2D pos, int fps)
{
    mFps = fps;
    mLocation = pos;
    mType = DEFAULT_UNIT_TYPE;
}
Unit::Unit(Vector2D pos, GraphicsBuffer* newBuffer, int fps, bool loopAnimation, int type)
{
    mLocation = pos;
    mFps = fps;
    addAnimation(newBuffer, fps, loopAnimation);
    mType = type;
}
Unit::~Unit()
{

}
int Unit::getAnimCount()
{
    return mAnims.size();
}
int Unit::getCurrentIndex() 
{
    return mCurrentIndex;
}
bool Unit::getIsPlaying()
{
    return mPlay;
}
Vector2D Unit::getLocation()
{
    return mLocation;
}
Vector2D Unit::getDimensions()
{
    return mAnims[mCurrentIndex].getCurrentSprite().getWidthHeight();
}
bool Unit::getDelete()
{
    return mDelete;
}
int Unit::getType()
{
    return mType;
}
int Unit::getFps()
{
    return mFps;
}
void Unit::setDel(bool del)
{
    mDelete = del;
}
void Unit::setType(int type)
{
    mType = type;
}
void Unit::update(float timeElapsed)
{
    updateUnit(timeElapsed);

    if (mAnims.size() > 0 && mPlay)
    {
        mAnims[mCurrentIndex].update(timeElapsed);
    }
}
void Unit::updateUnit(float elapsedTime)
{

}
void Unit::draw()
{
    if (mAnims.size() > 0)
    {
        Vector2D offset = Vector2D(mAnims[mCurrentIndex].getCurrentSprite().getWidthHeight()) / 2;
        Vector2D pos = mLocation - offset;
        Game::getGame()->getGraphicsSystem()->draw(pos.getX(), pos.getY(), mAnims[mCurrentIndex].getCurrentSprite(), 1, 1);
    }
}
void Unit::changeLocation(Vector2D newPos)
{
    mLocation = newPos;
}
void Unit::addAnimation(GraphicsBuffer* graphicsBuffer)
{
    Animation newAnim = Animation(graphicsBuffer, mFps, DEFAULT_LOOP);
    mAnims.push_back(newAnim);
}
void Unit::addAnimation(GraphicsBuffer* graphicsBuffer, int fps, bool loop)
{
    Animation newAnim = Animation(graphicsBuffer, fps, loop);
    mAnims.push_back(newAnim);
}
void Unit::setAnimation(int index)
{
    mAnims[index].sync(mAnims[mCurrentIndex]);
    mCurrentIndex = index;
    setFps(mFps);
    
}
void Unit::setFps(int fps)
{
    mFps = fps;
    if (mAnims.size() > 0)
    {
        mAnims[mCurrentIndex].changeSpeed(fps);
    }
}
void Unit::togglePlay(bool play)
{
    mPlay = play;
}
bool Unit::isMouseOver(Vector2D mousePos)
{
    float xDist = abs(mLocation.getX() - mousePos.getX());
    float yDist = abs(mLocation.getY() - mousePos.getY());

    float xRadius = getDimensions().getX() / 2;
    float yRadius = getDimensions().getY() / 2;

    if (xDist <= xRadius && yDist <= yRadius)
    {
        return true;
    }

    return false;
}