#include "GraphicsBufferManager.h"


bool GraphicsBufferManager::doesBufferExist(std::string name)
{
	return mBuffers.find(name) != mBuffers.end();
}


GraphicsBufferManager::GraphicsBufferManager(GraphicsBuffer* backBuffer)
{
	mpBackBuffer = backBuffer;
}


void GraphicsBufferManager::cleanup()
{
	mpBackBuffer = nullptr;

	for (auto it : mBuffers)
	{
		if (it.second != nullptr)
		{
			GraphicsBuffer* buf = it.second;
			delete buf;
			it.second = nullptr;
		}
	}

	mBuffers.clear();
}


GraphicsBuffer& GraphicsBufferManager::addGraphicsBuffer(std::string name, std::string fullPath)
{
	deleteGraphicsBuffer(name);
	GraphicsBuffer* buffer = new GraphicsBuffer(fullPath);
	mBuffers.insert( { name, buffer } );
	return *buffer;
}


GraphicsBuffer& GraphicsBufferManager::addGraphicsBuffer(std::string name, Vector2D size)
{
	deleteGraphicsBuffer(name);
	GraphicsBuffer* buffer = new GraphicsBuffer(size);
	mBuffers.insert({ name, buffer });
	return *buffer;
}


GraphicsBuffer& GraphicsBufferManager::addGraphicsBuffer(std::string name, Vector2D size, Color col)
{
	deleteGraphicsBuffer(name);
	GraphicsBuffer* buffer = new GraphicsBuffer(size, col);
	mBuffers.insert({ name, buffer });
	return *buffer;
}


GraphicsBuffer& GraphicsBufferManager::addGraphicsBuffer(std::string name, const GraphicsBuffer* og)
{
	deleteGraphicsBuffer(name);
	GraphicsBuffer* buffer = new GraphicsBuffer(og);
	mBuffers.insert({ name, buffer });
	return *buffer;
}


bool GraphicsBufferManager::deleteGraphicsBuffer(std::string name)
{
	if (doesBufferExist(name) == true)
	{
		GraphicsBuffer* buffer = mBuffers[name];
		mBuffers.erase(name);
		delete buffer;

		return true;
	}

	return false;
}


GraphicsBuffer& GraphicsBufferManager::getGraphicsBuffer(std::string name)
{
	return *mBuffers[name];
}


GraphicsBuffer& GraphicsBufferManager::getBackBuffer()
{
	return *mpBackBuffer;
}

