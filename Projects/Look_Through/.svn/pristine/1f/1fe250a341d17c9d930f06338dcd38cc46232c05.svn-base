/*
Author: David Silverman
Class: GPR-250-01
Assignment: Assignment 3
Certification of Authenticity:
I certify that this assignment is entirely my own work.
 */

#include "collision.h"
#include "game.h"

Collision::Collision(Level* level, HeadDirection mov) : GameEvent(COLLISION)
{
	mpLevel = level;

	if (Colliso(mpLevel->limbs(), mov) == false && Colliso(mpLevel->getWalls(), mov) == false)
	{
		mHasHit = false;
	}
	else
	{
		mHasHit = true;
	}
}

Collision::~Collision()
{

}

bool Collision::Colliso(vector<Vector2D> bricks, HeadDirection mov)
{
	for (int i = 0; i < bricks.size(); i++)
		if (detectCollision(bricks[i], mov))
			return true;

	return false;
}


bool Collision::detectCollision(Vector2D brick, HeadDirection mov)
{

	//cout << "Brick:" << brick.getX() << ", " << brick.getY() << endl;
	//cout << "Player" << mpLevel->getCellHeadX() << ", " << mpLevel->getCellHeadY() << endl;
	switch (mov)
	{
		case UP:
			if ((mpLevel->getCellHeadY() == brick.getY() || (mpLevel->getCellHeadY() == 0 && brick.getY() == 0)) && mpLevel->getCellHeadX() == brick.getX())
				return true;
			break;
		case DOWN:
			if ((mpLevel->getCellHeadY() == brick.getY() || (mpLevel->getCellHeadY() == mpLevel->getLevelHeight() && brick.getY() == 0)) && mpLevel->getCellHeadX() == brick.getX())
				return true;
			break;
		case LEFT:
			if ((mpLevel->getCellHeadX() == brick.getX() || (mpLevel->getCellHeadX() == 0 && brick.getX() == mpLevel->getLevelWidth())) && mpLevel->getCellHeadY() == brick.getY())
				return true;
			break;
		case RIGHT:
			if ((mpLevel->getCellHeadX() == brick.getX() || (mpLevel->getCellHeadX() == mpLevel->getLevelWidth() && brick.getX() == mpLevel->getLevelWidth())) && mpLevel->getCellHeadY() == brick.getY())
				return true;
			break;
	}

	return false;
}
