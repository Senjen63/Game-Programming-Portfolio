#pragma once

#include <PerformanceTracker.h>
#include <vector>

#include "ScreenChangeManager.h"
#include "GraphicsSystem.h"
#include "InputSystem.h"
#include "Animation.h"
#include "Unit.h"
#include "Keycode.h"
#include "Mousecode.h"
#include "Conversion.h"
#include "UnitManager.h"
#include "GraphicsBufferManager.h"
#include "LevelManager.h"
#include "HUD.h"
#include "ScreenType.h"

#include "SnakeComponent.h"
#include "CollisionDriver.h"
#include "SpeedPowerUpComponent.h"
#include "ScoreModPowerUpComponent.h"

class Game : public Trackable
{
	friend class ScreenChangeManager;

	const std::string PERFORMANCE_TRACKER_STRING = "loop";
	const std::string ASSET_DICTIONARY_PATH = "Data\\AssetDictionary.txt";

	const std::string LOSE_SCREEN_NAME = "LoseScreen";
	const std::string GAME_WIN_SCREEN_NAME = "GameWinScreen";
	const std::string LEVEL_WIN_SCREEN_NAME = "LevelWinScreen";

	static const int NUM_LEVELS = 3;
	const std::string LEVEL_NAMES[NUM_LEVELS] = { "Level1.txt", "Level2.txt", "Level3.txt" };

	static Game* mpGame;

	Vector2D mWindowSize;

	float mTargetTimeInMilliseconds;
	float mTargetFramesPerSecond;

	GraphicsSystem* mpGraphicsSystem;
	UnitManager* mpUnitManager;
	GraphicsBufferManager* mpGraphicsBufferManager;
	InputSystem* mpInputSystem;

	bool mInLevel = false;
	ScreenType mCurrentScreen = ScreenType::START_SCREEN;
	int mCurrentLevelIndex = 0;

	void update(float dt);
	void render();
	void handleInput();

	Game(int targetFramerate) { setTargetFramesPerSecond(targetFramerate); }
	~Game() { cleanupInstance(); mpGame = nullptr; }

public:

	static Game* getInstance();
	static Game* createInstance(int targetFramerate = 60);
	static void destroyInstance() { delete mpGame; mpGame = nullptr; }
	void initInstance(Vector2D windowSize = Vector2D(800, 640));
	void cleanupInstance();

	void importSprites(std::string assetDictionaryPath, std::string spritePath);

	UnitManager* getUnitManager() { return mpUnitManager; }
	GraphicsBufferManager* getGraphicsBufferManager() { return mpGraphicsBufferManager; }
	InputSystem* getInputSystem() { return mpInputSystem; }

	float getTargetFramesPerSecond() { return mTargetFramesPerSecond;  }
	void setTargetFramesPerSecond(float fps) { mTargetTimeInMilliseconds = 1000.0f / fps; mTargetFramesPerSecond = fps; }

	float getTargetTimeInMilliseconds() { return mTargetTimeInMilliseconds; }
	float setTargetTimeInMilliseconds(float ms) { mTargetFramesPerSecond = ms * 1000.0; mTargetTimeInMilliseconds = ms; }

	Vector2D getWindowSize() { return mWindowSize; }

	void doLoop();
};