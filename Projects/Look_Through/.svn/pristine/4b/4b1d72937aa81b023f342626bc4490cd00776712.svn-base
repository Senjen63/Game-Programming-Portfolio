#pragma once

#include "Unit.h"
#include "CollisionEvent.h"
#include <vector>
#include <Trackable.h>
#include <Vector2D.h>
#include <EventSystem.h>
#include <EventListener.h>

using namespace std;

class UnitManager : public EventListener
{
	public:
		UnitManager();
		~UnitManager();

		void init();
		void cleanup();

		Unit* getLastUnit();
		int getUnitCount();

		virtual void handleEvent(const Event& currentEvent);

		void addUnit(Unit*);
		Unit* addUnit(Vector2D, int);
		Unit* addUnit(Vector2D, GraphicsBuffer*, int, bool, int);
		void deleteUnit(Unit*);
		void deleteUnits(vector<Unit*>*);
		void deleteUnitsOfType(int);
		void deleteUnitsAtPosition(Vector2D);
		void clearAll();

		void nextAnimationForLastUnit();

		void setAllPlay(bool);
		void switchAllPlay();

		vector<Unit*> checkAnyCollisions(Unit*);
		vector<Unit*> checkCollisionOfType(Unit*, int);
		vector<Unit*> checkCollisionInArea(Vector2D, float, float);

		void updateAll(float);
		void drawAll();

		Unit* clickedUnit(Vector2D);
		vector<Unit*>* clickedUnits(Vector2D);

private:
	vector<Unit*> mUnits;

	EventSystem* mpEventSystem = nullptr;
};