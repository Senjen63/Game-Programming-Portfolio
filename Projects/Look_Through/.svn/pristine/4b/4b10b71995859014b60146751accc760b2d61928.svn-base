#include "InputTranslator.h"

InputTranslator::InputTranslator()
{}
InputTranslator::~InputTranslator()
{}


void InputTranslator::init()
{
	//EventSystem::getInstance()->addListener((EventType)EVENT_KEY_DOWN, static_cast<EventListener*>(this));
	//EventSystem::getInstance()->addListener((EventType)EVENT_KEY_UP, static_cast<EventListener*>(this));
}
void InputTranslator::cleanUp()
{
	//EventSystem::getInstance()->removeListener((EventType)EVENT_KEY_DOWN, static_cast<EventListener*>(this));
	//EventSystem::getInstance()->removeListener((EventType)EVENT_KEY_UP, static_cast<EventListener*>(this));
}

void InputTranslator::handleEvent(const Event& theEvent)
{
    /*
    EventSystem* pEventSysInst = EventSystem::getInstance();

    switch (theEvent.getType())
    {
    case EVENT_KEY_DOWN:
    {
        // Nested switch for each key needed 
        const KeyInput& keyEvent = static_cast<const InputEvent&>(theEvent);

        switch (keyEvent.getKeyCode())
        {
        case KeyCode::ESCAPE:
            pEventSysInst->fireEvent(CloseGameEvent());
            break;
        case KeyCode::W:
            pEventSysInst->fireEvent(ChangeDirectionEvent(Direction::UP));
            break;
        case KeyCode::S:
            pEventSysInst->fireEvent(ChangeDirectionEvent(Direction::DOWN));
            break;
        case KeyCode::A:
            pEventSysInst->fireEvent(ChangeDirectionEvent(Direction::LEFT));
            break;
        case KeyCode::D:
            pEventSysInst->fireEvent(ChangeDirectionEvent(Direction::RIGHT));
            break;
        case KeyCode::UP:
            pEventSysInst->fireEvent(ChangeDirectionEvent(Direction::UP));
            break;
        case KeyCode::DOWN:
            pEventSysInst->fireEvent(ChangeDirectionEvent(Direction::DOWN));
            break;
        case KeyCode::LEFT:
            pEventSysInst->fireEvent(ChangeDirectionEvent(Direction::LEFT));
            break;
        case KeyCode::RIGHT:
            pEventSysInst->fireEvent(ChangeDirectionEvent(Direction::RIGHT));
            break;
        case KeyCode::SPACE:
            pEventSysInst->fireEvent(GameStartEvent());
            break;
        }

        break;
    }
    }

    */


}