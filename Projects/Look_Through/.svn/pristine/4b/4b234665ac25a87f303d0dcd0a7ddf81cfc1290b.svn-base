#pragma once
#include "GraphicsBuffer.h"
#include "Sprite.h"
#include "Font.h"
#include "Color.h"
#include <PerformanceTracker.h>
#include <MemoryTracker.h>

using namespace std;

const int DISP_WIDTH = 800;
const int DISP_HEIGHT = 600;

class GraphicsSystem : public Trackable
{
public:
	GraphicsSystem () { mpDisplay = nullptr; };
	~GraphicsSystem ();

	//getters
	int getHeight() { return al_get_display_height( mpDisplay ); };
	int getWidth() { return al_get_display_width( mpDisplay ); };
	ALLEGRO_BITMAP* getBackBuffer() { return al_get_backbuffer( mpDisplay ); };

	void init(int dispW, int dispH); //call functions
	void clean(); //call in destructor

	void flip();
	void draw( GraphicsBuffer* buff );
	void draw( Sprite* spr, int locX, int locY, float scale );
	void draw( GraphicsBuffer* backBuff, GraphicsBuffer*, int locX, int locY, float scale );
	void draw( GraphicsBuffer* buff, Sprite* spr, int locX, int locY, float scale );
	void writeText( string txt, int locX, int locY, Font* fnt, Color col );
	void writeText( GraphicsBuffer* buff, string txt, int locX, int locY, Font* fnt, Color col );
	void saveBuffer( GraphicsBuffer* buff, string fileName );

private:
	ALLEGRO_DISPLAY* mpDisplay = nullptr;
};