#pragma once

#include <queue>
#include <EventListener.h>
#include "EntityManager.h"
#include "InputTranslator.h"
#include "Entity.h"

class Snake : public EventListener
{
public:
    static Animation sSegmentAnimation;

    Snake(const Animation& segmentAnimation, int length, int gridSize, Vector2D startingPos, float timeToMove, Direction direction = Direction::RIGHT);
    Snake(int length, int gridSize, Vector2D startingPos, float timeToMove, Direction direction = Direction::RIGHT);
    ~Snake();
    Snake() = default;
    Snake(const Snake& other) = default;

    void init();
    void cleanUp();

    void update(double deltaTime);

    int getLength() const { return mSegments.size() + mGrowQueue.size(); }

    void setDirection(Direction dir);

    void handleEvent(const Event& theEvent);

    bool isBehind(Direction dir) const;
    bool pointIsOnSnake(const Vector2D& pos) const;

private:
    void moveSnake();
    void growSnake(int addedLength = 1);

    void handleCollisions(Bounds newHeadBounds);

    float mTimeSinceStart = 0;
    float mTimeToMove;
    Direction mDirection = Direction::RIGHT;
    Direction mTargetDir = Direction::RIGHT; // prevents turning 180 bug 

    double mTimeSinceLastMove = 0.0;

    EntityManager* mpEntityManager = nullptr; // For ease of access 

    int mGridSize;
    std::queue<Entity*> mSegments;
    std::queue<Entity*> mGrowQueue;
};
