#include "EntityManager.h"
EntityManager::EntityManager()
{

}
EntityManager::~EntityManager()
{
	cleanUp();
}

void EntityManager::init()
{
	if (mIsInitted)
		return;

	mIsInitted = true;
}

void EntityManager::cleanUp()
{
	if (!mIsInitted)
		return;

	clearAllEntities();

	mIsInitted = false;
}
void EntityManager::UpdateAll(double deltaTime)
{
	for (auto i : mpEntityVector)
	{
		i->Update(deltaTime);
	}
}

void EntityManager::DrawAll(GraphicsSystem* pDisplay)
{
	for (auto i : mpEntityVector)
	{
		i->Draw(pDisplay);
	}
}

void EntityManager::RotateAll(float add)
{
	for (auto i : mpEntityVector)
	{
		i->addtoAngle(add);
	}
}

void EntityManager::removeEntity(Entity* destroy)
{
	for (int i = 0; i < mpEntityVector.size(); i++)
	{
		Entity* temp = mpEntityVector[i];
		if (temp == destroy)
		{
			delete temp;
			mpEntityVector.erase(mpEntityVector.begin() + i);
		}
	}
}


void EntityManager::clearAllEntities()
{
	for (auto entity : mpEntityVector)
	{
		delete entity;
	}
	mpEntityVector.clear();
}

Entity* EntityManager::makeEntity(Animation* anim, Vector2D pos, float scale)
{
	Entity* temp = new Entity(anim, pos, scale);
	mpEntityVector.push_back(temp);
	return temp;
}

void EntityManager::reserveEntityMemory(size_t numEntities)
{
	mpEntityVector.reserve(numEntities);
}
