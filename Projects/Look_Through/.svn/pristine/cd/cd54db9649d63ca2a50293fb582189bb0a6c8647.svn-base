#include "Unit.h"

/// <summary>
/// Placeholder constructor.
/// </summary>
Unit::Unit()
{
	mPosition = ZERO_VECTOR2D;
}

/// <summary>
/// Clears all animations from memory.
/// </summary>
Unit::~Unit()
{
	mAnimations.clear();
}

/// <summary>
/// Adds given animation to the unit.
/// </summary>
/// <param name="animation">: Animation ptr for unit to use.</param>
void Unit::addAnimation( Animation * animation )
{
	mAnimations.push_back( animation );
	mCurrentAnimation = 0;
}

/// <summary>
/// Draws unit onto given graphics system.
/// </summary>
/// <param name="pGfxSystem">: GraphicsSystem ptr for unit to be drawn to.</param>
void Unit::draw( GraphicsSystem * pGfxSystem )
{
	if( mCurrentAnimation == -1 ) return;
	Sprite * currentSprite = mAnimations[ mCurrentAnimation ]->getCurrentSprite();
	pGfxSystem->draw( mPosition.getX(), mPosition.getY(), *currentSprite);
}

/// <summary>
/// Gets the animation index the unit is at.
/// </summary>
/// <returns>Int index of animation.</returns>
int Unit::getCurrentAnimationIndex() const
{
	return mCurrentAnimation;
}

/// <summary>
/// Gets the position of the unit.
/// </summary>
/// <returns>2D Position of unit on screen.</returns>
Vector2D Unit::getPosition()
{
	return mPosition;
}

/// <summary>
/// Gets the size of the unit.
/// </summary>
/// <returns>2D Size of unit.</returns>
Vector2D Unit::getSize()
{
	return Vector2D { mAnimations[ mCurrentAnimation ]->getCurrentSprite()->getWidth(), mAnimations[ mCurrentAnimation ]->getCurrentSprite()->getHeight() };
}

/// <summary>
/// Check if a unit is located at given position.
/// </summary>
/// <param name="pos">: Position to check.</param>
/// <returns>True if the unit is at the position.</returns>
bool Unit::isOnPosition( Vector2D pos )
{
	Vector2D unitPos = getPosition();
	Vector2D unitSize = getSize();
	return unitPos.getX() <= pos.getX() && unitPos.getX() + unitSize.getX() >= pos.getX() && unitPos.getY() <= pos.getY() && unitPos.getY() + unitSize.getY() >= pos.getY();
}

/// <summary>
/// Sets the current animation of the unit to the given animation index.
/// </summary>
/// <param name="animation">: Index of animation.</param>
void Unit::setAnimation( int animation )
{
	if( animation == -1 || animation >= mAnimations.size() ) return;

	mCurrentAnimation = animation;
}

/// <summary>
/// Slows down the animation a considerable amount.
/// </summary>
void Unit::slowDownAnimation()
{
	mAnimations[ mCurrentAnimation ]->slowDown();
}

/// <summary>
/// Speeds up the animation a considerable amount;
/// </summary>
void Unit::speedUpAnimation()
{
	mAnimations[ mCurrentAnimation ]->speedUp();
}

/// <summary>
/// Updates the unit to be at the given position.
/// </summary>
/// <param name="newPos">: New position of unit.</param>
void Unit::updatePosition( Vector2D newPos )
{
	Sprite * pCurrentSprite = mAnimations[ mCurrentAnimation ]->getCurrentSprite();
	mPosition = Vector2D { newPos.getX() - pCurrentSprite->getWidth() / 2, newPos.getY() - pCurrentSprite->getHeight() / 2 };
}

/// <summary>
/// Updates animation frame of the unit.
/// </summary>
void Unit::updateUnit()
{
	mAnimations[ mCurrentAnimation ]->updateSprite();
}
