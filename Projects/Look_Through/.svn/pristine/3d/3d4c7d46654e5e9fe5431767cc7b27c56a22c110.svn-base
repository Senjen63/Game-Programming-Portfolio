#include "UnitManager.h"

UnitManager::UnitManager()
{
	mMaxUnitCount = 0;
	mUnitCount = 0;
	mpAnimation1 = nullptr;
	mTime = 0;
}

UnitManager::UnitManager(int maxUnitCount)
{
	mMaxUnitCount = maxUnitCount;
	mUnitCount = 0;
	mpAnimation1 = nullptr;
	mTime = 0;
}

UnitManager::UnitManager(Animation* pAnimation)
{
	mMaxUnitCount = 0;
	mUnitCount = 0;
	mpAnimation1 = pAnimation;
	mTime = 0;
}

UnitManager::UnitManager(int maxUnitCount, Animation* pAnimation)
{
	mMaxUnitCount = maxUnitCount;
	mUnitCount = 0;
	mpAnimation1 = pAnimation;
	mTime = 0;
}

UnitManager::~UnitManager()
{
	cleanup();
}

void UnitManager::cleanup()
{
	for (int i = 0; unsigned(i) < mpUnits.size(); i++)
	{
		delete mpUnits[i];
		mpUnits[i] = nullptr;
	}
	mpUnits.clear();
	mUnitCount = 0;
}

void UnitManager::addUnit(Vector2D location)
{
	if (mMaxUnitCount == 0 || mUnitCount < mMaxUnitCount)
	{
		Unit* pUnit = new Unit(location);
		mpUnits.push_back(pUnit);
		mUnitCount++;
	}
}

void UnitManager::addUnit(GraphicsBuffer* pBuffer, Vector2D pos)
{
	if (mMaxUnitCount == 0 || mUnitCount < mMaxUnitCount)
	{
		Unit* pUnit = new Unit(pBuffer, pos);
		mpUnits.push_back(pUnit);
		mUnitCount++;
	}

}

void UnitManager::addUnit(GraphicsBuffer* pBuffer, Vector2D pos, float width, float height)
{
	if (mMaxUnitCount == 0 || mUnitCount < mMaxUnitCount)
	{
		Unit* pUnit = new Unit(pBuffer, pos, width, height);
		mpUnits.push_back(pUnit);
		mUnitCount++;
	}

}

void UnitManager::deleteUnit(Vector2D location)
{
	int mouseX = location.getX();
	int mouseY = location.getY();
	int unitNum = 0;
	int locationX, locationY;
	bool inWidth = true, inHeight = true;
	int spriteWidth = 60;
	int spriteHeight = 60;
	for (int i = 0; unsigned(i) < mpUnits.size(); i++)
	{
		locationX = mpUnits[i]->getPosition().getX();
		locationY = mpUnits[i]->getPosition().getY();
		bool inWidth = locationX <= mouseX && locationX > mouseX - spriteWidth;
		bool inHeight = locationY <= mouseY && locationY > mouseY - spriteHeight;
		if (inWidth && inHeight)
		{
			delete mpUnits[i];
			mpUnits[i] = nullptr;
			mUnitCount--;
		}
		unitNum++;
	}
}

void UnitManager::clearVector()
{
	for (int i = 0; unsigned(i) < mpUnits.size(); i++)
	{
		delete mpUnits[i];
		mpUnits[i] = nullptr;
	}
	mUnitCount = 0;
	mpUnits.clear();
}

void UnitManager::updateAll(float time)
{
	mTime += time;
	if(!mPause)
		mpAnimation1->update();
}

void UnitManager::updateEnemies(float time, int distance)
{
	mTime += time;
	if (!mPause)
		mpAnimation1->update();
	int i, j;
	for (i = 0; i < mpUnits.size(); i++)
	{
		if ((!mpUnits[i]->getDirection() && mpUnits[i]->getPosition().getX() < 60) || (mpUnits[i]->getDirection() && mpUnits[i]->getPosition().getX() > 1100))
		{
			for (j = 0; j < mpUnits.size(); j++)
			{
				mpUnits[j]->advanceEnemy();
			}
		}
	}
	for (i = 0; i < mpUnits.size(); i++)
	{
		mpUnits[i]->updateEnemy(time, distance);
	}

}

void  UnitManager::updateSnake(float time, Vector2D pos)
{
	for (int i = mpUnits.size() - 1; unsigned(i) > 0; i--)
	{
		if (mpUnits[i - 1] != nullptr)
		{
			Unit* pUnit = mpUnits[i - 1];
			Vector2D newLocation = pUnit->getPosition();
			if (mpUnits[i] != nullptr)
				mpUnits[i]->setPosition(newLocation);
		}
		else
		{
			Unit* pUnit = mpUnits[0];
			Vector2D newLocation = pUnit->getPosition();
			if (mpUnits[i] != nullptr)
				mpUnits[i]->setPosition(newLocation);
		}
	}
	mpUnits.front()->setPosition(pos);
}

void UnitManager::updateBullet(float distance)
{
	for (int i = 0; i < mpUnits.size(); i++)
	{
		if (mpUnits[i] != nullptr)
			mpUnits[i]->setPosition(Vector2D(mpUnits[i]->getPosition().getX(), mpUnits[i]->getPosition().getY() - distance));
	}
	if (mUnitCount < 0)
		mUnitCount = 0;
}

void UnitManager::deleteBullets()
{

	for (int i = 0; i < mpUnits.size(); i++)
	{
		if (mpUnits[i]->getPosition().getY() < 0 && mpUnits[i]->getPosition().getY() >= -40)
		{
			delete mpUnits[i];
			mpUnits[i] = nullptr;
			mUnitCount--;
		}
	}
}

void UnitManager::drawAnimated(GraphicsSystem* pGraphicsSystem, int x, int y)
{
	for (int i = 0; unsigned(i) < mpUnits.size(); i++)
	{
		if (mpUnits[i] != nullptr)
		{
			if (mpAnimation1->getSpriteNum() == 0)
				bufferLocation = Vector2D();
			if (mpAnimation1->getSpriteNum() == 1)
				bufferLocation = Vector2D(60, 0);
			if (mpAnimation1->getSpriteNum() == 2)
				bufferLocation = Vector2D(120, 0);
			pGraphicsSystem->draw(bufferLocation, mpAnimation1->getCurrentSprite(), mpUnits[i]->getPosition().getX(), mpUnits[i]->getPosition().getY());
		}
	}
}

void UnitManager::drawSnake(GraphicsSystem* pGraphicsSystem)
{
	for (int i = 0; unsigned(i) < mpUnits.size(); i++)
	{
		if (mpUnits[i] != nullptr)
		{
			pGraphicsSystem->draw(Vector2D(), mpUnits[i]->getSprite(), mpUnits[i]->getPosition().getX(), mpUnits[i]->getPosition().getY());
		}
	}
}

void UnitManager::drawNoAnimated(GraphicsSystem* pGraphicsSystem)
{
	for (int i = 0; unsigned(i) < mpUnits.size(); i++)
	{
		if (mpUnits[i] != nullptr)
		{
			pGraphicsSystem->draw(Vector2D(), mpUnits[i]->getSprite(), mpUnits[i]->getPosition().getX(), mpUnits[i]->getPosition().getY());
		}
	}
}

void UnitManager::drawAll(int enemyArray[13][20], GraphicsSystem* pGraphicsSystem)
{
	int i, j;
	for (i = 0; i < 13; i++)
	{
		for (j = 0; j < 19; j++)
		{
			if (enemyArray[i][j] == 1)
			{
				addUnit(Vector2D(j * 60, i * 60));
			}
		}
	}
}

Unit* UnitManager::getFirstUnit()
{
	return mpUnits.front();
}

Unit* UnitManager::getLastUnit()
{
	return mpUnits.back();
}

int UnitManager::getUnitCount()
{
	int count = 0;
	for (int i = 0; i < mpUnits.size(); i++)
	{
		if (mpUnits[i] != nullptr)
		{
			count++;
		}
	}
	return count;
}

void UnitManager::setUnitCount()
{
	mUnitCount--;
}


void UnitManager::setPause()
{
			mPause = true;
}

vector<Unit*> UnitManager::getVector()
{
	return mpUnits;
}

bool UnitManager::collidingWith(UnitManager* pManager)
{
	int count = 0;
	Unit* pHead = this->getFirstUnit();
	vector<Unit*> tempVector = pManager->getVector();
	int locationX, locationY;
	int headX = pHead->getPosition().getX();
	int headY = pHead->getPosition().getY();
	bool inWidth = false, inHeight = false;
	if (this != pManager)
	{
		for (int i = 0; i < pManager->getVector().size(); i++)
		{
			locationX = tempVector[i]->getPosition().getX();
			locationY = tempVector[i]->getPosition().getY();
			bool inWidth = locationX <= headX && locationX > headX - 60;
			bool inHeight = locationY <= headY && locationY > headY - 60;
			if (inWidth && inHeight)
			{
				return true;
			}
		}
	}
	else
	{
		for (int i = 1; i < pManager->getVector().size(); i++)
		{
			locationX = tempVector[i]->getPosition().getX();
			locationY = tempVector[i]->getPosition().getY();
			bool inWidth = locationX <= headX && locationX > headX - 60;
			bool inHeight = locationY <= headY && locationY > headY - 60;
			if (inWidth && inHeight)
			{
				return true;
			}
		}
	}
	return false;
}

bool UnitManager::collidingWith(Unit* enemyBullet)
{
	Unit* pHead = this->getFirstUnit();
	int locationX = enemyBullet->getPosition().getX();
	int locationY = enemyBullet->getPosition().getY();
	int headX = pHead->getPosition().getX();
	int headY = pHead->getPosition().getY();

	bool inWidth = locationX >= headX && locationX < headX + 60;
	bool inHeight = locationY >= headY && locationY < headY + 60;
	if (inWidth && inHeight)
	{
		return true;
	}

	return false;
}

bool UnitManager::bulletCollision(UnitManager* pManager)
{
	int locationX1, locationX2, locationY1, locationY2;
	bool inWidth, inHeight;
	for (int i = 0; i < mpUnits.size(); i++)
	{
		locationX1 = mpUnits[i]->getPosition().getX();
		locationY1 = mpUnits[i]->getPosition().getY();
		for (int j = 0; j < pManager->getVector().size(); j++)
		{
			locationX2 = pManager->getUnit(j)->getPosition().getX();
			locationY2 = pManager->getUnit(j)->getPosition().getY();
			inWidth = locationX2 <= locationX1 && locationX2 > locationX1 - 60;
			inHeight = locationY2 <= locationY1 && locationY2 > locationY1 - 60;
			if (inWidth && inHeight)
			{
				delete mpUnits[i];
				mpUnits[i] = nullptr;
				pManager->getUnit(j)->setPosition(Vector2D(pManager->getUnit(j)->getPosition().getX(), pManager->getUnit(j)->getPosition().getY() - 800));
				mUnitCount--;
				return true;
			}
		}
	}
	return false;
}

void UnitManager::clearSnake()
{
	for (int i = 1; i < getVector().size(); i++)
	{
		delete mpUnits[i];
		mpUnits[i] = nullptr;
	}
	mUnitCount = 1;
}

void UnitManager::moveAllUnits(Vector2D pos)
{
	for (int i = 0; i < getVector().size(); i++)
	{
		mpUnits[i]->setPosition(pos);
	}
}

Unit* UnitManager::getUnit(int pos)
{
	return mpUnits[pos];
}

void UnitManager::setFrame()
{

}

void UnitManager::resetAllPositions()
{
	for(int i=0; i < mpUnits.size();i++)
		mpUnits[i]->resetPosition();
}