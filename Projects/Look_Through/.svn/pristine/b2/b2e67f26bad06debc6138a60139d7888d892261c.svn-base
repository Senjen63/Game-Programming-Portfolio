#pragma once
#include "PerformanceTracker.h"
#include "Game.h"
#include "InputSystem.h"
#include "Unit.h"
#include "Animation.h"


const string INIT_TRACKER_NAME = "init";
const string DRAW_TRACKER_NAME = "draw";
const string WAIT_TRACKER_NAME = "wait";
const string LOOP_TRACKER_NAME = "loop";

const string ASSET_PATH = "..\\..\\common\\assets\\";
const string BACKGROUND_FILENAME = "woods.png";
const string SMURFS_FILENAME = "smurf_sprites.png";
const string DEAN_FILENAME = "dean_sprites.png";

const int SMURFS_LENGTH = 4;
const int SPRITE_NUM = 16;
const float DEFAULT_TARGET_TIME = 16;
const float DEFAULT_SCALE = 1;

Game::Game()
{
	mContinue = true;
	mTargetTime = DEFAULT_TARGET_TIME;
}

Game::~Game()
{
	cleanup();
}

void Game::init( float fps, int dispW, int dispH )
{
	mpGraphicsSys = new GraphicsSystem();
	mpGraphicsSys->init(dispW, dispH);

	mpInputSys = new InputSystem();
	mpInputSys->init();

	mTargetTime = 1000/fps;
}

void Game::cleanup()
{
	delete mpGraphicsSys;
	delete mpInputSys;
}

void Game::doLoop()
{
	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;
	Timer loopTimer;
	bool keyPressed = false;

	GraphicsBuffer* pWoodsGB = new GraphicsBuffer( ASSET_PATH + BACKGROUND_FILENAME );
	GraphicsBuffer* pSmurfsGB = new GraphicsBuffer( ASSET_PATH + SMURFS_FILENAME );
	GraphicsBuffer* pDeansGB = new GraphicsBuffer( ASSET_PATH + DEAN_FILENAME );

	Unit* pCharUnit = new Unit( getGraphicsSys()->getWidth() / 2 - pSmurfsGB->getWidth() / SMURFS_LENGTH, getGraphicsSys()->getHeight() / 2 - pSmurfsGB->getHeight() / SMURFS_LENGTH );
	pCharUnit->addAnim( pSmurfsGB, DEFAULT_TARGET_TIME );
	pCharUnit->addAnim( pDeansGB, DEFAULT_TARGET_TIME );

	while ( getIfContinue() )
	{
		pPerformanceTracker->clearTracker( LOOP_TRACKER_NAME ); 
		pPerformanceTracker->startTracking( LOOP_TRACKER_NAME );

		loopTimer.start();

		if ( mpInputSys->getKeyboardInput( KeyCode::FKEY ) )
			pCharUnit->getCurAnim().changeSpeed( 2 );
		if ( mpInputSys->getKeyboardInput( KeyCode::SKEY ) )
			pCharUnit->getCurAnim().changeSpeed( -2 );
		if ( mpInputSys->getKeyboardInput( KeyCode::ENTER ) )
		{
			if ( !keyPressed )
			{
				keyPressed = true;
				pCharUnit->setAnimation();
			}
		}
		else
			keyPressed = false;
		if ( mpInputSys->getKeyboardInput( KeyCode::ESCAPE ) )
		{
			setIfContinue( false );
		}

		if ( mpInputSys->getMouseInput( KeyCode::LEFTMOUSE ) )
		{
			pCharUnit->setX( mpInputSys->getMouseX() );
			pCharUnit->setY( mpInputSys->getMouseY() );
		}

		getGraphicsSys()->draw( pWoodsGB, DEFAULT_SCALE );

		pCharUnit->update( mTargetTime );

		pCharUnit->draw( DEFAULT_SCALE );

		mpGraphicsSys->flip();

		loopTimer.sleepUntilElapsed( mTargetTime );

		pPerformanceTracker->stopTracking( LOOP_TRACKER_NAME );
		std::cout << "Frame Took:" << pPerformanceTracker->getElapsedTime( LOOP_TRACKER_NAME ) << "ms" << std::endl;
	};

	delete pPerformanceTracker;
	delete pWoodsGB;
	delete pSmurfsGB;
	delete pDeansGB;
	delete pCharUnit;
}

/*void Game::doLoop()
{
	bool keepGoing = true;
	double targetTime = 50.0;
	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;
	al_install_keyboard();
	al_install_mouse();

	


	while (keepGoing)
	{
		pPerformanceTracker->clearTracker("loop");
		pPerformanceTracker->startTracking("loop");
		Timer loopTimer;
		loopTimer.start();

		ALLEGRO_KEYBOARD_STATE state;
		ALLEGRO_MOUSE_STATE mouseState;

		al_get_mouse_state(&mouseState);
		al_get_keyboard_state(&state);


		if (al_key_down(&state, A_KEY))
			std::cout << "'A' Key down\n";                                                                                                                                            
		loopTimer.sleepUntilElapsed(targetTime);
		pPerformanceTracker->stopTracking("loop");

		std::cout << "Frame Took:" << pPerformanceTracker->getElapsedTime("loop") << "ms" << std::endl;
	}
}*/

Game* gpGame = nullptr;