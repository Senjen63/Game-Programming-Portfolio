#include "Animation.h"

const int SNAKE_WIDTH = 2;
const int SNAKE_LENGTH = 3;
const float SLOWEST_ANIM_SPEED = .1f;


Animation::Animation( GraphicsBuffer* gbuff, float targetTime )
{
	Sprite pSprite = Sprite( gbuff, 0, 0,
		gbuff->getWidth(), gbuff->getHeight() );
	mSprites.push_back( pSprite );
	mCurSprite = 0;
	mElapTime = 0;
	mTargetTime = 1000/targetTime;
	mPlayAnim = true;
}

Animation::Animation( int r, int c, GraphicsBuffer* gbuff, float targetTime, bool isSnake )
{
	if (isSnake)
	{
		for (int i = 0; i < c; i++)
		{
			Sprite pSprite = Sprite(gbuff, (gbuff->getWidth() / SNAKE_WIDTH) * i, (gbuff->getHeight() / SNAKE_LENGTH) * (r - 1),
				gbuff->getWidth() / SNAKE_WIDTH, gbuff->getHeight() / SNAKE_LENGTH);
			mSprites.push_back(pSprite);
		}
	}
	else
	{
		for (int i = 0; i < c; i++)
		{
			Sprite pSprite = Sprite(gbuff, (gbuff->getWidth() / c) * i, (gbuff->getHeight()) * (r - 1),
				gbuff->getWidth() / c, gbuff->getHeight());
			mSprites.push_back(pSprite);
		}
	}
	mCurSprite = 0;
	mElapTime = 0;
	mTargetTime = 1000 / targetTime;
	mPlayAnim = true;
}

Animation::~Animation()
{

}

void Animation::togglePlay()
{
	mPlayAnim = !mPlayAnim;
}


void Animation::update(float deltaTime)
{
	mElapTime += deltaTime;
	if ( mElapTime >= mTargetTime && mPlayAnim )
	{
		if ( mCurSprite >= mSprites.size() - 1 )
			mCurSprite = 0;
		else
			mCurSprite++;
		mElapTime -= mTargetTime;
	}
	else if ( !mPlayAnim )
		mElapTime = 0;
}

void Animation::incrementSpeed( int time )
{
	if ( mTargetTime - time > 0 )
		mTargetTime -= time;
	else
		mTargetTime = SLOWEST_ANIM_SPEED;
}