#pragma once

#include "GraphicsSystem.h"
#include <vector>

/*
Potential Collision Detection

Each time an object is moved, have it check the UnitManager's list of objects
(done with a pointer to the object itself?) for anything positioned near it.
This should hopefully be done in constant time but I have no clue how I'd have
the program do that. It'll check for the object's current position and the Sprite's
scale to get the area in which the object covers. If it happens to be in that area,
a collision has occured. If this is for an entity like the Player or an Enemy, 
it will be placed right outside the object and will not be allowed to move
further. If it is a projectile, it will be destroyed.

*/

class Unit;

class UnitManager
{
public:
	UnitManager();
	~UnitManager();

	void addUnit(Unit* newUnit);
	void removeUnit(int index);
	void removeUnit(Unit* targetUnit);
	void removeAllUnits();
	std::vector<Unit*>& getUnitVector() { return mUnitVector; }

	virtual void updateAll(float deltaTime);
	void drawAll(GraphicsSystem* targetGraphicsSystem);

private:
	std::vector<Unit*> mUnitVector;
};