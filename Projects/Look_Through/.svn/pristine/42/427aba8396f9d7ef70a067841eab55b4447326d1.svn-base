#include <vector>

#include "Game.h"
#include "GraphicsSystem.h"
#include "InputSystem.h"
#include "GraphicsBuffer.h"
#include "Sprite.h"
#include "Vector2D.h"
#include "Animation.h"
#include "Unit.h"
#include "Timer.h"
#include <PerformanceTracker.h>
#include "GraphicsBufferManager.h"
#include "UnitManager.h"

using namespace std;

Game* Game::mpGameInstance = nullptr;

Game::Game() 
{
	this->mpGraphicsSystem = nullptr;
	this->mpInputSystem = nullptr;
	this->mpGameTimer = nullptr;
	this->mpPerformanceTracker = nullptr;
	this->mpUnitManager = nullptr;
	this->mpGraphicsBufferManager = nullptr;
	this->mpWoodsSprite = nullptr;
	this->mGamePauseTime = 16.7;
	this->mGameContinue = true;
}

Game::~Game()
{
	cleanUp();
}

void Game::init()
{

	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;
	const int NUM_SPRITES_ROW_COLUMN = 4;

	const string WOODS_IMAGE_NAME = "Woods.png";
	const string WOODS_KEY = "woods";
	const string DEAN_IMAGE_NAME = "dean_sprites.png";
	const string DEAN_KEY = "dean";
	const string SMURF_IMAGE_NAME = "smurf_sprites.png";
	const string SMURF_KEY = "smurf";

	mpGraphicsSystem = new GraphicsSystem;
	mpInputSystem = new InputSystem;
	mpGraphicsBufferManager = new GraphicsBufferManager;
	mpUnitManager = new UnitManager;

	mpGraphicsSystem->init(DISP_WIDTH, DISP_HEIGHT);

	mpGraphicsBufferManager->createAndAddGraphicsBuffer(WOODS_KEY, WOODS_IMAGE_NAME);
	mpGraphicsBufferManager->createAndAddGraphicsBuffer(DEAN_KEY, DEAN_IMAGE_NAME);
	mpGraphicsBufferManager->createAndAddGraphicsBuffer(SMURF_KEY, SMURF_IMAGE_NAME);

	mpWoodsSprite = new Sprite(mpGraphicsBufferManager->getGraphicsBuffer(WOODS_KEY)->getBitmapWidth(), mpGraphicsBufferManager->getGraphicsBuffer(WOODS_KEY)->getBitmapHeight(), Vector2D(0,0), mpGraphicsBufferManager->getGraphicsBuffer(WOODS_KEY));

	// create 16 smurf sprites and dean sprites and add to animation
	mSmurfAnimation = Animation(true);
	mDeanAnimation = Animation(true);

	for (float i = 1; i <= NUM_SPRITES_ROW_COLUMN; i++)
	{
		for (float j = 1; j <= NUM_SPRITES_ROW_COLUMN; j++)
		{
			const int SPRITE_X = ((mpGraphicsBufferManager->getGraphicsBuffer(SMURF_KEY)->getBitmapWidth() / NUM_SPRITES_ROW_COLUMN) * j) - (mpGraphicsBufferManager->getGraphicsBuffer(SMURF_KEY)->getBitmapWidth() / NUM_SPRITES_ROW_COLUMN);
			const int SPRITE_Y = ((mpGraphicsBufferManager->getGraphicsBuffer(SMURF_KEY)->getBitmapHeight() / NUM_SPRITES_ROW_COLUMN) * i) - (mpGraphicsBufferManager->getGraphicsBuffer(SMURF_KEY)->getBitmapWidth() / NUM_SPRITES_ROW_COLUMN);
			Vector2D SmurfLocation = Vector2D(SPRITE_X, SPRITE_Y);
			Sprite SmurfSprite = Sprite(mpGraphicsBufferManager->getGraphicsBuffer(SMURF_KEY)->getBitmapWidth() / NUM_SPRITES_ROW_COLUMN, mpGraphicsBufferManager->getGraphicsBuffer(SMURF_KEY)->getBitmapHeight() / NUM_SPRITES_ROW_COLUMN, SmurfLocation, mpGraphicsBufferManager->getGraphicsBuffer(SMURF_KEY));
			mSmurfAnimation.addSprite(SmurfSprite);

			Vector2D DeanLocation = Vector2D(SPRITE_X, SPRITE_Y);
			Sprite DeanSprite = Sprite(mpGraphicsBufferManager->getGraphicsBuffer(DEAN_KEY)->getBitmapWidth() / NUM_SPRITES_ROW_COLUMN, mpGraphicsBufferManager->getGraphicsBuffer(DEAN_KEY)->getBitmapHeight() / NUM_SPRITES_ROW_COLUMN, DeanLocation, mpGraphicsBufferManager->getGraphicsBuffer(DEAN_KEY));
			mDeanAnimation.addSprite(DeanSprite);
		}
	}

	mpInputSystem->init();

	mpGameTimer = new Timer;

	mpPerformanceTracker = new PerformanceTracker;

}

void Game::cleanUp()
{
	delete mpPerformanceTracker;
	delete mpGameTimer;
	delete mpWoodsSprite;
	delete mpUnitManager;
	delete mpGraphicsBufferManager;
	delete mpInputSystem;
	delete mpGraphicsSystem;	
}

void Game::doLoop()
{
	const float WOODS_IMAGE_SCALE = .5;
	bool isSpaceKeyDown = false;

	while (mGameContinue)
	{
		mpPerformanceTracker->clearTracker("loop");
		mpPerformanceTracker->startTracking("loop");
		mpGameTimer->start();

		// left mouse button down
		if (mpInputSystem->getMouseState(mpInputSystem->LEFT_MOUSE))
		{
			mpUnitManager->createAndAddUnit(mpInputSystem->getMousePosition(), mSmurfAnimation, mDeanAnimation);
		}
		// right mouse button down
		else if (mpInputSystem->getMouseState(mpInputSystem->RIGHT_MOUSE))
		{
			mpUnitManager->deleteUnit(mpInputSystem->getMousePosition());
		}
		// enter key down
		else if (mpInputSystem->getKeyState(mpInputSystem->ENTER_KEY))
		{
			mpUnitManager->getUnits().back()->swapCurrentAnimation();
		} 
		// escape key down
		else if (mpInputSystem->getKeyState(mpInputSystem->ESCAPE_KEY))
		{
			mGameContinue = false;
		}

		// space key down
		if (mpInputSystem->getKeyState(mpInputSystem->SPACE_KEY))
		{
			for (auto unit : mpUnitManager->getUnits())
			{
				unit->turnAnimationOff();
				
			}
			isSpaceKeyDown = true;
		} 
		else // space key up
		{
			if (isSpaceKeyDown) 
			{
				for (auto unit : mpUnitManager->getUnits())
				{
					unit->turnAnimationOn();
				}
				isSpaceKeyDown = false;
			}
		}

		mpGraphicsSystem->draw(Vector2D(0,0), *mpWoodsSprite, WOODS_IMAGE_SCALE);

		mpUnitManager->drawAll();

		mpGraphicsSystem->flip();

		mpUnitManager->updateAll(mGamePauseTime);

		mpGameTimer->sleepUntilElapsed(mGamePauseTime);

		mpPerformanceTracker->stopTracking("loop");
		cout << mpPerformanceTracker->getElapsedTime("loop") << endl;
	}
}