#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

#include <iostream>
#include <cassert>
#include <string>
#include <vector>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>

#include "GraphicsSystem.h"
#include "GraphicsBuffer.h"
#include "Color.h"
#include "Sprite.h"
#include "Font.h"

#include <time.h>

using namespace std;

int main()
{
	srand(time(NULL));
	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;
//VARIALBES
	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string STEPS_FILENAME = "steps.png";
	const string QUIMBY_FILENAME = "mayor_quimby.png";
	const string SMURF_FILENAME = "smurf_sprites_numbered.png";
	const string FONT_FILENAME = "cour.ttf";
	const string OUTPUT_FILENAME = "backbuffer.jpg";
	const string RED_FILENAME = "redbuffer.jpg";
	const string DISPLAY_TEXT = "Curse you Papa Smurf!!!";
	const int FONT_SIZE = 40;
	const float DISP_WIDTH = 800;
	const float DISP_HEIGHT = 600;
	const float RED_SCALE = (3.0f/4.0f);
	const float RED_POS = ((1-RED_SCALE)/2);
	Color RED = Color(255, 0, 0);
	Color BLACK = Color(0, 0, 0);
	const int ALIGNMENT = 0;
	const int SMURF_SHEET_LENGTH = 4;
	Vector2D origin;
	origin.setX(0);
	origin.setY(0);
	GraphicsSystem* pDisplay = new GraphicsSystem(DISP_WIDTH, DISP_HEIGHT);

	if (pDisplay->Init())
	{
//THE ONLY FONT, COUR
		Font* courFont = new Font((ASSET_PATH + FONT_FILENAME), FONT_SIZE, ALIGNMENT);
		assert(courFont);
//DEFINING ALL OF THE DIFFERENT FRAPHIC BUFFERS TO BE DRAWN
		/*GraphicsBuffer* pSteps = new GraphicsBuffer();
		pSteps->init((ASSET_PATH + STEPS_FILENAME).c_str());
		GraphicsBuffer* pQuimby = new GraphicsBuffer();
		pQuimby->init((ASSET_PATH + QUIMBY_FILENAME).c_str());
		GraphicsBuffer* pSmurf = new GraphicsBuffer();
		pSteps->init((ASSET_PATH + SMURF_FILENAME).c_str());
		*/
		
		GraphicsBuffer* pSteps = new GraphicsBuffer((ASSET_PATH + STEPS_FILENAME).c_str());
		assert(pSteps);
		GraphicsBuffer* pQuimby = new GraphicsBuffer((ASSET_PATH + QUIMBY_FILENAME).c_str());
		assert(pQuimby);
		GraphicsBuffer* pSmurf = new GraphicsBuffer((ASSET_PATH + SMURF_FILENAME).c_str());
		assert(pSmurf);
		
		GraphicsBuffer* pRedBuffer = new GraphicsBuffer(RED, DISP_WIDTH, DISP_HEIGHT);
		assert(pRedBuffer);
		

//CREATING SMURF WITH TEMPORARY SPRITE
		/*
		Sprite* smurfSprite = new Sprite(pSmurf,
			Vector2D((pSmurf->getBMWidth() / SMURF_SHEET_LENGTH), (pSmurf->getBMHeight() / SMURF_SHEET_LENGTH)),
			Vector2D(pSmurf->getBMWidth() / SMURF_SHEET_LENGTH, pSmurf->getBMHeight() / SMURF_SHEET_LENGTH));;
		*/
//DRAWING STEPS
		pDisplay->draw(pSteps);
//WRITING TEXT
		pDisplay->writeText(pRedBuffer, Vector2D(0, 0), courFont, BLACK, DISPLAY_TEXT);
//DRAWING QUIMBY
		pDisplay->draw(pRedBuffer, pQuimby, origin, 1, 1);
//DRAWING RED SQUARE
		pDisplay->draw(pRedBuffer, RED_POS * DISP_WIDTH, RED_POS * DISP_HEIGHT, RED_SCALE, RED_SCALE);
//LIST ALLOCATION
		std::vector<Sprite*> smurfs;
//SMURF LOOP		
		int randX;
		int randY;
		//pDisplay->draw(origin.getX, randY, smurfSprite, 1, 1);
		for (int i = 0; i < SMURF_SHEET_LENGTH; i++)
		{
			for (int j = 0; j < SMURF_SHEET_LENGTH; j++)
			{
				randX = rand() % pDisplay->getWidth();
				randY = rand() % pDisplay->getHeight();

				Sprite* smurfSprite = new Sprite(pSmurf,
					Vector2D((pSmurf->getBMWidth() / SMURF_SHEET_LENGTH) * i,(pSmurf->getBMHeight() / SMURF_SHEET_LENGTH) * j),
					Vector2D(pSmurf->getBMWidth() / SMURF_SHEET_LENGTH, pSmurf->getBMHeight() / SMURF_SHEET_LENGTH));
				
				smurfs.push_back(smurfSprite);
//DRAWING A SMURF (EACH ONE IN A DIFFERENT PLACE)
				pDisplay->draw(origin, smurfSprite, Vector2D(randX, randY));
			
			}
		}
//SAVING PNGS, SEEMS TO NOT WORK
		pDisplay->SaveBuffer(OUTPUT_FILENAME, pDisplay->getBuffer()->getBMP());
		pDisplay->SaveBuffer(RED_FILENAME, pRedBuffer->getBMP());

		pDisplay->Flip();
		
		Timer timer;
		timer.sleep(5000.0);

//DELETES, THROWING EXCEPTIONS
		
		pDisplay->Cleanup();
		delete pDisplay;
		pDisplay = nullptr;

		
		delete pRedBuffer;
		delete pQuimby;
		delete pSteps;
		delete pPerformanceTracker;
		delete courFont;
		
		std::cout << "deleting smurf sprites" << std::endl;
		for (int i = 0; i < smurfs.size(); i++) 
		{
			delete smurfs[i];
			smurfs[i] = nullptr;
		
		}
		
		
		std::cout << "deleting smurf buffer" << std::endl;
		delete pSmurf;
		pRedBuffer = nullptr;
		pQuimby = nullptr;
		pSteps = nullptr;
		courFont = nullptr;
		pPerformanceTracker = nullptr;
		//smurfSprite = nullptr;
		pSmurf = nullptr;
	}

	//pDisplay->Cleanup();

	MemoryTracker::getInstance()->reportAllocations(cout);

	system("pause");
	return 0;
}