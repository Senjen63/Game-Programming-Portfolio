#include "Game.h"
#include <PerformanceTracker.h>
#include "GraphicsSystem.h"
#include "GraphicsBuffer.h"
#include "InputSystem.h"
#include "Animation.h"
#include "Sprite.h"
#include "Color.h"
#include <Timer.h>
#include "Font.h"
#include "Unit.h"


Game::~Game()
{
	cleanup();
}

void Game::init(int width, int height)
{
	mpGraphicsSystem = new GraphicsSystem;
	mpGraphicsSystem->init(width, height);

	mpInputSystem = new InputSystem;
	mpInputSystem->init();

	mpBackgroundBuffer = new GraphicsBuffer(ASSET_PATH + BACKGROUND_FILENAME);
	mpSmurfSpriteBuffer = new GraphicsBuffer(ASSET_PATH + SMURF_FILENAME);
	mpDeanSpriteBuffer = new GraphicsBuffer(ASSET_PATH + DEAN_FILENAME);

	mpSmurfAnim = new Animation(mpSmurfSpriteBuffer, SPRITE_SHEET_WIDTH, SPRITE_SHEET_HEIGHT, SPRITE_WIDTH, SPRITE_HEIGHT);
	mpDeanAnim = new Animation(mpDeanSpriteBuffer, SPRITE_SHEET_WIDTH, SPRITE_SHEET_HEIGHT, SPRITE_WIDTH, SPRITE_HEIGHT);

	mpUnit = new Unit(mpSmurfAnim);
}

void Game::cleanup()
{
	// Clean up game objects	
	delete mpSmurfAnim;
	delete mpDeanAnim;
	delete mpUnit;

	// Clean up game system things
	delete mpDeanSpriteBuffer;
	delete mpSmurfSpriteBuffer;
	delete mpBackgroundBuffer;

	// Clean up game systems
	delete mpInputSystem;
	delete mpGraphicsSystem;	
}

void Game::doLoop()
{
	bool keepGoing = true;
	bool unitIsSmurf = true;

	double timeToSwap = ANIM_SWAP_DELAY_IN_MS;

	PerformanceTracker performanceTracker;
	string trackerName = "loop";
	

	while (keepGoing)
	{
		performanceTracker.clearTracker(trackerName);
		performanceTracker.startTracking(trackerName);
		Timer loopTimer;
		loopTimer.start();
		
		// get input

		keepGoing = !mpInputSystem->getKeyState(KeyCode::ESCAPE_KEY);
		bool doSpeedUp = mpInputSystem->getKeyState(KeyCode::F_KEY);
		bool doSlowDown = mpInputSystem->getKeyState(KeyCode::S_KEY);
		bool switchAnim = mpInputSystem->getKeyState(KeyCode::ENTER_KEY);
		
		bool didLeftClick = mpInputSystem->getMouseState(MouseCode::LEFT_CLICK);
		Vector2D mousePos = mpInputSystem->getMousePosition();

		// do updates
		
		if (doSpeedUp && !doSlowDown)
		{
			mpSmurfAnim->speedUp();
			mpDeanAnim->speedUp();
		}

		if (doSlowDown && !doSpeedUp)
		{
			mpSmurfAnim->slowDown();
			mpDeanAnim->slowDown();
		}

		timeToSwap -= FRAME_INTERVAL_IN_MS;

		if (switchAnim && timeToSwap < 0)
		{
			if (unitIsSmurf)
			{
				mpUnit->setAnimation(mpDeanAnim);
				unitIsSmurf = false;
				timeToSwap = ANIM_SWAP_DELAY_IN_MS;
			}
			else
			{
				mpUnit->setAnimation(mpSmurfAnim);
				unitIsSmurf = true;
				timeToSwap = ANIM_SWAP_DELAY_IN_MS;
			}
		}

		if (didLeftClick)
		{
			mpUnit->setLocation(mousePos);
		}

		mpUnit->update(FRAME_INTERVAL_IN_MS);

		// draw game
		
		mpGraphicsSystem->draw(ORIGIN, mpBackgroundBuffer, .5f);
		mpGraphicsSystem->draw(mpUnit->getDrawLocation(), &mpUnit->draw());

		mpGraphicsSystem->flip();

		
		loopTimer.sleepUntilElapsed(FRAME_INTERVAL_IN_MS);
		performanceTracker.stopTracking(trackerName);

		//cout << "Frame took: " << pPerformanceTracker->getElapsedTime(trackerName) << "\n";
	}	
}

Game* gpGame = nullptr;