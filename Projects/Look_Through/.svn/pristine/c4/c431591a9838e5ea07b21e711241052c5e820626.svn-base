#pragma once

#include "Trackable.h"
#include <vector>
#include "Vector2D.h"
#include <assert.h>

#include <stdio.h> 
#include <stdlib.h> 
#include <time.h>


#include <EventListener.h>

class GraphicsSystem;
class InputSystem;
class Timer;
class UnitManager;
class GraphicsBufferManager;
class PerformanceTracker;
class Font;
class Color;
class Sprite;
class UnitManager;
class ShipManager;
class ShotManager;
class AsteroidManager;
class Animation;
class StartScreen;
class EndScreen;
class HUD;
class LanguageManager;
class DifficultyLoader;
class DataLoader;
class OptionsManager;
class SoundEffectManager;
class SoundEffect;
class SpriteCreator;


using namespace std;

class Game : public EventListener
{
	int mLeft;
	int mRight;
	int mUp;
	int mDown;
	int mMinLives;
	int mMaxLives;

	int mFiller;

	Vector2D mShipOrigin;
	Vector2D mOrigin;

	// Needs to be set via file // should be fire rate in a data file
	int mPosNum;

	int mPower;
	int mTotal;

	float mScoreShot;
	float mBoonShot;
	float mDropPoint;

	double mReloadSpeed;
	double mPowerTime;
	double mFallingSpeed;

	float mLowGravity;
	float mGravity;
	float mHighGravity;

	int mSpawn1;
	int mSpawn2;

	float mShipSpeed;

	int mAmount;
	int mSize;
	int mSole;
	int mMax;
	float mSpeed;

private:
	static Game* mpGameInstance;

	GraphicsSystem* mpGraphicsSystem;
	InputSystem* mpInputSystem;
	UnitManager* mpUnitManager;
	GraphicsBufferManager* mpGraphicsBufferManager;
	ShipManager* mpShipManager;
	AsteroidManager* mpAsteroidManger;
	ShotManager* mpShotManager;
	LanguageManager* mpLanguageManager;
	DifficultyLoader* mpDifficultyLoader;
	OptionsManager* mpOptionsManager;
	SoundEffectManager* mpSoundEffectManager;
	DataLoader* mpDataLoader;
	SpriteCreator* mpSpriteCreator;


	StartScreen* mpStartScreen;
	EndScreen* mpEndScreen;

	HUD* mpHud;

	PerformanceTracker* mpPerformanceTracker;

	Timer* mpGameTimer;

	double mGamePauseTime;

	Vector2D mDisplaySize;

	string mWindowTitle;

	string mSound;
	string mDifficulty;
	string mLanguage;

	int mScore;

	int mLives;

	bool mGameContinue;
	bool mIsStarted;
	bool mIsEnded;
	bool mIsLeft;
	bool mIsRight;

	Sprite* mpShotSprite;
	Animation* mpShipAni;
	Animation* mpAsteroidAni;
	Animation* mpFastAni;
	Animation* mpSlowAni;
	Animation* mpPointsAni;
	Animation* mpShotAni;
	Font* mpFont;
	Color* mpColor;

	Game();
	~Game();
public:
	static Game* getInstance() { assert(mpGameInstance != nullptr); return mpGameInstance; };
	static void initInstance() { mpGameInstance = new Game; };
	static void cleanUpInstance() { delete mpGameInstance; };

	void init();
	void cleanUp();

	void doLoop();

	void handleEvent(const Event& theEvent);

	GraphicsSystem* getGraphicsSystem() { return mpGraphicsSystem; }
	UnitManager* getUnitManager() { return mpUnitManager; }
	GraphicsBufferManager* getGraphicsBufferManager() { return mpGraphicsBufferManager; }
	InputSystem* getInputSystem() { return mpInputSystem; }
	LanguageManager* getLanguageManager() { return mpLanguageManager; }
	OptionsManager* getOptionsManager() { return mpOptionsManager; }
	SoundEffectManager* getSoundEffectManager() { return mpSoundEffectManager; }
	Vector2D getDimen() { return mDisplaySize; }
	int getWidth() { return int(mDisplaySize.getX()); }
	int getHeight() { return int(mDisplaySize.getY()); }
	int getLife() { return mLives; }

	void nextSound();
	void nextLanguage();
	void nextDifficulty();
	void addLife(int add);
	void addScore() { mScore += int(mScoreShot); }
	void addBoon() { mScore += int(mBoonShot); }
	void setShot(float shot) { mScoreShot = shot; }
	void setBoon(float shot) { mBoonShot = shot; }

	void difficSettings();

	Font* getFont() { return mpFont; }

	void reInit();

	void saveGame();
	void loadGame();

	void initializeMemberValues();
};