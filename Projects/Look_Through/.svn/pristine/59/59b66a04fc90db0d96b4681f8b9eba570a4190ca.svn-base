#include <iostream>
#include <string>
#include <cassert>
#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Timer.h>
#include <time.h>
#include <stdlib.h>
#include "GraphicsSystem.h"

using namespace std;

int main()
{
	PerformanceTracker* track = new PerformanceTracker;

	//Variables
	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string BACKGROUND_FILENAME = "steps.png";
	const string SMURFS_FILENAME = "smurf_sprites.png";
	const string QUIMBY_FILENAME = "mayor_quimby.png";
	const string MESSAGE = "CURSE YOU PAPA SMURF!!!!!!!!!!!";
	const string CAPTURE_ONE_FILENAME = "fullcapture.png";
	const string CAPTURE_TWO_FILENAME = "redcapture.png";
	const string FONT_FILENAME = "cour.ttf";
	const int FONT_SIZE = 30;
	const int SMURF_SPACING = 4;
	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;
	const int SQUARE_WIDTH = 800;
	const int SQUARE_HEIGHT = 600;
	const float SQUARE_SCALE = 3.0 / 4.0;
	const Color RED = Color(255, 0, 0);
	const Color BLUE = Color(0, 0, 255); //Chose blue for my text because I thought it would stand out against the red background
	int randomHori;
	int randomVert;

	//Create a new GraphicsSystem
	GraphicsSystem* display = nullptr;

	if (display->init())
	{
		display = new GraphicsSystem(DISP_WIDTH, DISP_HEIGHT);

		//Create font
		Font* messageFont = new Font((ASSET_PATH + FONT_FILENAME), FONT_SIZE);

		//Create background using new GraphicsBuffer
		GraphicsBuffer* backgroundImg = new GraphicsBuffer((ASSET_PATH + BACKGROUND_FILENAME).c_str());

		//Create red square using new GraphicsBuffer
		GraphicsBuffer* redSquare = new GraphicsBuffer(RED, SQUARE_HEIGHT, SQUARE_WIDTH);

		//Create Quimby
		GraphicsBuffer* quimbyBuff = new GraphicsBuffer((ASSET_PATH + QUIMBY_FILENAME).c_str());

		//Create Smurfs
		GraphicsBuffer* smurfBuff = new GraphicsBuffer((ASSET_PATH + SMURFS_FILENAME).c_str());

		//Make Quimby into a sprite
		Sprite quimby = Sprite(quimbyBuff, Vector2D(0, 0), Vector2D(quimbyBuff->getWidth(), quimbyBuff->getHeight()));

		//Draw everything to display
		display->draw(redSquare, quimby, 0, 0, 1, 1);
		display->displayMessage(0, 0, MESSAGE, messageFont, BLUE, redSquare);
		display->draw(backgroundImg, 0, 0, 1, 1);
		display->draw(redSquare, DISP_WIDTH / (SQUARE_SCALE * 10), DISP_HEIGHT / (SQUARE_SCALE * 10), SQUARE_SCALE, SQUARE_SCALE);

		//randomly draw the 16 smurfs on the display
		for (int i = 0; i < SMURF_SPACING; i++)
		{
			for (int j = 0; j < SMURF_SPACING; j++)
			{
				randomHori = rand() % display->getWidth();
				randomVert = rand() & display->getHeight();
				Sprite smurfs = Sprite(smurfBuff, Vector2D((smurfBuff->getWidth() / SMURF_SPACING) * i, (smurfBuff->getHeight() / SMURF_SPACING) * j), Vector2D(smurfBuff->getWidth() / SMURF_SPACING, smurfBuff->getHeight() / SMURF_SPACING));
				display->draw(randomHori, randomVert, smurfs, 1, 1);
			}
		}

		display->saveBuff(CAPTURE_ONE_FILENAME, display->getBackBuff());
		display->saveBuff(CAPTURE_TWO_FILENAME, redSquare);

		//Wait
		display->flip();
		Timer time;
		time.sleep(8000.0);

		//Delete everything
		delete redSquare;
		delete smurfBuff;
		delete quimbyBuff;
		delete backgroundImg;
		delete messageFont;
		delete display;
	}
	display = nullptr;

	delete track;
	MemoryTracker::getInstance()->reportAllocations(cout);

	system("pause");
	return 0;
}