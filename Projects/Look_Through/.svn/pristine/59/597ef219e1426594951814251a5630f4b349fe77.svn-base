#include "HUD.h"

#include <EventSystem.h>
#include "ScoreEvent.h"
#include "Game.h"

using namespace std;

HUD::HUD(GraphicsBufferManager* buffers)
{
	mCurrentScore = 0;
	mCurrentMinutes = 0;
	mCurrentSeconds = 0;
	mCurrentFrames = 0;
	mFPS = 0;

	mCol = Color(255, 0, 0);
	mFont = new Font(Game::instance()->getFontPath(), FONT_SIZE);
	
	mBuffers = buffers;
	
	EventSystem::getInstance()->addListener((EventType)SCORE_EVENT, this);
	EventSystem::getInstance()->addListener((EventType)START_EVENT, this);
}

HUD::~HUD()
{
	delete mFont;
}

void HUD::handleEvent(const Event& theEvent)
{
	if (theEvent.getType() == SCORE_EVENT)
	{
		const ScoreEvent& scoreEvent = static_cast<const ScoreEvent&>(theEvent);

		if (scoreEvent.getOperation() == ADD_SCORE) { mCurrentScore += scoreEvent.getScore(); }
		else if (scoreEvent.getOperation() == SET_SCORE) { mCurrentScore = scoreEvent.getScore(); }
	}
	else if (theEvent.getType() == START_EVENT)
	{
		mCurrentScore = 0;
		mCurrentMinutes = 0;
		mCurrentSeconds = 0;
		mCurrentFrames = 0;
	}
}

void HUD::update()
{
	//get fps in frames-per-second form
	mFPS = 1 / (mFPS / MS_TO_SECONDS);

	mCurrentFrames++;
	if (mCurrentFrames >= mFPS) 
	{
		mCurrentFrames -= mFPS;
		mCurrentSeconds++;
	}

	if (mCurrentSeconds >= SECONDS_TO_MINUTES)
	{
		mCurrentSeconds -= SECONDS_TO_MINUTES;
		mCurrentMinutes++;
	}

	mFPS = round(mFPS);
}

void HUD::draw()
{
	Game::instance()->getGraphics()->writeText(LEADING_SPACE, LEADING_SPACE, mFont, mCol, to_string(mCurrentScore), 0);
	if (mCurrentSeconds < 10) { Game::instance()->getGraphics()->writeText(Game::instance()->getGraphics()->getWidth() / 2, LEADING_SPACE, mFont, mCol, to_string(mCurrentMinutes) + ":0" + to_string(mCurrentSeconds), 1); }
	else { Game::instance()->getGraphics()->writeText(Game::instance()->getGraphics()->getWidth() / 2, LEADING_SPACE, mFont, mCol, to_string(mCurrentMinutes) + ":" + to_string(mCurrentSeconds), 1); }
	Game::instance()->getGraphics()->writeText(Game::instance()->getGraphics()->getWidth() - LEADING_SPACE, LEADING_SPACE, mFont, mCol, to_string((int)(mFPS)), 2);
}