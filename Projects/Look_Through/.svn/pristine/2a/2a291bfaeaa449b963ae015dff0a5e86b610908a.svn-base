#include "AnimationManager.h"

AnimationManager::AnimationManager()
{

}


AnimationManager::~AnimationManager()
{
    cleanup();
}


void AnimationManager::init()
{

}


void AnimationManager::cleanup()
{
    clearAll();
}


AnimationFrames* AnimationManager::getFrames(AnimKey key)
{
    if (mAnimations.find(key) != mAnimations.end())
    {
        return mAnimations[key];
    }
    else
    {
        return NULL;
    }
}


void AnimationManager::addAnimation(AnimKey key, AnimationFrames* frames)
{
    auto iter = mAnimations.find(key);

    if (iter == mAnimations.end()) //create new animation frames if key doesn't hit
    {
        mAnimations[key] = frames;
    }
    else //overwrite old frames if they do exist
    {
        *iter->second = *frames; //copied so memory address of stored AnimationFrames stays the same

        delete frames;

        //iter->second = frames;
    }
}


void AnimationManager::deleteFrames(AnimationFrames* frames)
{
    for (auto item : mAnimations)
    {
        if (item.second == frames)
        {
            if (item.second != nullptr)
            {
                delete item.second;
                item.second = nullptr;
            }
            mAnimations.erase(item.first);
            break;
        }
    }
}


void AnimationManager::deleteFrames(AnimKey key)
{
    auto target = mAnimations.find(key);

    if (target != mAnimations.end())
    {
        if (target->second != nullptr)
        {
            delete target->second;
            target->second = nullptr;
        }
        mAnimations.erase(target);
    }
}


void AnimationManager::clearAll()
{
    for (auto item : mAnimations)
    {
        if (item.second != nullptr)
        {
            delete item.second;
        }
    }

    mAnimations.clear();
}