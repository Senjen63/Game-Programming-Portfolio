#include "PowerUps.h"
#include "Game.h"
#include "GraphicsBuffer.h"
#include "GraphicsBufferManager.h"
#include "GraphicsSystem.h"
#include "UnitManager.h"
#include "Unit.h"
#include "Animation.h"
#include "Color.h"
#include "Sprite.h"
#include "SnakePlayer.h"
#include "Level.h"
#include "LevelManager.h"
#include <fstream>

PowerUps::PowerUps()
{
	createPowerUps();
}

PowerUps::~PowerUps() {};

void PowerUps::initPowerUps()
{
	Game* pGame = Game::getGameInstance();

	srand(time(NULL)); // randomize

	std::vector<Vector2D> emptySpaces = pGame->getLevelManager()->getLevelList()[pGame->getLevelManager()->getCurrentLevelIndex() - 1]->getEmptyWallCoordinates();
	std::vector<Vector2D> copyEmptySpaces = emptySpaces;

	for (int i = 0; i < pGame->getPlayer()->getPlayerSegmentCount(); i++)
	{
		for (unsigned int j = 0; j < copyEmptySpaces.size(); j++)
		{
			if (pGame->getPlayer()->getPlayerSegmentLocations()[i] == copyEmptySpaces[j])
			{
				copyEmptySpaces.erase(copyEmptySpaces.begin() + j);
			}
		}
	}

	int foodIndex = rand() % (copyEmptySpaces.size() - 1) + 0;
	int bonusFoodIndex = rand() % (copyEmptySpaces.size() - 1) + 0;
	int speedUpIndex = rand() % (copyEmptySpaces.size() - 1) + 0;
	int slowDownIndex = rand() % (copyEmptySpaces.size() - 1) + 0;

	mFoodLocation = Vector2D(copyEmptySpaces[foodIndex].getX(), copyEmptySpaces[foodIndex].getY());
	mBonusFoodLocation = Vector2D(copyEmptySpaces[bonusFoodIndex].getX(), copyEmptySpaces[bonusFoodIndex].getY());
	mSpeedUpLocation = Vector2D(copyEmptySpaces[speedUpIndex].getX(), copyEmptySpaces[speedUpIndex].getY());
	mSlowDownLocation = Vector2D(copyEmptySpaces[slowDownIndex].getX(), copyEmptySpaces[slowDownIndex].getY());

	copyEmptySpaces.erase(copyEmptySpaces.begin() + foodIndex);
	copyEmptySpaces.erase(copyEmptySpaces.begin() + bonusFoodIndex);
	copyEmptySpaces.erase(copyEmptySpaces.begin() + speedUpIndex);
	copyEmptySpaces.erase(copyEmptySpaces.begin() + slowDownIndex);
}

void PowerUps::createPowerUps()
{
	Game* pGame = Game::getGameInstance();
	GraphicsBufferManager* pBufferManager = pGame->getGraphicsBufferManager();

	const int ROW = 4;
	const int COLUMN = 1;

	const std::string FOOD_SPRITE = "food_sheet.png";
	const std::string FOOD_KEY = "food";
	const std::string BONUS_SPRITE = "bonus_sheet.png";
	const std::string BONUS_KEY = "bonus";
	const std::string SPEED_UP_SPRITE = "speed_powerup_sheet.png";
	const std::string SPEED_UP_KEY = "speedup";
	const std::string SLOW_DOWN_SPRITE = "slow_powerup_sheet.png";
	const std::string SLOW_DOWN_KEY = "slowdown";

	pGame->getGraphicsBufferManager()->createGraphicsBuffer(FOOD_KEY, FOOD_SPRITE);
	pGame->getGraphicsBufferManager()->createGraphicsBuffer(BONUS_KEY, BONUS_SPRITE);
	pGame->getGraphicsBufferManager()->createGraphicsBuffer(SPEED_UP_KEY, SPEED_UP_SPRITE);
	pGame->getGraphicsBufferManager()->createGraphicsBuffer(SLOW_DOWN_KEY, SLOW_DOWN_SPRITE);

	mFoodAnimation = Animation(true, 200);
	mBonusFoodAnimation = Animation(true, 200);
	mSpeedUpAnimation = Animation(true, 100);
	mSlowDownAnimation = Animation(true, 300);

	for (float r = 1; r <= ROW; r++)
	{
		for (float c = 1; c <= COLUMN; c++)
		{
			const int SPRITE_X = ((pBufferManager->getGraphicsBuffer(FOOD_KEY)->getBitmapWidth() / ROW) * r) -
								  (pBufferManager->getGraphicsBuffer(FOOD_KEY)->getBitmapWidth() / ROW);
			const int SPRITE_Y = ((pBufferManager->getGraphicsBuffer(FOOD_KEY)->getBitmapHeight() / COLUMN) * c) -
								  (pBufferManager->getGraphicsBuffer(FOOD_KEY)->getBitmapHeight() / COLUMN);

			Vector2D spriteLocation = Vector2D(SPRITE_X, SPRITE_Y);

			Sprite foodSprite = Sprite(spriteLocation, pBufferManager->getGraphicsBuffer(FOOD_KEY),
				(pBufferManager->getGraphicsBuffer(FOOD_KEY)->getBitmapWidth() / ROW),
				(pBufferManager->getGraphicsBuffer(FOOD_KEY)->getBitmapHeight() / COLUMN));
			Sprite bonusFoodSprite = Sprite(spriteLocation, pBufferManager->getGraphicsBuffer(BONUS_KEY),
				(pBufferManager->getGraphicsBuffer(BONUS_KEY)->getBitmapWidth() / ROW),
				(pBufferManager->getGraphicsBuffer(BONUS_KEY)->getBitmapHeight() / COLUMN));
			Sprite speedUpSprite = Sprite(spriteLocation, pBufferManager->getGraphicsBuffer(SPEED_UP_KEY),
				(pBufferManager->getGraphicsBuffer(SPEED_UP_KEY)->getBitmapWidth() / ROW),
				(pBufferManager->getGraphicsBuffer(SPEED_UP_KEY)->getBitmapHeight() / COLUMN));
			Sprite slowDownSprite = Sprite(spriteLocation, pBufferManager->getGraphicsBuffer(SLOW_DOWN_KEY),
				(pBufferManager->getGraphicsBuffer(SLOW_DOWN_KEY)->getBitmapWidth() / ROW),
				(pBufferManager->getGraphicsBuffer(SLOW_DOWN_KEY)->getBitmapHeight() / COLUMN));

			mFoodAnimation.addSprite(foodSprite);
			mBonusFoodAnimation.addSprite(bonusFoodSprite);
			mSpeedUpAnimation.addSprite(speedUpSprite);
			mSlowDownAnimation.addSprite(slowDownSprite);
		}
	}
}

void PowerUps::drawPowerUps()
{
	initPowerUps();

	Game* pGame = Game::getGameInstance();

	int bonusChance = rand() % 100 + 1;
	int speedUpChance = rand() % 100 + 1;
	int slowDownChance = rand() % 100 + 1;

	pGame->getUnitManager()->createUnit(mFoodLocation, mFoodAnimation);
	
	int bonusFoodFrequency = pGame->getLevelManager()->getLevelList()[pGame->getLevelManager()->getCurrentLevelIndex() - 1]->getBonusPointsPowerUpFrequency();
	int speedUpFrequency = pGame->getLevelManager()->getLevelList()[pGame->getLevelManager()->getCurrentLevelIndex() - 1]->getSpeedUpPowerUpFrequency();
	int slowDownFrequency = pGame->getLevelManager()->getLevelList()[pGame->getLevelManager()->getCurrentLevelIndex() - 1]->getSlowDownPowerUpFrequency();

	if (bonusChance <= bonusFoodFrequency)
	{
		pGame->getUnitManager()->createUnit(mBonusFoodLocation, mBonusFoodAnimation);
	}

	if (speedUpChance <= speedUpFrequency)
	{
		pGame->getUnitManager()->createUnit(mSpeedUpLocation, mSpeedUpAnimation);
	}

	if (slowDownChance <= slowDownFrequency)
	{
		pGame->getUnitManager()->createUnit(mSlowDownLocation, mSlowDownAnimation);
	}
}

void PowerUps::resetPowerUp(std::string powerUpType)
{
	Game* pGame = Game::getGameInstance();

	if (powerUpType == "food")
	{
		mFoodLocation = pGame->ORIGIN_LOCATION;
	}
	else if (powerUpType == "bonusPoints")
	{
		mBonusFoodLocation = pGame->ORIGIN_LOCATION;
	}
	else if (powerUpType == "speedup")
	{
		mSpeedUpLocation = pGame->ORIGIN_LOCATION;
	}
	else if (powerUpType == "slowdown")
	{
		mSlowDownLocation = pGame->ORIGIN_LOCATION;
	}
}