#include "Unit.h"

Unit::Unit()
{
	mLocation = Vector2D(0, 0);
	mPrime = true;
	mFrameTime = DEFAULT_FRAME_TIME;
	mFrameRemaining = mFrameTime;
}

Unit::Unit(Vector2D location, Animation* animationPrime, Animation* animationSecondry)
{
	mPrime = true;
	mLocation = location;
	mPrimaryAnimation = animationPrime;
	mAlternateAnimation = animationSecondry;
	mCurrentAnimation = mPrimaryAnimation;
}

//Creating a static unit for use on a grid
Unit::Unit(Sprite aSprite, Square* aSquare)
{
	mLocation = aSquare->getPosition();
	mSprite = aSprite;
	mpCurrentSquare = aSquare;
}

Unit::~Unit()
{
	
}

void Unit::update(float timePassed)
{
	mFrameRemaining -= timePassed;
	if (mFrameRemaining <= 0)
	{
		mCurrentFrame++;
		if (mCurrentFrame >= mCurrentAnimation->getTotalFrames())
		{
			mCurrentFrame = 0;
		}
		mFrameRemaining = mFrameTime;
	}
}

void Unit::setSquare(Square* newSquare)
{
	mpCurrentSquare = newSquare;
	mLocation = mpCurrentSquare->getPosition();
}

void Unit::changeAnimation()
{
	if (mPrime)
	{
		mCurrentAnimation = mAlternateAnimation;
	}
	else if (!mPrime)
	{
		mCurrentAnimation = mPrimaryAnimation;
	}
}

void Unit::draw(GraphicsSystem* system)
{
	system->draw(mLocation, mCurrentAnimation->getCurrentSprite(mCurrentFrame), DEFAULT_SCALE);
}

void Unit::setLocation(Vector2D position)
{
	mLocation = position;
}

Square* Unit::getSquare()
{
	return mpCurrentSquare;
}

Sprite Unit::getSprite()
{
	return mSprite;
}

void Unit::setAnimation(Animation* theAnimation)
{
	mPrimaryAnimation = theAnimation;
	mCurrentAnimation = mPrimaryAnimation;
}
