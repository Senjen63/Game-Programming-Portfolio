#include "Unit.h"

Unit::Unit(int fps, Vector2D location)
{
	mFps = fps;
	mLocation = location;
}

Unit::~Unit()
{

}

void Unit::update(float timePassed)
{
	mAnimations[mAnimationIndex].updateSprite(timePassed);
}

void Unit::setFramerate(int fps)
{
	mFps = fps;
	mAnimations[mAnimationIndex].changeSpriteSpeed(fps);
}

void Unit::setAnimation(int frame)
{
	mAnimationIndex = frame;
	setFramerate(mFps);
}

void Unit::addNewAnimation(int xSize, int ySize, GraphicsBuffer* buff)
{
	Animation newAnimation = Animation(mFps, xSize, ySize, true, buff);
	mAnimations.push_back(newAnimation);
}

void Unit::moveLocation(Vector2D location)
{
	mLocation = location;
}

void Unit::draw(GraphicsSystem* gameGraphics)
{
	Vector2D spriteDimensions = Vector2D(mAnimations[mAnimationIndex].getThisSprite().getHeightAndWidth()) / 2;
	Vector2D location = mLocation - spriteDimensions;
	gameGraphics->draw(location.getX(), location.getY(), mAnimations[mAnimationIndex].getThisSprite(), 1, 1);
}

Vector2D Unit::getWidthAndHeight()
{
	return mAnimations[mAnimationIndex].getThisSprite().getHeightAndWidth();
}

bool Unit::selected(Vector2D mouseLoc)
{
	float horizontalDistance = abs(mLocation.getX() - mouseLoc.getX());
	float verticalDistance = abs(mLocation.getY() - mouseLoc.getY());
	float xRad = getWidthAndHeight().getX() / 2;
	float yRad = getWidthAndHeight().getY() / 2;
	if (horizontalDistance <= xRad && verticalDistance <= yRad)
	{
		return true;
	}
	return false;
}

int Unit::getIndex()
{
	return mAnimationIndex;
}

int Unit::getAnimations()
{
	return mAnimations.size();
}