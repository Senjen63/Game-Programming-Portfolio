#include "SoundSystem.h"

SoundSystem::SoundSystem()
{
	mSoundOn = true;
	init();
	al_reserve_samples(3);
	mpShootSound = al_load_sample(DEFAULT_SOUND);
	mpExplosionSound = al_load_sample(DEFAULT_SOUND);
	mpMusic = al_load_sample(DEFAULT_SOUND);
	mpMusicInstance = al_create_sample_instance(mpMusic);
	al_set_sample_instance_playmode(mpMusicInstance, ALLEGRO_PLAYMODE_LOOP);
	al_attach_sample_instance_to_mixer(mpMusicInstance, al_get_default_mixer());
	
}

SoundSystem::SoundSystem(string soundFile)
{
	mSoundOn = true;
	init();
	al_reserve_samples(3);
	ifstream soundData(soundFile);
	if (soundData.good())
	{
		string key;
		char file[100];
		while (!soundData.eof())
		{
			soundData >> key;
			if (key == "background")
			{
				soundData >> file;
				mpMusic = al_load_sample(file);
				mpMusicInstance = al_create_sample_instance(mpMusic);
				al_set_sample_instance_playmode(mpMusicInstance, ALLEGRO_PLAYMODE_LOOP);
				al_attach_sample_instance_to_mixer(mpMusicInstance, al_get_default_mixer());
			}
			else if (key == "explosion")
			{
				soundData >> file;
				mpExplosionSound = al_load_sample(file);
			}
			else if (key == "shoot")
			{
				soundData >> file;
				mpShootSound = al_load_sample(file);
			}
		}
	}
}

void SoundSystem::operator=(const SoundSystem& aSoundSystem)
{
	mpMusic = aSoundSystem.mpMusic;
	mpMusicInstance = aSoundSystem.mpMusicInstance;
	mpExplosionSound = aSoundSystem.mpExplosionSound;
	mpShootSound = aSoundSystem.mpShootSound;
}

SoundSystem::~SoundSystem()
{
	//cleanup();
}

void SoundSystem::init()
{
	al_install_audio();
	al_init_acodec_addon();
}

void SoundSystem::cleanup()
{
	al_destroy_sample(mpShootSound);
	al_destroy_sample(mpMusic);
	al_destroy_sample_instance(mpMusicInstance);
}

void SoundSystem::playFiring()
{
	if (mSoundOn)
	{
		al_play_sample(mpShootSound, 1, 0, 1, ALLEGRO_PLAYMODE_ONCE, 0);
	}
}

void SoundSystem::playExplosion()
{
	if (mSoundOn)
	{
		al_play_sample(mpExplosionSound, 1, 0, 1, ALLEGRO_PLAYMODE_ONCE, 0);
	}
}

void SoundSystem::playMusic()
{
	al_play_sample_instance(mpMusicInstance);
}

void SoundSystem::toggleSound()
{
	if (mSoundOn)
	{
		mSoundOn = false;
		al_stop_sample_instance(mpMusicInstance);
	}
	else if (!mSoundOn)
	{
		mSoundOn = true;
		playMusic();
	}
}

bool SoundSystem::checkSound()
{
	return mSoundOn;
}
