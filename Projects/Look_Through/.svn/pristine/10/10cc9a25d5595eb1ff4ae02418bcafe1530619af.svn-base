#include "include/EventSystem.hpp"

void EventSystem::addListener( EventType eventType, const std::shared_ptr< EventListener > & pEventListener )
{
    mEventListeners.emplace_back( eventType, pEventListener );
}

void EventSystem::clearListeners()
{
    mEventListeners.clear();
}

void EventSystem::removeListener( const EventType eventType, const std::shared_ptr< EventListener > & pEventListener )
{
    for ( auto iter = mEventListeners.begin(); iter != mEventListeners.end(); ++iter )
    {
        if ( iter->first == eventType && iter->second.lock() == pEventListener )
        {
            mEventListeners.erase( iter );
            return;
        }
    }
    //mEventListeners.remove( { eventType, pEventListener } );
}

void EventSystem::invokeEvent( const Event & event )
{
    for ( auto & [ type, listener ] : mEventListeners )
    {
        if ( type == event.type && !listener.expired() )
        {
            listener.lock()->handleEvent( event );
        }
    }
}
