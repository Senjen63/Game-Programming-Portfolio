#include "FoodManager.h"

FoodManager::FoodManager()
{
	srand((unsigned)time(NULL));
	mpEventSystem = NULL;
}

void FoodManager::init()
{
	mpEventSystem = EventSystem::getInstance();
}

FoodManager::~FoodManager()
{
	mpEventSystem->cleanup();
	cleanup();
}


void FoodManager::cleanup()
{

	for (auto iter : mMap)
	{
		Unit* pUnit = iter.second;
		delete pUnit;
	}

	mMap.clear();
}


void FoodManager::createAndAddUnit(const FoodKey& key, Animation anim)
{
	Unit* pUnit = NULL;

	auto iter = mMap.find(key);

	if (iter == mMap.end())
	{
		pUnit = new Unit(anim);
		mMap[key] = pUnit;
	}
}

void FoodManager::destroyUnit(const FoodKey& key)
{
	auto iter = mMap.find(key);

	if (iter != mMap.end())
	{
		delete iter->second;
		mMap.erase(iter);
	}
}


void FoodManager::update(double dt)
{
	for (auto iter : mMap)
	{
		Unit* pUnit = iter.second;
		pUnit->update(dt);
	}
}


void FoodManager::draw(GraphicsSystem* graphSys)
{
	for (auto iter : mMap)
	{
		Unit* pUnit = iter.second;
		pUnit->draw(graphSys);
	}
}

void FoodManager::randomLoc(const FoodKey& key, int currentLevel, LevelManager* levelMan)
{
	bool drawn = false;

	while (!drawn)
	{
		int x = rand() % 14 + 2;
		int y = rand() % 13 + 5;

		x *= 32;
		y *= 32;

		Vector2D loc = Vector2D(x, y);

		if (!levelMan->returnLevel()->isFoodOnWall(loc))
		{
			mMap[key]->setLocation(loc);
			drawn = true;
		}
	}
	
}

Unit* FoodManager::getUnit(const FoodKey& key)
{
	if (mMap.size() > 0)
		return mMap[key];
	else
		return nullptr;
}

void FoodManager::collisionWithFood(Unit* snakeHead)
{
	Unit* pUnit;

	if (mMap.size() > 0)
	{
		for (auto iter : mMap)
		{
			pUnit = iter.second;
			Vector2D foodLocation = pUnit->getLocation();

			Vector2D snakeLocation = snakeHead->getLocation();

			if (foodLocation == snakeLocation)
			{
				destroyUnit(iter.first);

				if (iter.first == "food")
					mpEventSystem->fireEvent(FoodEvent((int)FoodCode::FOOD));
				if (iter.first == "pwrup")
					mpEventSystem->fireEvent(FoodEvent((int)FoodCode::PWRUP));
				if (iter.first == "pwrdwn")
					mpEventSystem->fireEvent(FoodEvent((int)FoodCode::PWRDWN));

				break;
			}
		}
	}
	
}
