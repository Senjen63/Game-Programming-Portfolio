
#include <iostream>
#include <cassert>
#include <string>
#include <vector>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>

#include "Animation.h"

const int S_SIZE = 64;
const int S_LENGTH = 4;
const float CHANGE_SPEED = 2.0f;
const float SLOWEST_SPEED = 0.5f;
const float FASTEST_SPEED = 10.0f;

//----------------------------------------Animation----------------------------------------

Animation::Animation()
{
	frameRate = 0.0f;
	timeLeft = 0.0f;
	numSprites = 0;
	currentSprite = 0;
	isLooping = false;
}

Animation::Animation(float speed, GraphicsBuffer* gBuff, bool loop) 
{
	spriteSheet.clear();
	numSprites = 0;
	//spriteSheet = new std::vector<Sprite>;

	for (int i = 0; i < S_LENGTH; i++)
	{
		for (int j = 0; j < S_LENGTH; j++)
		{
			int x = (gBuff->getWidth() / S_LENGTH) * i;
			int y = (gBuff->getHeight() / S_LENGTH) * j;
			int width = (gBuff->getWidth() / S_LENGTH);
			int height = (gBuff->getHeight() / S_LENGTH);

			//create new sprite in vector
			spriteSheet.push_back(Sprite(width, height, x, y, gBuff));
			numSprites++;
		}
	}

	currentSprite = 0;
	frameRate = 1000/speed;
	timeLeft = frameRate;
	isLooping = loop;
}

Animation::~Animation() 
{
	spriteSheet.clear(); //removes data from vector
	spriteSheet = std::vector<Sprite>(); //creating new vector deallocates the old one
}

void Animation::update(float timeElapsed)
{
	//spriteSheet - stl::vector
	//currentSprite - int
	//timePerSprite - float
	//timeRemaining - float
	//TODO: do loop -- stub

	//timeRemaining -= timeElapsed;
	//if(timeRemaining <= 0)
	//draw stuff

	timeLeft += timeElapsed;
	if (timeLeft >= 1)
	{		
		if(currentSprite >= (spriteSheet.size() - 1) && isLooping)
		{
			currentSprite = 0;
		}
		else
		{
			currentSprite++;
		}
		timeLeft -= frameRate;
	}

	//getCurrentSprite();
	//return spriteSheet[currentSprite];
}

//speed up animation
void Animation::increaseSpeed()
{
	//frameRate += CHANGE_SPEED;

	if ((frameRate - CHANGE_SPEED) > SLOWEST_SPEED) {
		frameRate -= CHANGE_SPEED;
	}
	else
		frameRate = SLOWEST_SPEED;
}

//slow down animation
void Animation::decreaseSpeed()
{
	frameRate += CHANGE_SPEED;
	/*
	if ((frameRate + CHANGE_SPEED) <= FASTEST_SPEED) {
		frameRate += CHANGE_SPEED;
	}
	else
		frameRate = FASTEST_SPEED;
		*/
}