#pragma once

#include <map>

class GraphicsBuffer;

/*
* GraphicsBufferManager Class:
- Holds all graphicsBuffers (except backBuffer -- still in graphicsSystem)
- Data
	- "map" of GraphicsBuffers (stl::map)
- Functions
	- constructor/destructor
	- adding/deleting/getting GraphicsBuffers
	- Clear() - remove and delete all GraphicsBuffers (not including backBuffer)
*/

class GraphicsBufferManager {
public:
	//constructor/destructor
	GraphicsBufferManager();
	~GraphicsBufferManager();

	//accessors/mutators
	GraphicsBuffer* getGraphicsBuffer(std::string gB) { return grahpicsBufferMap.at(gB); };
	void addGraphicsBuffer(GraphicsBuffer* newGB, std::string newName) { grahpicsBufferMap.insert({ newName, newGB }); };
	void deleteGraphicsBuffer(std::string gB) { grahpicsBufferMap.erase(gB); };
	void Clear() { grahpicsBufferMap.clear(); }; // remove and delete all GraphicsBuffers in map

private:
	std::map<std::string, GraphicsBuffer*> grahpicsBufferMap; //"map" of GraphicsBuffers (stl::map)	-	use std::make_pair(std::string, GraphicsBuffer*) to assign into map.
};