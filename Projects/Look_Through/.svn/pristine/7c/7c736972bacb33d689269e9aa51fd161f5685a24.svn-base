#include "Game.h"

Game* gpGame = nullptr;

Game::Game()
{
	gpGame;

	// initialize the member GraphicsSystem object
	mpGraphics = new GraphicsSystem;
	assert(mpGraphics);
	mpGraphics->init(DISP_WIDTH, DISP_HEIGHT);

	// initialize the member InputSystem object
	mpInput = new InputSystem;
	assert(mpInput);

	mpWoods = nullptr;
	mpDean = nullptr;
	mpSmurf = nullptr;

	mpUnit = nullptr;
}

Game::~Game()
{
	cleanup();
}

void Game::init()
{
	// initialize 3 GraphicsBuffers - woods.png, smurf_sprites.png, and dean_sprites.png
	mpWoods = new GraphicsBuffer((ASSET_PATH + BACKGROUND_FILENAME).c_str());
	mpDean = new GraphicsBuffer((ASSET_PATH + DEAN_FILENAME).c_str());
	mpSmurf = new GraphicsBuffer((ASSET_PATH + SMURFS_FILENAME).c_str());

	// initialize 2 Animations - smurf_sprites and dean_sprites
	mSmurfAnimation.addSprite(mpDean, ORIGIN_X, ORIGIN_Y, mpDean->getHeight(), mpDean->getWidth());
	mDeanAnimation.addSprite(mpSmurf, ORIGIN_X, ORIGIN_Y, mpSmurf->getHeight(), mpSmurf->getWidth());

	// initialize the Unit
	mpUnit = new Unit(mSmurfAnimation, mDeanAnimation);
}

void Game::cleanup()
{
	// clean up the program
	delete mpUnit;

	delete mpSmurf;
	delete mpDean;
	delete mpWoods;

	delete mpGraphics;
	delete mpInput;

	mpInput = nullptr;
	mpGraphics = nullptr;
}

void Game::doLoop()
{
	bool shouldContinue = true;
	double normalFPS = 60;
	double targetTime = 1000.0 / normalFPS;

	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;
	Timer loopTimer;

	while (shouldContinue)
	{

		std::string currentAnimation = "smurf";
		pPerformanceTracker->clearTracker("loop");
		pPerformanceTracker->startTracking("loop");

		loopTimer.start();

		// update the input system during every loop
		mpInput->update();

		// update the animation
		mpUnit->update(targetTime);

		// close the application
		shouldContinue = !mpInput->getKeyState(MyKeyCode::ESC_KEY);

		// change location of sprite animation
		if (mpInput->isMouseDown())
		{
			// std::cout << "Mouse is down" << std::endl;
			Vector2D pos = mpInput->getMouseState();
			mpUnit->setLocation(pos);
		}

		// speed up animation
		if (mpInput->getKeyState(MyKeyCode::F_KEY))
		{
			// std::cout << "F is down" << std::endl;
			mpUnit->setAnimationSpeed(0);
		}
				
		// slow down animation
		if (mpInput->getKeyState(MyKeyCode::S_KEY))
		{
			// std::cout << "S is down" << std::endl;
			mpUnit->setAnimationSpeed(1);
		}
		
		// switch between the two animations
		if (mpInput->getKeyState(MyKeyCode::ENT_KEY) && !mHoldDown)
		{
			// std::cout << "Enter is down" << std::endl;
			mpUnit->setAnimation();
			mHoldDown = true;
		}
		else
		{
			mHoldDown = false;
		}

		// draw the woods buffer to the back buffer
		mpGraphics->draw(mpWoods, ORIGIN_X, ORIGIN_Y, 1);

		// draw the animation
		mpUnit->draw(mpGraphics);

		// flip the screen
		mpGraphics->flip();

		loopTimer.sleepUntilElapsed(targetTime);
		pPerformanceTracker->stopTracking("loop");
		std::cout << pPerformanceTracker->getElapsedTime("loop") << std::endl;
	}

	delete pPerformanceTracker;
}