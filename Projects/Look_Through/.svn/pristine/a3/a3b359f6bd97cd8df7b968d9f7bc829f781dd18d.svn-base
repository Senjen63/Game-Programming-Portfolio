/*
Author: David Silverman
Class: GPR-250-01
Assignment: Assignment 3
Certification of Authenticity:
I certify that this assignment is entirely my own work.
 */


#pragma once
#include "game.h"


using namespace std;


Game* Game::mpsGame = nullptr;

/* Pre:  Nothing
*  Post:  A game
*  Purpose:  Create the game
*********************************************************/
Game::Game()
{

}

/* Pre:  The game
*  Post:  Nothing
*  Purpose:  Destroy the game
*********************************************************/
Game::~Game()
{

}

/* Pre:  The Game
*  Post:  The Game
*  Purpose:  Initialize the game
*********************************************************/
void Game::Init()
{
	mpGraphics = new GraphicsSystem;
	mpInput = new InputSystem;
	mpUnits = new UnitManager;
	mpGBuffers = new GraphicsBufferManager;

	mpGraphics->Init(DISPLAY_WIDTH, DISPLAY_HEIGHT);
	mpInput->Init();

	mpGBuffers->addBuffer(SMURF_FILENAME, SMARF, SMARF);
	mpGBuffers->addBuffer(DEAN_FILENAME, SMARF, SMARF);
	mpGBuffers->addBuffer(BACKGROUND_FILENAME, STAIRS_WIDTH, STAIRS_HEIGHT);
	
	mpSmurfAnimation = new Animation(mpGBuffers->getBuffer(SMURF_FILENAME), SPRITE_HEIGHT, SPRITE_WIDTH, SMURF, SMURF, SIXTY_FRAMES);
	mpDeanAnimation = new Animation(mpGBuffers->getBuffer(DEAN_FILENAME), SPRITE_HEIGHT, SPRITE_WIDTH, SMURF, SMURF, SIXTY_FRAMES);
	mpBackground = new Sprite(TOP_LEFT, STAIRS_HEIGHT, STAIRS_WIDTH, mpGBuffers->getBuffer(BACKGROUND_FILENAME));

	mpUnits->setAnimations(mpSmurfAnimation, mpDeanAnimation);

	mRate = RATE;
	mpPerformanceTracker = new PerformanceTracker;
}

/* Pre:  The game
*  Post:  The game
*  Purpose:  Destroy the game's pointers
*********************************************************/
void Game::Cleanup()
{
	delete mpPerformanceTracker;
	delete mpSmurfAnimation;
	delete mpDeanAnimation;
	delete mpBackground;
	mpGraphics->Cleanup();
	mpInput->Cleanup();
	mpUnits->Cleanup();
	mpGBuffers->Cleanup();
	delete mpGraphics;
	delete mpInput;
	delete mpUnits;
	delete mpGBuffers;
}

/* Pre:  The game
*  Post:  Animation
*  Purpose:  Draw the game
*********************************************************/
void Game::doLoop()
{
	bool keepGoing = true;

	while (keepGoing)
	{
		Timer loopTimer;
		loopTimer.start();

		mpPerformanceTracker->clearTracker("mpPerformanceTracker");
		mpPerformanceTracker->startTracking("mpPerformanceTracker");

		if (mpInput->getKeyState(mpInput->S_KEY))
		{
			mpUnits->setManagerSpeed(false, mRate);
		}

		if (mpInput->getKeyState(mpInput->F_KEY) && mpUnits->getSystemSpeed())
		{
			mpUnits->setManagerSpeed(true, mRate);
		}

		if (mpInput->getKeyState(mpInput->ENTER_KEY))
		{
			if (mIsSecondAnimation == false)
			{
				mIsSecondAnimation = true;
				mpUnits->switchLast();
			}
			else
			{
				mIsSecondAnimation = false;
				mpUnits->switchLast();
			}
		}

		if (mpInput->getLeftMouseState())
		{
			mpUnits->AddNewUnit(mpInput->getPosition());
		}

		if (mpInput->getRightMouseState())
		{
			mpUnits->deleteUnit(mpInput->getPosition());
		}

		if (mpInput->getKeyState(mpInput->ESCAPE_KEY))
		{
			keepGoing = false;
		}

		mpGraphics->Draw(TOP_LEFT, *mpBackground, HALF, HALF);
		
		mpUnits->drawAll();

		mpGraphics->Flip();

		mpUnits->updateAll(SIXTY_FRAMES);

		loopTimer.sleepUntilElapsed(SIXTY_FRAMES);
		mpPerformanceTracker->stopTracking("mpPerformanceTracker");
		cout << mpPerformanceTracker->getElapsedTime("mpPerformanceTracker") << endl;
	}
}

/* Pre:  Nothing
*  Post:  Nothing
*  Purpose:  Set the smurf animation
*********************************************************/
void Game::setSmurfAnimation(Animation animation)
{
	mpSmurfAnimation = &animation;
}

/* Pre:  Nothing
*  Post:  Nothing
*  Purpose:  Set the dean animation
*********************************************************/
void Game::setDeanAnimation(Animation animation)
{
	mpDeanAnimation = &animation;
}

/* Pre:  Nothing
*  Post:  A game
*  Purpose:  Get the game
*********************************************************/
Game* Game::getInstance()
{
	assert(mpsGame);
	return mpsGame;
}

/* Pre:  Nothing
*  Post:  A game
*  Purpose:  Create the game
*********************************************************/
void Game::createInstance()
{
	mpsGame = new Game;
}

/* Pre:  The Game
*  Post:  Nothing
*  Purpose:  Destroy the game
*********************************************************/
void Game::destroyInstance()
{
	delete mpsGame;
	mpsGame = NULL;
}