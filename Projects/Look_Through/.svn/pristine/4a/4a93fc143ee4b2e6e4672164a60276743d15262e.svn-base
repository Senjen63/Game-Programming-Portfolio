#include "InputSystem.h"
#include "Vector2D.h"
#include "EventSystem.h"
#include "InputEvent.h"

InputSystem::InputSystem()
{
	this->mpEventQueue = nullptr;
}

InputSystem::~InputSystem()
{
	cleanUp();
}

void InputSystem::init()
{
	al_install_keyboard();
	al_install_mouse();
	mpEventQueue = al_create_event_queue();
	al_register_event_source(mpEventQueue, al_get_keyboard_event_source());
	al_register_event_source(mpEventQueue, al_get_mouse_event_source());
}

void InputSystem::cleanUp()
{
	al_uninstall_keyboard();
	al_uninstall_mouse();
	al_destroy_event_queue(mpEventQueue);
}

bool InputSystem::getKeyState(KeyBoardKeys key)
{
	ALLEGRO_KEYBOARD_STATE keyState;
	al_get_keyboard_state(&keyState);
	return al_key_down(&keyState, key);
}

bool InputSystem::getMouseState(MouseButtons mouseButton)
{
	ALLEGRO_MOUSE_STATE mouseState;
	al_get_mouse_state(&mouseState);
	if (mouseState.buttons & mouseButton)
	{
		return true;
	}
	else
	{
		return false;
	}
}
Vector2D InputSystem::getMousePosition()
{ 
	ALLEGRO_MOUSE_STATE mouseState;
	al_get_mouse_state(&mouseState);
	return Vector2D(mouseState.x, mouseState.y);
}

void InputSystem::update()
{
	//EventSystem::getInstance()->init();

	while (!al_is_event_queue_empty(mpEventQueue))
	{
		ALLEGRO_EVENT theEvent;
		al_get_next_event(mpEventQueue, &theEvent);
		if (theEvent.type == ALLEGRO_EVENT_KEY_DOWN)
		{
			string releaseState = "down";
			EventSystem::getInstance()->fireEvent(InputEvent(releaseState, theEvent.keyboard.keycode));
		}
		else if (theEvent.type == ALLEGRO_EVENT_KEY_UP)
		{
			string releaseState = "up";
			EventSystem::getInstance()->fireEvent(InputEvent(releaseState, theEvent.keyboard.keycode));
		}
	}
}