#include "GraphicsSystem.h"

GraphicsSystem::GraphicsSystem()
{
	mpDisplay = nullptr;
	mpBackBuffer = nullptr;
}

GraphicsSystem::GraphicsSystem( int width, int height )
{
	mpDisplay = al_create_display( width, height );
    mpBackBuffer = new GraphicsBuffer( al_get_backbuffer( mpDisplay ) );
}


GraphicsSystem::~GraphicsSystem()
{
	cleanup();
}

bool GraphicsSystem::init()
{
	if ( !al_init() )
	{
		cout << "error initting Allegro\n";
		system( "pause" );
		return false;
	}
	if ( !al_init_image_addon() )
	{
		cout << "error - Image Add-on not initted\n";
		system( "pause" );
		return false;
	}
	if ( !al_init_font_addon() )
	{
		cout << "error - Font Add-on not initted\n";
		system( "pause" );
		return false;
	}
	if ( !al_init_ttf_addon() )
	{
		cout << "error - TTF Add-on not initted\n";
		system( "pause" );
		return false;
	}
	if ( !al_init_primitives_addon() )
	{
		cout << "error - primitives Add-on not initted\n";
		system( "pause" );
		return false;
	}

	return true;
}


void GraphicsSystem::cleanup()
{
	delete mpBackBuffer;
	al_destroy_display( mpDisplay );
}


int GraphicsSystem::getWidth()
{
	return al_get_display_width( mpDisplay );
}


int GraphicsSystem::getHeight()
{
	return al_get_display_height( mpDisplay );
}


GraphicsBuffer* GraphicsSystem::getBackBuffer()
{
	return mpBackBuffer;
}

void GraphicsSystem::flip()
{
	al_flip_display();
}


void GraphicsSystem::draw( int xPos, int yPos, Sprite sprite, float xScale, float yScale )
{
	Vector2D sourcePos = sprite.getSourcePos();
	Vector2D sourceWH = sprite.getWidthHeight();

	al_draw_scaled_bitmap( sprite.getSpriteGraphicsBuffer().mpBuffer, sourcePos.getX(), sourcePos.getY(),
		sourceWH.getX(), sourceWH.getY(), xPos, yPos, xScale * sourceWH.getX(), yScale * sourceWH.getY(), 0 );
}


void GraphicsSystem::draw( GraphicsBuffer* pBackBuffer, int xPos, int yPos, float xScale, float yScale )
{
	int defaultX = 0;
	int defaultY = 0;
	al_draw_scaled_bitmap( pBackBuffer->mpBuffer, defaultX, defaultY, pBackBuffer->getWidth(), pBackBuffer->getHeight(), 
		xPos, yPos, xScale * pBackBuffer->getWidth(), yScale * pBackBuffer->getHeight(), 0 );
}


void GraphicsSystem::draw( GraphicsBuffer* pBackBuffer, int xPos, int yPos, Sprite sprite, float xScale, float yScale )
{
	Vector2D sourcePos = sprite.getSourcePos();
	Vector2D sourceWH = sprite.getWidthHeight();
	ALLEGRO_BITMAP* oldBitmap = al_get_target_bitmap();

	al_set_target_bitmap( pBackBuffer->mpBuffer );

	al_draw_scaled_bitmap( sprite.getSpriteGraphicsBuffer().mpBuffer, sourcePos.getX(), sourcePos.getY(),
		sourceWH.getX(), sourceWH.getY(), xPos, yPos, xScale * sourceWH.getX(), yScale * sourceWH.getY(), 0 );

	al_set_target_bitmap( oldBitmap );
}


void GraphicsSystem::writeText( int xPos, int yPos, Font* font, Color color, string text )
{
	cout << color.getRed() << " " << color.getGreen() << " " << color.getBlue() << " " << color.getAlpha() << endl;
	ALLEGRO_COLOR newCol = al_map_rgba( color.getRed(), color.getGreen(), color.getBlue(), color.getAlpha() );
	al_draw_text( font->mpFont, newCol, xPos, yPos, 0, text.c_str() );
}


void GraphicsSystem::writeText( GraphicsBuffer* pBackBuffer, int xPos, int yPos, Font* font, Color color, string text )
{
	ALLEGRO_COLOR newCol = al_map_rgba( color.getRed(), color.getGreen(), color.getBlue(), color.getAlpha() );
	ALLEGRO_BITMAP* oldBitmap = al_get_target_bitmap();

	al_set_target_bitmap( pBackBuffer->mpBuffer );

	al_draw_text( font->mpFont, newCol, xPos, yPos, font->mFlag, text.c_str() );

	al_set_target_bitmap( oldBitmap );
}


bool GraphicsSystem::saveBuffer( GraphicsBuffer* saveBuffer, string fileName )
{
	if ( al_save_bitmap( fileName.c_str(), saveBuffer->mpBuffer ) )
	{
		return true;
	}

	cout << "ERROR - Save Failed" << endl;
	return false;
}