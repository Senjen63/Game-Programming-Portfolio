#include "GraphicsSystem.h"

GraphicsSystem::GraphicsSystem()
{
	mpDisplay = nullptr;
	mpBackBuff = nullptr;
}

GraphicsSystem::GraphicsSystem(int width, int height)
{
	mWidth = width;
	mHeight = height;
}

GraphicsSystem::~GraphicsSystem()
{
	cleanup();
}

GraphicsBuffer* GraphicsSystem::getBackBuff()
{
	return mpBackBuff;
}

int GraphicsSystem::getWidth()
{
	return al_get_display_width(mpDisplay);
}

int GraphicsSystem::getHeight()
{
	return al_get_display_height(mpDisplay);
}

bool GraphicsSystem::init()
{
	if (!al_init()) 
	{
		cout << "Allegro couldn't start." << endl;
		system("pause");
		return false;
	}
	if (!al_init_primitives_addon()) 
	{
		cout << "Issues with primitives." << endl;
		system("pause");
		return false;
	}
	if (!al_init_image_addon()) 
	{
		cout << "Issues with Image addon." << endl;
		system("pause");
		return false;
	}
	if (!al_init_ttf_addon())
	{
		cout << "Issues with TTF addon." << endl;
		system("pause");
		return false;
	}
	if (!al_init_font_addon())
	{
		cout << "Issues with Font addon." << endl;
		system("pause");
		return false;
	}

	mpDisplay = al_create_display(mWidth, mHeight);
	mpBackBuff = new GraphicsBuffer(al_get_backbuffer(mpDisplay));
	return true;
}

void GraphicsSystem::cleanup()
{
	delete mpBackBuff;
	al_destroy_display(mpDisplay);
}

void GraphicsSystem::flip()
{
	al_flip_display();
}

bool GraphicsSystem::saveBuff(string file, GraphicsBuffer* buff)
{
	if (al_save_bitmap(file.c_str(), buff->mpBitmap)) 
	{
		return true;
	}
	else
	{
		cout << "There was an issue saving the bitmap." << endl;
		return false;
	}
}

void GraphicsSystem::draw(int hori, int vert, Sprite sprite, float horiScale, float vertScale)
{
	Vector2D position = sprite.getSourcePosition();
	Vector2D heightAndWidth = sprite.getHeightAndWidth();
	al_draw_scaled_bitmap(sprite.getSpriteBuff().mpBitmap, position.getX(), position.getY(), heightAndWidth.getX(), heightAndWidth.getY(), hori, vert, horiScale * heightAndWidth.getX(), vertScale * heightAndWidth.getY(), 0);
}

void GraphicsSystem::draw(GraphicsBuffer* pBackBuff, Sprite sprite, int hori, int vert, float horiScale, float vertScale)
{
	Vector2D position = sprite.getSourcePosition();
	Vector2D heightAndWidth = sprite.getHeightAndWidth();
	ALLEGRO_BITMAP* oldBitmap = al_get_target_bitmap();
	al_set_target_bitmap(pBackBuff->mpBitmap);
	al_draw_scaled_bitmap(sprite.getSpriteBuff().mpBitmap, position.getX(), position.getY(), heightAndWidth.getX(), heightAndWidth.getY(), hori, vert, horiScale * heightAndWidth.getX(), vertScale * heightAndWidth.getY(), 0);
	al_set_target_bitmap(oldBitmap);
}

void GraphicsSystem::draw(GraphicsBuffer* pBackBuff, int hori, int vert, float horiScale, float vertScale)
{
	int neutralHori = 0;
	int neutralVert = 0;
	al_draw_scaled_bitmap(pBackBuff->mpBitmap, neutralHori, neutralVert, pBackBuff->getWidth(), pBackBuff->getHeight(), hori, vert, horiScale * pBackBuff->getWidth(), vertScale * pBackBuff->getHeight(), 0);
}

void GraphicsSystem::displayMessage(int hori, int vert, string message, Font* font, Color color, GraphicsBuffer* pBackBuff)
{
	int flag = 0;
	ALLEGRO_COLOR messageColor = al_map_rgba(color.getR(), color.getG(), color.getB(), color.getA());
	ALLEGRO_BITMAP* oldBitmap = al_get_target_bitmap();
	al_set_target_bitmap(pBackBuff->mpBitmap);
	al_draw_text(font->mpFont, messageColor, hori, vert, flag, message.c_str());
	al_set_target_bitmap(oldBitmap);
}

void GraphicsSystem::displayMessage(int hori, int vert, string message, Color color, Font* font)
{
	int flag = 0;
	cout << color.getR() << " ," << color.getG() << " ," << color.getB() << " ," << color.getA() << endl;
	ALLEGRO_COLOR messageColor = al_map_rgba(color.getR(), color.getG(), color.getB(), color.getA());
	al_draw_text(font->mpFont, messageColor, hori, vert, flag, message.c_str());
}