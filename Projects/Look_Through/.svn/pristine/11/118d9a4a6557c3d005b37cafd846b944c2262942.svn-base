#include "Game.h"
#include "InputSystem.h"
#include "GraphicsSystem.h"
#include "GraphicsBuffer.h"
#include "Sprite.h"
#include "Animation.h"
#include "Unit.h"
#include "Vector2D.h"
#include "Timer.h"
#include <vector>
#include <PerformanceTracker.h>

Game* gpGame = nullptr;

Game::Game()
{
	this->mIsGameContinuing = true;
	
	this->mpInputSystem = nullptr;

	this->mpGraphicsSystem = nullptr;

	this->mpWoodsBuffer = nullptr;
	this->mpSmurfBuffer = nullptr;
	this->mpDeanBuffer = nullptr;

	this->mpWoodsSprite = nullptr;
	
	this->mpSmurfAnimation = nullptr;
	this->mpDeanAnimation = nullptr;

	this->mpUnit = nullptr;

	this->mpTimer = nullptr;

	this->mpPerformanceTracker = nullptr;
}

Game::~Game()
{
	cleanup();
}

void Game::init()
{

	mpGraphicsSystem = new GraphicsSystem;
	mpGraphicsSystem->init(DISP_WIDTH, DISP_HEIGHT);

	mpInputSystem = new InputSystem;
	mpInputSystem->init();

	mpWoodsBuffer = new GraphicsBuffer(WOODS_IMAGE);
	mpSmurfBuffer = new GraphicsBuffer(SMURF_IMAGE);
	mpDeanBuffer = new GraphicsBuffer(DEAN_IMAGE);

	mpWoodsSprite = new Sprite(ORIGIN_LOCATION, mpWoodsBuffer, mpWoodsBuffer->getBitmapWidth(), mpWoodsBuffer->getBitmapHeight());

	mpSmurfAnimation = new Animation(true, 200);
	mpDeanAnimation = new Animation(true, 200);

	mpUnit = new Unit(CENTER_LOCATION);

	for (float r = 1; r <= ROW; r++)
	{
		for (float c = 1; c <= COLUMN; c++)
		{
			Vector2D smurfLocation = Vector2D((mpSmurfBuffer->getBitmapWidth() - (mpSmurfBuffer->getBitmapWidth() * (r / ROW))),
										      (mpSmurfBuffer->getBitmapHeight() - (mpSmurfBuffer->getBitmapHeight() * (c / COLUMN))));
			Sprite smurfSprite = Sprite(smurfLocation, mpSmurfBuffer,
				                       (mpSmurfBuffer->getBitmapWidth() / ROW), (mpSmurfBuffer->getBitmapHeight() / COLUMN));
			mpSmurfAnimation->addSprite(smurfSprite);

			Vector2D deanLocation = Vector2D((mpDeanBuffer->getBitmapWidth() - (mpDeanBuffer->getBitmapWidth() * (r / ROW))),
				                             (mpDeanBuffer->getBitmapHeight() - (mpDeanBuffer->getBitmapHeight() * (c / COLUMN))));
			Sprite deanSprite = Sprite(deanLocation, mpDeanBuffer,
			                          (mpDeanBuffer->getBitmapWidth() / ROW), (mpDeanBuffer->getBitmapHeight() / COLUMN));
			mpDeanAnimation->addSprite(deanSprite);
		}
	}

	mpUnit->setAnim(mpSmurfAnimation);

	mpTimer = new Timer();
	mpPerformanceTracker = new PerformanceTracker();
}

void Game::cleanup()
{
	delete mpInputSystem;
	delete mpGraphicsSystem;
	delete mpWoodsBuffer;
	delete mpSmurfBuffer;
	delete mpDeanBuffer;
	delete mpWoodsSprite;
	delete mpSmurfAnimation;
	delete mpDeanAnimation;
	delete mpUnit;
	delete mpTimer;
	delete mpPerformanceTracker;
}

void Game::gameLoop()
{
	while (mIsGameContinuing)
	{
		mpPerformanceTracker->clearTracker(LOOP);
		mpPerformanceTracker->startTracking(LOOP);
		mpTimer->start();

		bool fPressed = mpInputSystem->getCurrentInput(mpInputSystem->KEY_F);
		bool sPressed = mpInputSystem->getCurrentInput(mpInputSystem->KEY_S);
		bool enterPressed = mpInputSystem->getCurrentInput(mpInputSystem->KEY_ENTER);
		bool escapePressed = mpInputSystem->getCurrentInput(mpInputSystem->KEY_ESCAPE);
		bool leftMousePressed = mpInputSystem->getCurrentInput(mpInputSystem->LEFT_MOUSE_BUTTON);

		if (fPressed)
		{
			mpUnit->getAnim()->changeAnimSpeed(1.2f);
		}
		else if (sPressed)
		{
			mpUnit->getAnim()->changeAnimSpeed(0.8f);
		}
		else if (enterPressed)
		{
			if (mpUnit->getAnim() == mpSmurfAnimation)
			{
				mpUnit->setAnim(mpDeanAnimation);
			}
			else
			{
				mpUnit->setAnim(mpSmurfAnimation);
			}
		}
		else if (escapePressed)
		{
			mIsGameContinuing = false;
		}
		else if (leftMousePressed)
		{
			mpUnit->setLocation(mpInputSystem->getMousePosition());
		}

		mpGraphicsSystem->draw(ORIGIN_LOCATION, *mpWoodsSprite, BACKGROUND_SCALE);
		mpGraphicsSystem->draw(mpUnit->getLocation(), mpUnit->getAnim()->getCurrentSprite());
		mpGraphicsSystem->flip();

		mpUnit->update(ANIM_TICK);

		mpTimer->sleepUntilElapsed(ANIM_TICK);

		mpPerformanceTracker->stopTracking(LOOP);
		std::cout << mpPerformanceTracker->getElapsedTime(LOOP) << std::endl;
	}
}