#include "Game.h"
Game* gpGame = new Game();

Game::Game()
{
	mpGraphSystem = new GraphicsSystem();
	mInputSystem.Init();

	mpWoods = nullptr;
	mpSmurf = nullptr;
	mpDean = nullptr;

	mpSmurfAnim = nullptr;
	mpDeanAnim = nullptr;

	mpObject = nullptr;
}


Game::~Game() 
{
	CleanUp();
}

void Game::Init(int height, int width) 
{
	mpGraphSystem->Init(height, width);
	mpSmurf = new GraphicsBuffer(ASSET_PATH + SMURF_FILENAME);
	mpDean = new GraphicsBuffer(ASSET_PATH + DEAN_FILENAME);
	mpWoods = new GraphicsBuffer(ASSET_PATH + BACKGROUND_FILENAME);
	mpSmurfAnim = new Animation(mpSmurf, FRAMES, STARTING_TIMING, true);
	mpDeanAnim = new Animation(mpDean, FRAMES, STARTING_TIMING, true);
	mpObject = new Unit(mpSmurfAnim, mpDeanAnim, Vector2D());
}

void Game::DoLoop() 
{
	Timer time;
	PerformanceTracker* pTracker = new PerformanceTracker();
	float deltaTime = 0;
	//using this here to have a correct default value to draw the sprite, in the center of the screen
	Vector2D mousePos = Vector2D((mpGraphSystem->getWidth() / 2) + (SPRITE_WIDTH / 2), (mpGraphSystem->getHeight() / 2) + (SPRITE_HEIGHT / 2));
	while (!leave)
	{
		pTracker->clearTracker("loop");
		pTracker->startTracking("loop");
		time.start();
		DoInput(mousePos);
		deltaTime = time.getElapsedTime();
		//This lets us do the whole frame speed thing.
		if (deltaTime > mpObject->GetTime())
		{
			mpObject->Update();
			deltaTime = 0;
		}
		DoDrawScene(mousePos);
		time.sleepUntilElapsed(SLEEP_MS);
		//the game lags if I don't output the FPS, dunno why
		cout << pTracker->getElapsedTime("loop") << endl;
		pTracker->stopTracking("loop");
	}
	delete pTracker;
}

void Game::DoInput(Vector2D& mousePos)
{
	leave = mInputSystem.GetKey(ALLEGRO_KEY_ESCAPE);
	if (mInputSystem.GetMouseDown())
	{
		mousePos = mInputSystem.GetMousePosition();
	}

	if (mInputSystem.GetKey(ALLEGRO_KEY_S))
	{
		mpObject->SetTime(TIME_INCREMENT);

	}
	else if (mInputSystem.GetKey(ALLEGRO_KEY_F))
	{
		mpObject->SetTime(-TIME_INCREMENT);
	}

	if (mInputSystem.GetKey(ALLEGRO_KEY_ENTER))
	{
		mpObject->SwitchAnimation();
	}
}


void Game::DoDrawScene(Vector2D& mousePos)
{
	mpGraphSystem->draw(mpWoods, Vector2D(), .5);
	//wacky system my roommate and I designed while bugfixing
	//Basically you can just call "draw" on the object and get all of the values you need through it as it returns a sprite.
	mpGraphSystem->draw(mpObject->Draw()->getLocation(), mpObject->Draw(), mousePos.getX() - (SPRITE_WIDTH / 2), mousePos.getY() - (SPRITE_HEIGHT / 2));
	mpGraphSystem->flip();
}


void Game::CleanUp()
{
	delete mpSmurf;
	delete mpDean;
	delete mpSmurfAnim;
	delete mpDeanAnim;
	delete mpWoods;

	delete mpObject;

	delete mpGraphSystem;
}
