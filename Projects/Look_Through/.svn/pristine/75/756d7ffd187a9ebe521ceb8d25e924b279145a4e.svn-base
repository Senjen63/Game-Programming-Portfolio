#include "UnitManager.h"
#include "Unit.h"
#include "Player.h"

UnitManager::UnitManager()
{

}

UnitManager::~UnitManager()
{
	removeAllUnits();
}

void UnitManager::addUnit(Unit* newUnit)
{
	mUnitVector.push_back(newUnit);
}

// Removing an object might be causing issues due to the collision check
// iterating out of bounds due to the list size shrinking while its still
// iterating through it.
void UnitManager::removeUnit(int index)
{
	if (index > 0 && index < mUnitVector.size())
	{
		delete(mUnitVector[index]);
		mUnitVector.erase(mUnitVector.begin() + index);
	}

	else
	{
		std::cout << "This index is out of range." << std::endl;
	}
}

void UnitManager::removeUnit(Unit* targetUnit)
{
	// Is it possible to do this in constant time?
	for (int i = 0; i < mUnitVector.size(); i++)
	{
		if (mUnitVector[i] == targetUnit)
		{
			delete(mUnitVector[i]);
			mUnitVector.erase(mUnitVector.begin() + i);
			return;
		}
	}

	std::cout << "This unit isn't present." << std::endl;
}

void UnitManager::removeAllUnits()
{
	while (!mUnitVector.empty())
	{
		delete mUnitVector.back();
		mUnitVector.back() = nullptr;
		mUnitVector.pop_back();
	}
}

void UnitManager::updateAll(float deltaTime)
{
	for (int i = 0; i < mUnitVector.size(); i++)
	{
		mUnitVector[i]->update(deltaTime);
	}
}

void UnitManager::drawAll(GraphicsSystem* targetGraphicsSystem)
{
	for (int i = 0; i < mUnitVector.size(); i++)
	{
		mUnitVector[i]->draw(targetGraphicsSystem);
	}
}