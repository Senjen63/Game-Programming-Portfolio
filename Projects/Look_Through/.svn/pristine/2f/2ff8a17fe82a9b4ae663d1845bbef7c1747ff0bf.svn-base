#include "UnitManager.h"

void UnitManager::setScreenSize(int width, int height)
{
	mScreenWidth = width;
	mScreenHeight = height;
}

UnitManager::~UnitManager()
{
	cleanup();
}

void UnitManager::createAndAddUnit(AnimationPrototype* anim1, AnimationPrototype* anim2, AnimationPrototype* anim3, AnimationPrototype* anim4)
{
	// create unit
	Unit* pUnit = new Unit(anim1, anim2, anim3, anim4);

	// manage the unit
	mpUnits.push_back(pUnit);
}

void UnitManager::createAndAddUnit(AnimationPrototype* anim1, AnimationPrototype* anim2, AnimationPrototype* anim3)
{
	// create unit
	Unit* pUnit = new Unit(anim1, anim2, anim3);

	// manage the unit
	mpUnits.push_back(pUnit);
}

void UnitManager::createAndAddUnit(AnimationPrototype* anim1, AnimationPrototype* anim2)
{
	// create unit
	Unit* pUnit = new Unit(anim1, anim2);

	// manage the unit
	mpUnits.push_back(pUnit);
}

void UnitManager::createAndAddUnit(AnimationPrototype* anim1)
{
	// create unit
	Unit* pUnit = new Unit(anim1);

	// manage the unit
	mpUnits.push_back(pUnit);
}

void UnitManager::cleanup()
{
	for (int i = 0; i < mpUnits.size(); i++)
	{
		Unit* pUnit = mpUnits[i];
		delete pUnit;
	}

	mpUnits.clear();
}

void UnitManager::update(double dt)
{
	for (int i = 0; i < mpUnits.size(); i++)
	{
		Unit* pUnit = mpUnits[i];
		pUnit->update(dt);
	}
}

void UnitManager::draw(GraphicsSystem* graphSys)
{
	for (int i = 0; i < mpUnits.size(); i++)
	{
		Unit* pUnit = mpUnits[i];
		pUnit->draw(graphSys);
	}
}

void UnitManager::setAnimation(int index, int unitIndex)
{
	Unit* pUnit = mpUnits[unitIndex];
	pUnit->setAnimation(index);
}

void UnitManager::setLocation(Vector2D loc)
{
	mLocation = loc;

	for (int i = 0; i < mpUnits.size(); i++)
	{
		Unit* pUnit = mpUnits[i];
		pUnit->setLocation(loc);
	}
}

void UnitManager::setLocation(Vector2D loc, int index)
{
	mLocation = loc;

	if (mpUnits.size() > 0)
		mpUnits[index]->setLocation(loc);
}

Unit* UnitManager::getUnit(int index)
{
	if(mpUnits.size() > 0)
		return mpUnits[index];
	else
		return nullptr;
}