#include "InputSystem.h"
#include "MouseEvent.h"
#include "Game.h"

InputSystem::InputSystem()
{
	mpEventSystem = nullptr;
}


InputSystem::~InputSystem()
{
	CleanUp();
}


void InputSystem::Init() 
{

	mpEventSystem = EventSystem::getInstance();
	mpEventSystem->init();

}


void InputSystem::CleanUp()
{
	mpEventSystem->cleanup();
}


/*bool InputSystem::GetKey(int keyCode)
{
	ALLEGRO_KEYBOARD_STATE keyState;
	al_get_keyboard_state(&keyState);

	if (al_key_down(&keyState, keyCode)) 
	{
		return true;
	}
	else
	{
		return false;
	}	
}*/


bool InputSystem::GetMouseDown(int mouseCode)
{
	int mask = 0;
	switch (mouseCode)
	{
	case 0:
		mask = SDL_BUTTON_LMASK;
		break;
	case 1:
		mask = SDL_BUTTON_RMASK;
		break;
	case 2:
		mask = SDL_BUTTON_MMASK;
		break;
	}
	return (mMouseState & mask) && !(mMouseState & mask);
}


Vector2D InputSystem::GetMousePosition()
{
	return Vector2D(mMousePosX, mMousePosY);
}



void InputSystem::InputEventLoop()
{
	mMouseState = SDL_GetMouseState(&mMousePosX, &mMousePosY);
	while (SDL_PollEvent(&mEvent))
	{
		switch (mEvent.type)
		{
		case SDL_MOUSEBUTTONDOWN:
			MouseDownEvent(mEvent.button);
			break;
		case SDL_MOUSEBUTTONUP:
			MouseUpEvent(mEvent.button);
			break;
		case SDL_KEYDOWN:
			if (mEvent.key.keysym.sym == SDLK_ESCAPE) 
			{
				Game::GetInstance()->PauseGame();
			}
			break;
		}
	}
}

void InputSystem::MouseDownEvent(SDL_MouseButtonEvent& m)
{
	if (m.button == SDL_BUTTON_LEFT) 
	{
		mpEventSystem->fireEvent(MouseEvent((int)MouseEvents::LMB_DOWN));
	}
}

void InputSystem::MouseUpEvent(SDL_MouseButtonEvent& m)
{
	if (m.button == SDL_BUTTON_LEFT)
	{
		mpEventSystem->fireEvent(MouseEvent((int)MouseEvents::LMB_UP));
	}
}