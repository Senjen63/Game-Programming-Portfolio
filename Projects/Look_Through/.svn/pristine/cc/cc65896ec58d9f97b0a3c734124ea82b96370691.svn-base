#pragma once

#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

#include <iostream>
#include <cassert>
#include <string>
#include <vector>

#include "UnitManager.h"
#include "GraphicsBufferManager.h"
#include "Graphics.h"

class InputSystem;

//Game Class:

/*
* Game Class:
- Static class
	- Static instance function
	- Not a singleton
	- make constructor/destructor private
- Data
	- All systems and managers (GraphicsSystem/UnitManager/GraphicsBufferManager)
	- Misc Data
- Functions
	- new Accessors for systems
*/

class Game : public Trackable
{
public:
	//accessors
	GraphicsSystem* getGraphicsSystem() { return mpGSystem; };
	InputSystem* getInputSystem() { return mpISystem; };
	UnitManager* getUnitManager() { return mpUManager; };
	GraphicsBufferManager* getGraphicsBufferManager() { return mpGBManager; };
	void setWidth(int w) { gameWidth = w; };
	void setHeight(int h) { gameHeight = h; };
	void setFPS(float f) { gameFPS = f; };

	//Member functions
	bool init(unsigned int width, unsigned int height, float fps);
	void cleanup();
	void doLoop();

	static Game* getInstance() { return msGame; };
	static void createInstance();
	static void destroyInstance();
	
private:
	//Constructor/Destructor
	Game();
	~Game();

	static Game* msGame;
	int numUnits;
	int gameWidth;
	int gameHeight;
	float gameFPS;
	GraphicsSystem* mpGSystem;
	InputSystem* mpISystem;
	UnitManager* mpUManager;
	GraphicsBufferManager* mpGBManager;
};
//extern Game* game;