#include "include/MainMenuSystem.hpp"

#include <iostream>

void MainMenuSystem::createQueries()
{
}

void MainMenuSystem::onCreate()
{
    auto startOption = Option{ new Translation( 0.2f, 0.8f ), new Scale( 2.0f, 1.0f ), 0 };
    auto optionsOption = Option{ new Translation( 0.5f, 0.8f ), new Scale( 2.0f, 1.0f ), 0 };
    auto quitOption = Option{ new Translation( 0.8f, 0.8f ), new Scale( 2.0f, 1.0f ), 0 };

    startOption.ent = mpEntityManager.lock()->createEntity( { startOption.pTranslation, startOption.pScale, new SpriteHolder( "option1" ), new UIElement( true ), new TextElement( "normalFont", "Start", Font::Align::Center ) } );
    optionsOption.ent = mpEntityManager.lock()->createEntity( { optionsOption.pTranslation, optionsOption.pScale, new SpriteHolder( "option0" ), new UIElement( true ), new TextElement( "normalFont", "Options", Font::Align::Center ) } );
    quitOption.ent = mpEntityManager.lock()->createEntity( { quitOption.pTranslation, quitOption.pScale, new SpriteHolder( "option0" ), new UIElement( true ), new TextElement( "normalFont", "Quit", Font::Align::Center ) } );

    mOptions.push_back( startOption );
    mOptions.push_back( optionsOption );
    mOptions.push_back( quitOption );
}

void MainMenuSystem::onUpdate()
{
    const auto pInput = mpInputTranslator.lock();
    float horizontal = 0;
    if ( pInput->getButtonDown( KeyCode::A ) )
    {
        horizontal = -1;
    } else if ( pInput->getButtonDown( KeyCode::D ) )
    {
        horizontal = 1;
    }

    if ( abs( horizontal ) > 0.00002f )
    {
        const auto oldSprite = mpEntityManager.lock()->getComponentFromEntity< SpriteHolder >( mOptions[ mCurrentOption ].ent );
        oldSprite->name = "option0";
        if ( horizontal > 0 )
        {
            ++mCurrentOption;
            if ( mCurrentOption >= static_cast< int >(mOptions.size()) )
            {
                mCurrentOption = 0;
            }
        } else
        {
            --mCurrentOption;
            if ( mCurrentOption < 0 )
            {
                mCurrentOption = static_cast< int >(mOptions.size()) - 1;
            }
        }

        const auto newSprite = mpEntityManager.lock()->getComponentFromEntity< SpriteHolder >( mOptions[ mCurrentOption ].ent );
        newSprite->name = "option1";
    }
    if ( mpInputTranslator.lock()->getButtonDown( KeyCode::Space ) )
    {
        switch ( mCurrentOption )
        {
        case 0:
            mpEntityCommandBuffer.lock()->switchScene();
            break;
        case 1:
            break;
        case 2:
            break;
        default:
            break;
        }
    }
}
