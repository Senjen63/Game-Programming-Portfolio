#include "Timer.h"
#include "Game.h"

/// <summary>
/// Constructor adding all member variables to memory.
/// </summary>
Game::Game()
{
	mpGraphicsSystem = new GraphicsSystem;
	mpGraphicsBufferManager = new GraphicsBufferManager;
	mpUnitManager = new UnitManager;
	mpInputSystem = new InputSystem;
}

/// <summary>
/// Destructor to delete everything in memory.
/// </summary>
Game::~Game()
{
	if( mpGraphicsSystem )
	{
		delete mpGraphicsSystem;
		mpGraphicsSystem = nullptr;
	}
	if( mpInputSystem )
	{
		delete mpInputSystem;
		mpInputSystem = nullptr;
	}
	if( mpGraphicsBufferManager )
	{
		delete mpGraphicsBufferManager;
		mpGraphicsBufferManager = nullptr;
	}
	if( mpUnitManager )
	{
		delete mpUnitManager;
		mpUnitManager = nullptr;
	}
}

/// <summary>
/// Returns the static instance of the Game class.
/// </summary>
/// <returns>Static instance of Game class.</returns>
Game & Game::getInstance()
{
	static Game sGame;
	return sGame;
}

/// <summary>
/// Clears all systems from memory.
/// </summary>
void Game::cleanup()
{
	mpInputSystem->cleanup();
	mpGraphicsSystem->cleanup();

	delete mpGraphicsSystem;
	mpGraphicsSystem = nullptr;
	delete mpInputSystem;
	mpInputSystem = nullptr;
	delete mpGraphicsBufferManager;
	mpGraphicsBufferManager = nullptr;
	delete mpUnitManager;
	mpUnitManager = nullptr;
}

/// <summary>
/// Loop to draw game.
/// </summary>
void Game::doLoop()
{
	const float FPS = 1 / 60.0f;

	const std::string ASSET_PATH = "..\\..\\common\\assets\\";
	const std::string DEAN_FILENAME = "dean_sprites.png";
	const std::string WOODS_FILENAME = "woods.png";
	const std::string SMURF_FILENAME = "smurf_sprites.png";

	const std::string WOODS_KEY = "WOODS";
	const std::string DEAN_KEY = "DEAN";
	const std::string SMURF_KEY = "SMURF";

	// Create graphics buffers
	mpGraphicsBufferManager->addGraphicsBuffer( WOODS_KEY, new GraphicsBuffer( ( ASSET_PATH + WOODS_FILENAME ).c_str() ) );
	mpGraphicsBufferManager->addGraphicsBuffer( DEAN_KEY, new GraphicsBuffer( ( ASSET_PATH + DEAN_FILENAME ).c_str() ) );
	mpGraphicsBufferManager->addGraphicsBuffer( SMURF_KEY, new GraphicsBuffer( ( ASSET_PATH + SMURF_FILENAME ).c_str() ) );

	// Create sprites
	Sprite woodsSprite( *mpGraphicsBufferManager->getGraphicsBuffer( WOODS_KEY ), 0, 0, mpGraphicsBufferManager->getGraphicsBuffer( WOODS_KEY )->getWidth(), mpGraphicsBufferManager->getGraphicsBuffer( WOODS_KEY )->getHeight() );

	// Create animations
	const int TOTAL_SPRITES = 16;
	const int SPRITE_STRIDE = 60;
	const int SPRITES_PER_ROW = 4;

	Animation smurfAnimation;
	Animation deanAnimation;

	smurfAnimation.createAnimation( mpGraphicsBufferManager->getGraphicsBuffer( SMURF_KEY ), SPRITE_STRIDE, SPRITES_PER_ROW, TOTAL_SPRITES, true );
	deanAnimation.createAnimation( mpGraphicsBufferManager->getGraphicsBuffer( DEAN_KEY ), SPRITE_STRIDE, SPRITES_PER_ROW, TOTAL_SPRITES, true );

	Timer timer;
	timer.start();
	while( 1 )
	{
		// get all inputs
		mpInputSystem->pollInputs();

		// change game
		mpUnitManager->updateAll();

		// Place Unit at Position
		MouseState currentMouse = mpInputSystem->getMouseState();
		if( currentMouse.mClickType == MouseState::LEFT_CLICK )
		{
			Unit * newUnit = new Unit;
			newUnit->addAnimation( &deanAnimation );
			newUnit->addAnimation( &smurfAnimation );
			newUnit->updatePosition( currentMouse.mMousePosition );
			mpUnitManager->addUnit( newUnit );
		}

		if( currentMouse.mClickType == MouseState::RIGHT_CLICK )
		{
			// delete
			mpUnitManager->deleteUnit( currentMouse.mMousePosition );
		}

		// Switch Animation
		if( (bool) mpInputSystem->getKeyState( Key::ENTER ) )
		{
			// only do it for last unit
			mpUnitManager->getLastUnit()->setAnimation( ( mpUnitManager->getLastUnit()->getCurrentAnimationIndex() + 1 ) % 2 );
		}

		// Close Application
		if( (bool) mpInputSystem->getKeyState( Key::ESCAPE ) )
		{
			break;
		}

		if( (bool) mpInputSystem->getKeyState( Key::SPACE ) )
		{
			deanAnimation.pauseAnimation();
			smurfAnimation.pauseAnimation();
		}

		// draw game
		mpGraphicsSystem->draw( 0, 0, woodsSprite, .5f );
		mpUnitManager->drawAll( mpGraphicsSystem );
		// wait time till next frame

		mpGraphicsSystem->flip();
		timer.sleep( FPS );
	}

	smurfAnimation.cleanup();
	deanAnimation.cleanup();
	mpUnitManager->clear();
	mpGraphicsBufferManager->clear();
}

/// <summary>
/// Initializes graphics system and input system.
/// </summary>
void Game::init()
{
	mpGraphicsSystem->init();
	mpInputSystem->init();

	const int WIDTH = 800, HEIGHT = 600;
	mpGraphicsSystem->createDisplay( WIDTH, HEIGHT );
}