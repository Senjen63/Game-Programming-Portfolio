#include "InputTranslator.h"
#include "InputSystem.h"

void InputTranslator::init()
{
    EventSystem::getInstance()->addListener((EventType)KEY_DOWN, static_cast<EventListener*>(this));
    EventSystem::getInstance()->addListener((EventType)KEY_UP, static_cast<EventListener*>(this));
}

void InputTranslator::cleanUp()
{
    EventSystem::getInstance()->removeListener((EventType)KEY_DOWN, static_cast<EventListener*>(this));
    EventSystem::getInstance()->removeListener((EventType)KEY_UP, static_cast<EventListener*>(this));
}

void InputTranslator::handleEvent(const Event& theEvent)
{
    switch (theEvent.getType())
    {
    /* ---================--- */
    /* ---=== Key Down ===--- */
    /* ---================--- */
    case KEY_DOWN:
    {
        const KeyboardEvent& keyEvent = static_cast<const KeyboardEvent&>(theEvent);

        switch (keyEvent.getKeyCode())
        {
        /* ---==================--- */
        /* ---=== Player One ===--- */
        /* ---==================--- */
        case KeyCode::W:
            EventSystem::getInstance()->fireEvent(PlayerMoveEvent(PLAYER_1_MOVE_START, MoveDirection::FORWARDS));
            break;
        case KeyCode::S:
            EventSystem::getInstance()->fireEvent(PlayerMoveEvent(PLAYER_1_MOVE_START, MoveDirection::BACKWARDS));
            break;
        case KeyCode::A:
            EventSystem::getInstance()->fireEvent(PlayerTurnEvent(PLAYER_1_TURN_START, TurnDirection::LEFT));
            break;
        case KeyCode::D:
            EventSystem::getInstance()->fireEvent(PlayerTurnEvent(PLAYER_1_TURN_START, TurnDirection::RIGHT));
            break;
        case KeyCode::SPACE:
            EventSystem::getInstance()->fireEvent(PlayerShootEvent(PLAYER_1_SHOOT));
            break;
        /* ---==================--- */
        /* ---=== Player Two ===--- */
        /* ---==================--- */
        case KeyCode::UP_ARROW:
            EventSystem::getInstance()->fireEvent(PlayerMoveEvent(PLAYER_2_MOVE_START, MoveDirection::FORWARDS));
            break;
        case KeyCode::DOWN_ARROW:
            EventSystem::getInstance()->fireEvent(PlayerMoveEvent(PLAYER_2_MOVE_START, MoveDirection::BACKWARDS));
            break;
        case KeyCode::LEFT_ARROW:
            EventSystem::getInstance()->fireEvent(PlayerTurnEvent(PLAYER_2_TURN_START, TurnDirection::LEFT));
            break;
        case KeyCode::RIGHT_ARROW:
            EventSystem::getInstance()->fireEvent(PlayerTurnEvent(PLAYER_2_TURN_START, TurnDirection::RIGHT));
            break;
        case KeyCode::SLASH:
            EventSystem::getInstance()->fireEvent(PlayerShootEvent(PLAYER_2_SHOOT));
            break;
        /* ---============--- */
        /* ---=== Misc ===--- */
        /* ---============--- */
        case KeyCode::ESCAPE:
            EventSystem::getInstance()->fireEvent(GameEvent(GAME_CLOSE));
        }
    }
    break;

    /* ---==============--- */
    /* ---=== Key Up ===--- */
    /* ---==============--- */
    case KEY_UP:
    {
        const KeyboardEvent& keyEvent = static_cast<const KeyboardEvent&>(theEvent);

        switch (keyEvent.getKeyCode())
        {
        /* ---==================--- */
        /* ---=== Player One ===--- */
        /* ---==================--- */
        case KeyCode::W:
            EventSystem::getInstance()->fireEvent(PlayerMoveEvent(PLAYER_1_MOVE_STOP, MoveDirection::FORWARDS));
            break;
        case KeyCode::S:
            EventSystem::getInstance()->fireEvent(PlayerMoveEvent(PLAYER_1_MOVE_STOP, MoveDirection::BACKWARDS));
            break;
        case KeyCode::A:
            EventSystem::getInstance()->fireEvent(PlayerTurnEvent(PLAYER_1_TURN_STOP, TurnDirection::LEFT));
            break;
        case KeyCode::D:
            EventSystem::getInstance()->fireEvent(PlayerTurnEvent(PLAYER_1_TURN_STOP, TurnDirection::RIGHT));
            break;
        /* ---==================--- */
        /* ---=== Player Two ===--- */
        /* ---==================--- */
        case KeyCode::UP_ARROW:
            EventSystem::getInstance()->fireEvent(PlayerMoveEvent(PLAYER_2_MOVE_STOP, MoveDirection::FORWARDS));
            break;
        case KeyCode::DOWN_ARROW:
            EventSystem::getInstance()->fireEvent(PlayerMoveEvent(PLAYER_2_MOVE_STOP, MoveDirection::BACKWARDS));
            break;
        case KeyCode::LEFT_ARROW:
            EventSystem::getInstance()->fireEvent(PlayerTurnEvent(PLAYER_2_TURN_STOP, TurnDirection::LEFT));
            break;
        case KeyCode::RIGHT_ARROW:
            EventSystem::getInstance()->fireEvent(PlayerTurnEvent(PLAYER_2_TURN_STOP, TurnDirection::RIGHT));
            break;
        }
    }
    break;
    }
}
