#include "MenuManager.h"
#include "Unit.h"
#include "Button.h"
#include "SceneButton.h"
#include "LoadGameButton.h"
#include "MenuButton.h"
#include "OptionsButton.h"
#include "SceneManager.h"

MenuManager::MenuManager()
{
	EventSystem* pEventSystem = EventSystem::getInstance();
	pEventSystem->addListener((EventType)GAME_MOUSE_EVENT, this);
}

MenuManager::~MenuManager()
{

}

void MenuManager::loadMenu(std::string menuName)
{
	if (menuName == "Main Menu")
	{
		SceneButton* playButton = new SceneButton(make_pair(312, 300), make_pair(10, 5), "Play", "Assets/ButtonAnimationData.txt", "Assets/LevelData.txt");
		addUnit(playButton);

		LoadGameButton* loadButton = new LoadGameButton(make_pair(312, 400), make_pair(10, 5), "Load", "Assets/ButtonAnimationData.txt");
		addUnit(loadButton);

		MenuButton* optionsButton = new MenuButton(make_pair(312, 500), make_pair(15, 5), "Options", "Assets/ButtonAnimationData.txt", "Options Menu");
		addUnit(optionsButton);
	}

	else if (menuName == "Options Menu")
	{
		// Difficulty
		OptionsButton* easyDifficultyButton = new OptionsButton(make_pair(112, 200), make_pair(10, 5), "Easy", "Assets/ButtonAnimationData.txt", "Difficulty", "0.5");
		addUnit(easyDifficultyButton);

		OptionsButton* normalDifficultyButton = new OptionsButton(make_pair(312, 200), make_pair(10, 5), "Normal", "Assets/ButtonAnimationData.txt", "Difficulty", "1");
		addUnit(normalDifficultyButton);

		OptionsButton* hardDifficultyButton = new OptionsButton(make_pair(512, 200), make_pair(10, 5), "Hard", "Assets/ButtonAnimationData.txt", "Difficulty", "1.5");
		addUnit(hardDifficultyButton);

		// Language
		OptionsButton* englishButton = new OptionsButton(make_pair(112, 350), make_pair(10, 5), "English", "Assets/ButtonAnimationData.txt", "Language", "English");
		addUnit(englishButton);

		OptionsButton* spanishButton = new OptionsButton(make_pair(312, 350), make_pair(10, 5), "Spanish", "Assets/ButtonAnimationData.txt", "Language", "Spanish");
		addUnit(spanishButton);

		OptionsButton* frenchButton = new OptionsButton(make_pair(512, 350), make_pair(10, 5), "French", "Assets/ButtonAnimationData.txt", "Language", "French");
		addUnit(frenchButton);

		// Audio
		OptionsButton* soundOnButton = new OptionsButton(make_pair(312, 500), make_pair(10, 5), "On", "Assets/ButtonAnimationData.txt", "Sound", "On");
		addUnit(soundOnButton);

		OptionsButton* soundOffButton = new OptionsButton(make_pair(512, 500), make_pair(10, 5), "Off", "Assets/ButtonAnimationData.txt", "Sound", "Off");
		addUnit(soundOffButton);

		MenuButton* mainMenuButton = new MenuButton(make_pair(75, 585), make_pair(10, 5), "Back", "Assets/ButtonAnimationData.txt", "Main Menu");
		addUnit(mainMenuButton);
	}

}

void MenuManager::unloadMenu()
{
	removeAllUnits();
}

void MenuManager::handleEvent(const Event& theEvent)
{
	if (theEvent.getType() == GAME_MOUSE_EVENT)
	{
		const MouseEvent& mouseEvent = static_cast<const MouseEvent&>(theEvent);

		std::pair<int, int>mousePosition = mouseEvent.getMousePos();
		MouseType mouseInputType = mouseEvent.getMouseType();

		std::vector<Unit*> unitVector = getUnitVector();

		if (mouseInputType == LEFT_PRESSED)
		{
			for (int i = 0; i < unitVector.size(); i++)
			{
				if (dynamic_cast<Button*>(unitVector[i]) != nullptr)
				{
					std::pair<float, float> position = unitVector[i]->getLocation();
					std::pair<float, float> size = unitVector[i]->getSize();

					if (position.first - (size.first / 2) < mousePosition.first &&
						mousePosition.first < position.first + (size.first / 2) &&
						position.second - (size.second / 2) < mousePosition.second &&
						mousePosition.second < position.second + (size.second / 2))
					{
						// Potentially handle unloading menus from the button
						dynamic_cast<Button*>(unitVector[i])->onClicked();
						break;
					}
				}
			}
		}
	}
}