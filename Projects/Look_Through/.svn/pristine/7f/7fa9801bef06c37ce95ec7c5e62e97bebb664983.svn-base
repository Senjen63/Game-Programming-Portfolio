#include "Entity.h"
#include "InputSystem.h"

Entity::Entity(const Vector2D& position, const Animation& mainAnimation) :
    mPosition(position)
{
    mAnimations.push_back(mainAnimation);
}

Entity::Entity(const Vector2D& position, const std::vector<Animation>& animations, int startingIndex) :
    mPosition(position),
    mAnimations(animations),
    mCurrentIndex(startingIndex)
{ }

void Entity::update(double deltaTime)
{
    mAnimations[mCurrentIndex].update(deltaTime);
}

void Entity::draw(const GraphicsSystem& sys, float scale) const
{
    const Sprite& currentSprite = mAnimations[mCurrentIndex].getCurrentSprite();
    Vector2D offsetToCenter = currentSprite.getOffsetToCenter();

    sys.draw(mPosition - offsetToCenter, currentSprite, scale);
}

bool Entity::overlapsPosition(const Vector2D& position) const
{
    const Sprite& sprite = mAnimations[mCurrentIndex].getCurrentSprite();
    int halfWidth = sprite.getWidth() * 0.5f;
    int halfHeight = sprite.getHeight() * 0.5f;

    return
        position.getX() > mPosition.getX() - halfWidth &&   // left boundry 
        position.getX() < mPosition.getX() + halfWidth &&   // right boundry 
        position.getY() > mPosition.getY() - halfHeight &&  // top boundry 
        position.getY() < mPosition.getY() + halfHeight;    // bottom boundry 
}

void Entity::setAnimationIndex(int index)
{
    mAnimations[index].setTimingInfo(mAnimations[mCurrentIndex]);
    mCurrentIndex = index;
}
