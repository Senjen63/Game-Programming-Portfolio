#pragma once

#include <PerformanceTracker.h>
#include <Timer.h>
#include <Trackable.h>
#include <assert.h>

#include "GraphicsSystem.h"
#include "InputSystem.h"
#include "Animation.h"
#include "Unit.h"
#include "UnitManager.h"
#include "GraphicsBufferManager.h"

const std::string ASSET_PATH = "..\\..\\common\\assets\\";
const std::string BACKGROUND_FILENAME = "woods.png";
const std::string DEAN_FILENAME = "dean_sprites.png";
const std::string SMURFS_FILENAME = "smurf_sprites.png";

const std::string WOOD_GB = "woods";
const std::string DEAN_GB = "dean";
const std::string SMURF_GB = "smurf";

const int ORIGIN_X = 0;
const int ORIGIN_Y = 0;
const int DISP_WIDTH = 800;
const int DISP_HEIGHT = 600;

static class Game : public Trackable
{
	public:
		static void createInstance() { mpGameInstance = new Game(DISP_HEIGHT, DISP_WIDTH); };
		static Game* getInstance() { assert(mpGameInstance != nullptr); return mpGameInstance; };
		static void destroyInstance() { delete mpGameInstance; };

		void init();
		void cleanup();
		void doLoop();

	private:
		Game(int width, int height);
		~Game();

		bool mHoldDown = false;

		// managers
		GraphicsBufferManager* mpGraphicsBufferManager;
		UnitManager* mpUnitManager;

		GraphicsSystem* mpGraphics;
		InputSystem* mpInput;

		// create 2 Animations
		Animation mSmurfAnimation;
		Animation mDeanAnimation;

		static Game* mpGameInstance;
};