#include "Unit.h"
#include "Game.h"

Unit::Unit()
{
	mpCurrentAnim = nullptr;
	mpAltAnim = nullptr;
	mLocation = Vector2D();
	paused = false;
}

Unit::Unit(Animation* pCurrent, Animation* pAlt, Vector2D location)
{
	mpCurrentAnim = pCurrent;
	mpAltAnim = pAlt;
	mLocation = location;
	paused = false;
}

Unit::Unit(string currentAnimKey, string altAnimKey, Vector2D pos)
{
	mpCurrentAnim = new Animation(Game::getGame()->getBufferManager()->getBuffer(currentAnimKey), true);
	mpAltAnim = new Animation(Game::getGame()->getBufferManager()->getBuffer(altAnimKey), true);
	mLocation = pos;
	paused = false;
}

Unit::Unit(Vector2D loc, GraphicsBuffer* pBuffer)
{
	//mpCurrentAnim = new Animation(pBuffer, 1, 1, true);
	//mpAltAnim = mpCurrentAnim;
	//mLocation = Vector2D();

}

Unit::Unit(string key, Vector2D pos)
{
	mpCurrentAnim = new Animation(Game::getGame()->getBufferManager()->getBuffer(key));
	//mpAltAnim = new Animation(mpCurrentAnim);
	mpAltAnim = mpCurrentAnim;
	mLocation = pos;
	paused = false;
}

Unit::Unit(string key, Vector2D pos, int width, int height)
{
	mpCurrentAnim = new Animation(Game::getGame()->getBufferManager()->getBuffer(key), width, height);
	//mpAltAnim = new Animation(mpCurrentAnim);
	mpAltAnim = mpCurrentAnim;
	mLocation = pos;
	paused = false;
}

Vector2D Unit::getPos()
{
	return mLocation;
}

void Unit::setPos(Vector2D pos)
{
	mLocation = pos;
}

Unit::~Unit()
{
	bool deleteAlt = (mpCurrentAnim != mpAltAnim);
	delete mpCurrentAnim;
	if (deleteAlt)
	{
		delete mpAltAnim;
	}
	mpCurrentAnim = nullptr;
	mpAltAnim = nullptr;
	paused = true;
}

float Unit::getTime()
{
	return mpCurrentAnim->getTime();
}

void Unit::Update(double dt)
{
	if (!paused)
	{
		if(mpCurrentAnim != nullptr)
			mpCurrentAnim->Update(dt);
		if(mpAltAnim != nullptr)
			mpAltAnim->Update(dt);
	}
}

void Unit::swapAnim()
{
	Animation* temp = mpCurrentAnim;
	mpCurrentAnim = mpAltAnim;
	mpAltAnim = temp;
}
void Unit::Draw(GraphicsSystem* display)
{
	display->Draw(mpCurrentAnim->getCurrentSprite()->getX(), mpCurrentAnim->getCurrentSprite()->getY(), 
		mpCurrentAnim->getCurrentSprite(), mLocation.getX() + (WALL_WIDTH / 2), mLocation.getY() + (WALL_HEIGHT / 2));
}



void Unit::changeTiming(float timerChange)
{
	mpCurrentAnim->changeTimer(timerChange);
	mpAltAnim->changeTimer(timerChange);
}

void Unit::pauseUnpause()
{
	paused = !paused;
}