#pragma once

#include "Sprite.h"
#include <Trackable.h>
#include <Timer.h>

class Animation : public Trackable
{
public:
    Animation() = default;
    Animation(const Animation&);
    ~Animation();

    Animation(const Sprite* pSpriteArray, int numOfSprites, float frameRate, bool loops = true);
    Animation(const std::string& spriteSheetPath, int spriteWidth, int spriteHeight, int numSprites, float frameRate, bool loops);

    void update(double deltaTime);
    void setFrameRate(float frameRate) { if (mFrameRate > 0) { mFrameRate = frameRate; } }
    void addFrameRate(float deltaFrameRate) { if (mFrameRate + deltaFrameRate > 0) { mFrameRate += deltaFrameRate; } }

    float getFrameRate() { mFrameRate; }

    /// <summary>
    /// Gets the sprite that the animation is currently on. 
    /// Returns last sprite if it does not loop and there is no more sprites to show. 
    /// </summary>
    /// <returns></returns>
    const Sprite* getCurrentSprite() const;

private:
    const Sprite* mpSpriteArray;
    int mNumOfSprites;
    bool mLoops;

    float mFrameRate;
    double mTimePast;

    bool mCreatedSprites;
    GraphicsBuffer* mpSpriteBuffer;
};
