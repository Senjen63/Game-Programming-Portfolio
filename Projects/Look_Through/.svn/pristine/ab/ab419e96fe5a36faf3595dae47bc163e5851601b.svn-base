#include "../Pieces/PieceManager.h"
#include "../Game.h"

PieceManager::PieceManager()
{
	
}

PieceManager::~PieceManager()
{
	cleanUp();
}

void PieceManager::cleanUp()
{
	unsigned int i = 0;

	delete mpKing;

	for (i = 0; i < mpQueens.size(); i++)
	{
		Queen* pQueen = mpQueens[i];
		delete pQueen;
	}

	for (i = 0; i < mpBishops.size(); i++)
	{
		Bishop* pBishop = mpBishops[i];
		delete pBishop;
	}

	for (i = 0; i < mpKnights.size(); i++)
	{
		Knight* pKnight = mpKnights[i];
		delete pKnight;
	}

	for (i = 0; i < mpRooks.size(); i++)
	{
		Rook* pRook = mpRooks[i];
		delete pRook;
	}

	for (i = 0; i < mpPawns.size(); i++)
	{
		Pawn* pPawn = mpPawns[i];
		delete pPawn;
	}

	mpQueens.clear();
	mpBishops.clear();
	mpKnights.clear();
	mpRooks.clear();
	mpPawns.clear();
}

void PieceManager::resetStartW()
{
	int i;

	//make pawns
	for (i = 2; i <= 9; i++)
	{
		Pawn* pPawn = new Pawn(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWPawn()),
			Vector2D(Game::getInstance()->getSpriteWidth() * i, DISP_HEIGHT - Game::getInstance()->getSpriteHeight() * 2), true, true);

		mpPawns.push_back(pPawn);
	}

	//make rooks
	mpRooks.push_back(new Rook(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWRook()),
					Vector2D(Game::getInstance()->getSpriteWidth() * 2, DISP_HEIGHT - Game::getInstance()->getSpriteHeight()), true));
	mpRooks.push_back(new Rook(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWRook()),
		Vector2D(DISP_WIDTH - Game::getInstance()->getSpriteWidth(), DISP_HEIGHT - Game::getInstance()->getSpriteHeight()), true));

	//make knights
	mpKnights.push_back(new Knight(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWKnight()),
		Vector2D(Game::getInstance()->getSpriteWidth() * 3, DISP_HEIGHT - Game::getInstance()->getSpriteHeight())));
	mpKnights.push_back(new Knight(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWKnight()),
		Vector2D(DISP_WIDTH - Game::getInstance()->getSpriteWidth() * 2, DISP_HEIGHT - Game::getInstance()->getSpriteHeight())));

	//make bishops
	mpBishops.push_back(new Bishop(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWBishop()),
		Vector2D(Game::getInstance()->getSpriteWidth() * 4, DISP_HEIGHT - Game::getInstance()->getSpriteHeight())));
	mpBishops.push_back(new Bishop(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWBishop()),
		Vector2D(DISP_WIDTH - Game::getInstance()->getSpriteWidth() * 3, DISP_HEIGHT - Game::getInstance()->getSpriteHeight())));

	//make queen
	mpQueens.push_back(new Queen(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWQueen()),
		Vector2D(Game::getInstance()->getSpriteWidth() * 6, DISP_HEIGHT - Game::getInstance()->getSpriteHeight())));

	//make king
	mpKing = new King(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWKing()),
		Vector2D(Game::getInstance()->getSpriteWidth() * 5, DISP_HEIGHT - Game::getInstance()->getSpriteHeight()), true);
}

void PieceManager::loadStartW(ifstream& fin)
{
	string tmp;
	int x, y;
	int firstMove;

	while (tmp != "}")
	{
		fin >> tmp;

		if (tmp == "King=")
		{
			fin >> x >> y >> firstMove;
			mpKing = new King(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWKing()), Vector2D(x, y), firstMove);
		}

		if (tmp == "Queen=")
		{
			fin >> x >> y;
			mpQueens.push_back(new Queen(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWQueen()), Vector2D(x, y)));
		}

		if (tmp == "Bishop=")
		{
			fin >> x >> y;
			mpBishops.push_back(new Bishop(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWBishop()), Vector2D(x, y)));
		}

		if (tmp == "Knight=")
		{
			fin >> x >> y;
			mpKnights.push_back(new Knight(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWKnight()), Vector2D(x, y)));
		}

		if (tmp == "Rook=")
		{
			fin >> x >> y >> firstMove;
			mpRooks.push_back(new Rook(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWRook()), Vector2D(x, y), firstMove));
		}

		if (tmp == "Pawn=")
		{
			fin >> x >> y >> firstMove;
			mpPawns.push_back(new Pawn(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWPawn()), Vector2D(x, y), true, firstMove));
		}
	}
}

void PieceManager::resetStartB()
{
	int i;

	//make pawns
	for (i = 2; i <= 9; i++)
	{
		Pawn* pPawn = new Pawn(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getBPawn()),
			Vector2D(Game::getInstance()->getSpriteWidth() * i, Game::getInstance()->getSpriteHeight() * 3), false, true);

		mpPawns.push_back(pPawn);
	}

	//make rooks
	mpRooks.push_back(new Rook(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getBRook()),
					Vector2D(Game::getInstance()->getSpriteWidth() * 2, 2 * Game::getInstance()->getSpriteHeight()), true));
	mpRooks.push_back(new Rook(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getBRook()),
		Vector2D(DISP_WIDTH - Game::getInstance()->getSpriteWidth(), 2 * Game::getInstance()->getSpriteHeight()), true));

	//make knights
	mpKnights.push_back(new Knight(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getBKnight()),
		Vector2D(Game::getInstance()->getSpriteWidth() * 3, 2 * Game::getInstance()->getSpriteHeight())));
	mpKnights.push_back(new Knight(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getBKnight()),
		Vector2D(DISP_WIDTH - Game::getInstance()->getSpriteWidth() * 2, 2 * Game::getInstance()->getSpriteHeight())));

	//make bishops
	mpBishops.push_back(new Bishop(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getBBishop()),
		Vector2D(Game::getInstance()->getSpriteWidth() * 4, 2 * Game::getInstance()->getSpriteHeight())));
	mpBishops.push_back(new Bishop(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getBBishop()),
		Vector2D(DISP_WIDTH - Game::getInstance()->getSpriteWidth() * 3, 2 * Game::getInstance()->getSpriteHeight())));

	//make queen
	mpQueens.push_back(new Queen(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getBQueen()),
		Vector2D(Game::getInstance()->getSpriteWidth() * 6, 2 * Game::getInstance()->getSpriteHeight())));

	//make king
	mpKing = new King(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getBKing()),
		Vector2D(Game::getInstance()->getSpriteWidth() * 5, 2 * Game::getInstance()->getSpriteHeight()), true);
}

void PieceManager::loadStartB(ifstream& fin)
{
	string tmp;
	int x, y;
	int firstMove;

	while (tmp != "}")
	{
		fin >> tmp;

		if (tmp == "King=")
		{
			fin >> x >> y >> firstMove;
			mpKing = new King(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getBKing()), Vector2D(x, y), firstMove);
		}

		if (tmp == "Queen=")
		{
			fin >> x >> y;
			mpQueens.push_back(new Queen(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getBQueen()), Vector2D(x, y)));
		}

		if (tmp == "Bishop=")
		{
			fin >> x >> y;
			mpBishops.push_back(new Bishop(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getBBishop()), Vector2D(x, y)));
		}

		if (tmp == "Knight=")
		{
			fin >> x >> y;
			mpKnights.push_back(new Knight(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getBKnight()), Vector2D(x, y)));
		}

		if (tmp == "Rook=")
		{
			fin >> x >> y >> firstMove;
			mpRooks.push_back(new Rook(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getBRook()), Vector2D(x, y), firstMove));
		}

		if (tmp == "Pawn=")
		{
			fin >> x >> y >> firstMove;
			mpPawns.push_back(new Pawn(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getBPawn()), Vector2D(x, y), false, firstMove));
		}
	}
}

void PieceManager::save(ofstream& fout)
{
	unsigned int i;

	fout << "King= " << mpKing->getPosition().getX() << " " << mpKing->getPosition().getY() << " " << mpKing->getFirstMove() << endl << endl;

	for (i = 0; i < mpQueens.size(); i++)
	{
		fout << "Queen= " << mpQueens[i]->getPosition().getX() << " " << mpQueens[i]->getPosition().getY() << endl;
	}

	fout << endl;

	for (i = 0; i < mpBishops.size(); i++)
	{
		fout << "Bishop= " << mpBishops[i]->getPosition().getX() << " " << mpBishops[i]->getPosition().getY() << endl;
	}

	fout << endl;

	for (i = 0; i < mpKnights.size(); i++)
	{
		fout << "Knight= " << mpKnights[i]->getPosition().getX() << " " << mpKnights[i]->getPosition().getY() << endl;
	}

	fout << endl;

	for (i = 0; i < mpRooks.size(); i++)
	{
		fout << "Rook= " << mpRooks[i]->getPosition().getX() << " " << mpRooks[i]->getPosition().getY() << " " << mpRooks[i]->getFirstMove() << endl;
	}

	fout << endl;

	for (i = 0; i < mpPawns.size(); i++)
	{
		fout << "Pawn= " << mpPawns[i]->getPosition().getX() << " " << mpPawns[i]->getPosition().getY() << " " << mpPawns[i]->getFirstMove() << endl;
	}

	fout << "}\n\n";
}

void PieceManager::drawAll(GraphicsSystem* pGraphicsSystem, PieceManager& team, PieceManager &otherTeam)
{
	unsigned int i;

	for (i = 0; i < mpPawns.size(); i++)
	{
		mpPawns[i]->draw(pGraphicsSystem, team, otherTeam);
	}

	for (i = 0; i < mpKnights.size(); i++)
	{
		mpKnights[i]->draw(pGraphicsSystem, team, otherTeam);
	}

	for (i = 0; i < mpRooks.size(); i++)
	{
		mpRooks[i]->draw(pGraphicsSystem, team, otherTeam);
	}

	for (i = 0; i < mpBishops.size(); i++)
	{
		mpBishops[i]->draw(pGraphicsSystem, team, otherTeam);
	}

	for (i = 0; i < mpQueens.size(); i++)
	{
		mpQueens[i]->draw(pGraphicsSystem, team, otherTeam);
	}

	mpKing->draw(pGraphicsSystem, team, otherTeam);
}

bool PieceManager::checkSelection(Vector2D mousePos, PieceManager& team, PieceManager& otherTeam)
{
	unsigned int i;

	for (i = 0; i < mpQueens.size(); i++)
	{
		if (mpQueens[i]->checkMouseCollision(mousePos))
		{
			unselect();
			//cout << "Queen " << i + 1 << endl;
			mpQueens[i]->selected(true);
			return true;
		}

		if (mpQueens[i]->getSelected())
		{
			mpQueens[i]->checkMovePts(mousePos, team, otherTeam);
		}
	}

	for (i = 0; i < mpBishops.size(); i++)
	{
		if (mpBishops[i]->checkMouseCollision(mousePos))
		{
			unselect();
			//cout << "Bishop " << i + 1 << endl;
			mpBishops[i]->selected(true);
			return true;
		}

		if (mpBishops[i]->getSelected())
		{
			mpBishops[i]->checkMovePts(mousePos, team, otherTeam);
		}
	}

	for (i = 0; i < mpKnights.size(); i++)
	{
		if (mpKnights[i]->checkMouseCollision(mousePos))
		{
			unselect();
			//cout << "Knight " << i + 1 << endl;
			mpKnights[i]->selected(true);
			return true;
		}

		if (mpKnights[i]->getSelected())
		{
			mpKnights[i]->checkMovePts(mousePos, team, otherTeam);
		}
	}

	for (i = 0; i < mpRooks.size(); i++)
	{
		if (mpRooks[i]->checkMouseCollision(mousePos))
		{
			unselect();
			//cout << "Rook " << i + 1 << endl;
			mpRooks[i]->selected(true);
			return true;
		}

		if (mpRooks[i]->getSelected())
		{
			mpRooks[i]->checkMovePts(mousePos, team, otherTeam);
		}
	}

	for (i = 0; i < mpPawns.size(); i++)
	{
		if (mpPawns[i]->checkMouseCollision(mousePos))
		{
			//cout << "Pawn " << i + 1 << endl;
			unselect();
			mpPawns[i]->selected(true);
			return true;
		}

		if (mpPawns[i]->getSelected())
		{
			mpPawns[i]->checkMovePts(mousePos, team, otherTeam);
		}
	}

	if (mpKing->checkMouseCollision(mousePos))
	{
		unselect();
		//cout << "King" << endl;
		mpKing->selected(true);
		return true;
	}
	else if (mpKing->getSelected())
	{
		mpKing->checkMovePts(mousePos, team, otherTeam);
	}

	return false;
}

bool PieceManager::checkPosition(Vector2D position)
{
	unsigned int i;

	if (mpKing->getPosition() == position)
		return true;

	for (i = 0; i < mpPawns.size(); i++)
	{
		if (mpPawns[i]->getPosition() == position)
			return true;
	}

	for (i = 0; i < mpKnights.size(); i++)
	{
		if (mpKnights[i]->getPosition() == position)
			return true;
	}

	for (i = 0; i < mpRooks.size(); i++)
	{
		if (mpRooks[i]->getPosition() == position)
			return true;
	}

	for (i = 0; i < mpBishops.size(); i++)
	{
		if (mpBishops[i]->getPosition() == position)
			return true;
	}

	for (i = 0; i < mpQueens.size(); i++)
	{
		if (mpQueens[i]->getPosition() == position)
			return true;
	}

	return false;
}

void PieceManager::checkCheck(PieceManager& team, PieceManager& otherTeam)
{
	Vector2D tmp;

	if (otherTeam.getAttackPts(mpKing->getPosition(), team, otherTeam, tmp))
	{
		mInCheck = true;
		mpKing->checkCheck(team, otherTeam);
	}
	else
	{
		mInCheck = false;
	}
}

void PieceManager::checkMate()
{
	cout << "check mate\n";
}

void PieceManager::deletePiece(Vector2D position)
{
	unsigned int i;

	Game::getInstance()->playSound(0);//Death sound

	if (mpKing->getPosition() == position)
	{
		mInCheck = true;
	}

	for (i = 0; i < mpPawns.size(); i++)
	{
		if (mpPawns[i]->getPosition() == position)
		{
			delete mpPawns[i];
			mpPawns.erase(mpPawns.begin() + i);
			return;
		}
	}

	for (i = 0; i < mpKnights.size(); i++)
	{
		if (mpKnights[i]->getPosition() == position)
		{
			delete mpKnights[i];
			mpKnights.erase(mpKnights.begin() + i);
			return;
		}
	}

	for (i = 0; i < mpRooks.size(); i++)
	{
		if (mpRooks[i]->getPosition() == position)
		{
			delete mpRooks[i];
			mpRooks.erase(mpRooks.begin() + i);
			return;
		}
	}

	for (i = 0; i < mpBishops.size(); i++)
	{
		if (mpBishops[i]->getPosition() == position)
		{
			delete mpBishops[i];
			mpBishops.erase(mpBishops.begin() + i);
			return;
		}
	}

	for (i = 0; i < mpQueens.size(); i++)
	{
		if (mpQueens[i]->getPosition() == position)
		{
			delete mpQueens[i];
			mpQueens.erase(mpQueens.begin() + i);
			return;
		}
	}

	
}

void PieceManager::movePiece(Vector2D position, Vector2D newLocation)
{
	unsigned int i;

	for (i = 0; i < mpPawns.size(); i++)
	{
		if (mpPawns[i]->getPosition() == position)
		{
			mpPawns[i]->setPosition(newLocation);
			return;
		}
	}

	for (i = 0; i < mpKnights.size(); i++)
	{
		if (mpKnights[i]->getPosition() == position)
		{
			mpKnights[i]->setPosition(newLocation);
			return;
		}
	}

	for (i = 0; i < mpRooks.size(); i++)
	{
		if (mpRooks[i]->getPosition() == position)
		{
			mpRooks[i]->setPosition(newLocation);
			return;
		}
	}

	for (i = 0; i < mpBishops.size(); i++)
	{
		if (mpBishops[i]->getPosition() == position)
		{
			mpBishops[i]->setPosition(newLocation);
			return;
		}
	}

	for (i = 0; i < mpQueens.size(); i++)
	{
		if (mpQueens[i]->getPosition() == position)
		{
			mpQueens[i]->setPosition(newLocation);
			mpQueens[i]->resetPosition();
			return;
		}
	}
}

void PieceManager::unselect()
{
	unsigned int i;

	mpKing->selected(false);

	for (i = 0; i < mpQueens.size(); i++)
	{
		mpQueens[i]->selected(false);
	}

	for (i = 0; i < mpBishops.size(); i++)
	{
		mpBishops[i]->selected(false);
	}

	for (i = 0; i < mpKnights.size(); i++)
	{
		mpKnights[i]->selected(false);
	}

	for (i = 0; i < mpRooks.size(); i++)
	{
		mpRooks[i]->selected(false);
	}

	for (i = 0; i < mpPawns.size(); i++)
	{
		mpPawns[i]->selected(false);
	}
}

bool PieceManager::inBounds(Vector2D position)
{
	return (mUpperBounds.getX() >= position.getX() && mLowerBounds.getX() <= position.getX()   &&
		mUpperBounds.getY() >= position.getY() && mLowerBounds.getY() <= position.getY());
}

void PieceManager::promote(Vector2D position)
{
	unsigned int i;
	bool white = false;

	for (i = 0; i < mpPawns.size(); i++)
	{
		if (mpPawns[i]->getPosition() == position)
		{
			white = mpPawns[i]->getTeam();
			delete mpPawns[i];
			mpPawns.erase(mpPawns.begin() + i);
		}
	}

	if (white)
		mpQueens.push_back(new Queen(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWQueen()), position));
	else
		mpQueens.push_back(new Queen(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getBQueen()), position));
}

void PieceManager::castle(Rook* pRook)
{
	Vector2D direction;

	if (pRook->getPosition().getX() > mpKing->getPosition().getX())
		direction = Vector2D(80, 0);
	else
		direction = Vector2D(-80, 0);

	pRook->setPosition(mpKing->getPosition());
	mpKing->setPosition(mpKing->getPosition() + direction);

	pRook->setFirstMove();
	mpKing->setFirstMove();
}

bool PieceManager::getAttackPts(Vector2D position, PieceManager& team, PieceManager& otherTeam, Vector2D& location)
{
	unsigned int i = 0;
	bool found = false;

	found = mpKing->checkAttackPts(position);

	if (found)
		return found;

	for (i = 0; i < mpQueens.size(); i++)
	{
		found = mpQueens[i]->checkAttackPts(position, team, otherTeam, location);

		if (found)
			return found;
	}

	for (i = 0; i < mpBishops.size(); i++)
	{
		found = mpBishops[i]->checkAttackPts(position, team, otherTeam, location);

		if (found)
			return found;
	}

	for (i = 0; i < mpKnights.size(); i++)
	{
		found = mpKnights[i]->checkAttackPts(position, location);

		if (found)
			return found;
	}

	for (i = 0; i < mpRooks.size(); i++)
	{
		found = mpRooks[i]->checkAttackPts(position, team, otherTeam, location);

		if (found)
			return found;
	}

	for (i = 0; i < mpPawns.size(); i++)
	{
		found = mpPawns[i]->checkAttackPts(position, location);

		if (found)
			return found;
	}

	return found;
}
