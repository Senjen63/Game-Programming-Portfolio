#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>
#include <iostream>
#include <cassert>
#include <string>
#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>
#include "GraphicsSystem.h"
#include <random>
#include <time.h>

using namespace std;
int main()
{
	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;

	Timer timer;

	srand(time(NULL));

	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string BACKGROUND_FILE = "steps.png";
	const string QUIMBY_FILE = "Mayor_Quimby.png";
	const string SMURFS_FILE = "smurf_sprites.png";
	const string COUR_FILENAME = "cour.ttf";

	const int FONT_SIZE = 44;
	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;

	const float MID = 0.5;
	const float OUTSIDE = 0.1667;
	const float INSIDE = 0.6667;

	Color redColor = Color(255, 0, 0);
	Color blackColor = Color(0, 0, 0);

	int xCoord = 0;
	int yCoord = 0;

	const int NUM_SMURFS_ROW = 4;
	const int SMURF_SIZE = 60;

	float randX;
	float randY;

	Vector2D smurfPos;


	GraphicsSystem* pDisplay = new GraphicsSystem(DISP_HEIGHT, DISP_WIDTH);
	pDisplay->init();

	GraphicsBuffer* pBackgroundBuffer = new GraphicsBuffer(ASSET_PATH + BACKGROUND_FILE);
	GraphicsBuffer* pSmurfsBuffer = new GraphicsBuffer(ASSET_PATH + SMURFS_FILE);
	GraphicsBuffer* pQuimbyBuffer = new GraphicsBuffer(ASSET_PATH + QUIMBY_FILE);
	GraphicsBuffer* pRedBackBuffer = new GraphicsBuffer(DISP_WIDTH, DISP_HEIGHT);

	Font* pCour = new Font(ASSET_PATH + COUR_FILENAME, FONT_SIZE);

	Sprite* pQuimbySprite = new Sprite(pQuimbyBuffer);

	pDisplay->clearToColor(*pRedBackBuffer, redColor);
	pDisplay->drawTarget(*pRedBackBuffer, Vector2D(), *pQuimbySprite, 1.0);

	pDisplay->writeText(pRedBackBuffer, xCoord, yCoord, pCour, blackColor, "Curse You Papa Smurf!");

	pDisplay->saveBuffer(*pRedBackBuffer, "redBackBuffer.png");

	pDisplay->drawCurrent(Vector2D(), Sprite(pBackgroundBuffer), MID);

	Vector2D* center = new Vector2D(DISP_WIDTH * OUTSIDE, DISP_HEIGHT * OUTSIDE);
	pDisplay->drawCurrent(*center, Sprite(pRedBackBuffer), INSIDE);
	delete center;

	for (int i = 0; i < NUM_SMURFS_ROW; i++)
	{
		for (int j = 0; j < NUM_SMURFS_ROW; j++)
		{

			smurfPos.setX(i * 60);
			smurfPos.setY(j * 60);
			Sprite* pSmurfs = new Sprite(pSmurfsBuffer, smurfPos, SMURF_SIZE, SMURF_SIZE);

			randX = rand() % (DISP_WIDTH - pSmurfs->getWidth());
			randY = rand() % (DISP_HEIGHT - pSmurfs->getHeight());
			pDisplay->drawPart(smurfPos, pSmurfs, randX, randY);
			delete pSmurfs;
		}
	}


	pDisplay->saveBuffer(*pRedBackBuffer, "redbackbuffer.png");
	pDisplay->saveBuffer(*(pDisplay->getBackBuffer()), "backbuffer.png");

	pDisplay->flipDisplay();
	timer.sleep(5000.0);

	delete pBackgroundBuffer;
	delete pSmurfsBuffer;
	delete pQuimbyBuffer;
	delete pRedBackBuffer;
	delete pQuimbySprite;
	delete pCour;
	delete pDisplay;

	delete pPerformanceTracker;
	MemoryTracker::getInstance()->reportAllocations(cout);
	system("pause");
	return 0;
}