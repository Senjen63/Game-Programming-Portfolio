#include "Game.h"

Game* Game::mpsGame = nullptr;

Game::Game()
{
	mDisplayHeight = DISP_HEIGHT;
	mDisplayWidth = DISP_WIDTH;
	mFramesPerSecond = FRAMES_PER_SECOND;
	mpGraphicsSystem = nullptr;
}

Game::~Game()
{
	cleanup();
}

Game* Game::getInstance()
{
	if (mpsGame == nullptr)
	{
		mpsGame = new Game;
	}
	return mpsGame;
}

void Game::cleanup()
{
	mpInputSystem.cleanup();
	delete mpGraphicsSystem;
}

void Game::init()
{
	mpGraphicsSystem = new GraphicsSystem(mDisplayHeight, mDisplayWidth);
	mpGraphicsSystem->init();
	mpInputSystem.init();
}

void Game::doLoop()
{
	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;
	
	bool keepGoing = true;
	bool paused = false;

	float targetTime = MILLISECOND_TO_SECOND / mFramesPerSecond;
	GraphicsBufferManager bufferManager;

	GraphicsBuffer * pBackground = new GraphicsBuffer(ASSET_PATH + BACKGROUND_FILENAME);
	bufferManager.addBuffer(pBackground, "background");

	GraphicsBuffer* pSmurfs = new GraphicsBuffer(ASSET_PATH + SMURFS_FILENAME);
	bufferManager.addBuffer(pSmurfs, "smurfs");

	GraphicsBuffer* pDeanFaced = new GraphicsBuffer(ASSET_PATH + DEAN_FILENAME);
	bufferManager.addBuffer(pDeanFaced, "dean");

	Animation smurfRun = Animation(pSmurfs, SMURFS_PER_COL, SMURFS_PER_ROW, SMURF_SIZE, SMURF_SIZE, targetTime/SPEED_ADJUSTMENT, true);
	Animation deanRun = Animation(pDeanFaced, SMURFS_PER_COL, SMURFS_PER_ROW, SMURF_SIZE, SMURF_SIZE, targetTime/SPEED_ADJUSTMENT, true);
	
	UnitManager smurfManager;

	Timer loopTimer;
	Sprite background = Sprite(pBackground, DEFAULT_LOCATION);

	while (keepGoing)
	{
		pPerformanceTracker->clearTracker("loop");
		pPerformanceTracker->startTracking("loop");
		loopTimer.start();

		if (!paused)
		{
			smurfManager.updateAll(loopTimer.getElapsedTime());
		}
		
		mpGraphicsSystem->draw(DEFAULT_LOCATION, background, 1);
		
		//Adds a smurf to the manager for smurfs and makes the where the cursor is left clicked.
		if (mpInputSystem.getMouseState(Mouse::LEFT))
		{
			smurfManager.addUnit(Unit(Vector2D(mpInputSystem.getMousePosition().getX() - (SMURF_SIZE / 2), mpInputSystem.getMousePosition().getY() - (SMURF_SIZE / 2)), smurfRun, deanRun));
		}

		if (mpInputSystem.getMouseState(Mouse::RIGHT))
		{
			smurfManager.deleteUnit(mpInputSystem.getMousePosition(), SMURF_SIZE);
		}

		if (mpInputSystem.getKeyState(KeyCode::ESCAPE))
		{
			keepGoing = false;
		}

		if (mpInputSystem.getKeyState(KeyCode::ENTER))
		{
			smurfManager.mUnitList.back().setAnimation();
		}

		if (mpInputSystem.getKeyState(KeyCode::SPACE))
		{
			if (paused)
			{
				paused = false;
			}
			else
			{
				paused = true;
			}
		}

		smurfManager.drawAll(mpGraphicsSystem);
		
		mpGraphicsSystem->flip();

		loopTimer.sleepUntilElapsed(targetTime);
		pPerformanceTracker->stopTracking("loop");
		cout << "Frame Took:" << pPerformanceTracker->getElapsedTime("loop") << " ms" << endl;
	}
	
	delete pDeanFaced;
	delete pSmurfs;
	delete pBackground;
	delete pPerformanceTracker;
}
