#pragma once
#include <PerformanceTracker.h>
#include "EventListener.h"
#include "EventSystem.h"
#include "GraphicsSystem.h"
#include "InputSystem.h"
#include "UnitManager.h"
#include "GraphicsBufferManager.h"
#include "LevelManager.h"
#include "HUD.h"
#include "Snake.h"

const int SPRITE_COL_NUM = 2;
const int SPRITE_SIZE = 32;
const float DEFAULT_TARGET_TIME = 16;
const float DEFAULT_SNAKE_SPEED = 144;
const float DEFAULT_SCALE = 1;
const float DEFAULT_BUFFER = 10;

enum class GameState
{
	INVALID = -1, START_STATE, PLAY_STATE, END_STATE
};

class Game : public EventListener
{
public:
	static void createGame();
	static void destroyGame();
	static Game* getGame();

	void init( float fps, int dispW, int dispH );
	void cleanup();
	void doLoop();

	void handleEvent( const Event& theEvent );

	GraphicsSystem* getGraphicsSys() { return mpGraphicsSys; };
	InputSystem* getInputSys() { return mpInputSys; };
	GraphicsBufferManager* getGraphicsBuffMan() { return mpGBMan; };
	UnitManager* getUnitMan() { return mpUnitMan; };
	GameState getGameState() { return mGameState; };
	LevelManager* getLevelMan() { return mpLevelMan; };
	EventSystem* getEventSys() { return mpEventSys; };
	HUD* getHUD() { return mpHUD; };
	bool getIfContinue() { return mContinue; };
	float getTargetTime() { return mTargetTime; };
	int getScore() { return mScore; };

	void setScore( int score );
	void setGameState( GameState state ) { mGameState = state; };
	void setIfContinue( bool boo ) { mContinue = boo; };

private:
	static Game* mpsGame;

	Game();
	~Game();

	EventSystem* mpEventSys = nullptr;
	GraphicsSystem* mpGraphicsSys = nullptr;
	LevelManager* mpLevelMan = nullptr;
	InputSystem* mpInputSys = nullptr;
	UnitManager* mpUnitMan = nullptr;
	GraphicsBufferManager* mpGBMan = nullptr;
	HUD* mpHUD = nullptr;
	GameState mGameState;
	bool mContinue;
	float mTargetTime;
	int mScore;
};