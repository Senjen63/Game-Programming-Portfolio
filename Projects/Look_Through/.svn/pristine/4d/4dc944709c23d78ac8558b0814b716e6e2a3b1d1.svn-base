#include "GraphicsBufferManager.h"

GraphicsBufferManager::GraphicsBufferManager()
{
	//constructor
}

GraphicsBufferManager::~GraphicsBufferManager()
{
	//destructor
	clearBuffs();
}

void GraphicsBufferManager::createNewBuffer(string filepath, string name)
{
	//generate a buffer
	GraphicsBuffer* buff = new GraphicsBuffer(filepath);
	mpGraphicsBufferList[name] = buff;
}

void GraphicsBufferManager::createNewBuffer(ALLEGRO_BITMAP* pBmp, string name)
{
	//generate a buffer
	GraphicsBuffer* buff = new GraphicsBuffer(pBmp);
	mpGraphicsBufferList[name] = buff;
}

void GraphicsBufferManager::createNewBuffer(Color col, int xLength, int yLength, string name)
{
	//generate a buffer
	GraphicsBuffer* buff = new GraphicsBuffer(col, xLength, yLength);
	mpGraphicsBufferList[name] = buff;
}

void GraphicsBufferManager::addBuffer(GraphicsBuffer* buffer, string name)
{
	//add a buffer to be managed
	mpGraphicsBufferList[name] = buffer;
}

void GraphicsBufferManager::deleteBuffer(string name)
{
	//remove a buffer and shortens the list to accomodate the gap
	for (map<string, GraphicsBuffer*>::iterator i = mpGraphicsBufferList.begin();
		i != mpGraphicsBufferList.end();
		i++)
	{
		if (i->first == name)
		{
			delete i->second;
			mpGraphicsBufferList.erase(i);
			return;
		}
	}
}

GraphicsBuffer* GraphicsBufferManager::getBuffer(string name)
{
	return mpGraphicsBufferList[name];
}

void GraphicsBufferManager::clearBuffs()
{
	//deletes the contents of and clears all of the buffers
	for (map<string, GraphicsBuffer*>::iterator i = mpGraphicsBufferList.begin();
		i != mpGraphicsBufferList.end();
		i++)
	{
		delete i->second;
	}
	mpGraphicsBufferList.clear();
}