#include "GraphicsBuffer.h"

/*
Create a solid color bitmap
*/
GraphicsBuffer::GraphicsBuffer(const Color& color, int height, int width)
{
	mpBitmap = al_create_bitmap(width, height);
	assert(mpBitmap);

	ALLEGRO_BITMAP* current = al_get_target_bitmap();
	al_set_target_bitmap(mpBitmap);
	al_clear_to_color(color.mInternalColor);
	al_set_target_bitmap(current);

	mIsBackBuff = false;
}


/*
Load an image from a file
*/
GraphicsBuffer::GraphicsBuffer(const string& filename)
{
	mpBitmap = al_load_bitmap(filename.c_str());
	assert(mpBitmap);

	mIsBackBuff = false;
}

/*
Copy constructor for the GraphicsBuffer class.

Creates a new GraphicsBuffer object using with a copy of the provided objects backing bitmap as it's bitmap.
The main use case is when you want to use the GraphicsBuffer that belongs to another object which will
be deleted when its parent object goes out of scope.

Remember that the copy made from the GraphicsBuffer from GraphicsSystem::getBackBuffer won't be the
actual backbuffer, it will just be a normal bitmap that is a copy of the backbuffer at the time this was called.
*/
GraphicsBuffer::GraphicsBuffer(const GraphicsBuffer& obj)
{
	mIsBackBuff = false;
	mpBitmap = al_clone_bitmap(obj.mpBitmap);
}


/*
Used for constructing an object using the backbuffer as a bitmap, extra precautions are taken as to
not delete the backbuffer.
*/
GraphicsBuffer::GraphicsBuffer(ALLEGRO_BITMAP* pBackBuffer)
{
	mpBitmap = pBackBuffer;
	assert(mpBitmap);

	mIsBackBuff = true;
}


/*
Destructor. Only destroy/delete mpBitmap if it's not the backbuffer.
*/
GraphicsBuffer::~GraphicsBuffer()
{
	if (!mIsBackBuff)
	{
		al_destroy_bitmap(mpBitmap);
		mpBitmap = nullptr;
	}
	mpBitmap = nullptr;
}


int GraphicsBuffer::getHeight() const
{
	assert(mpBitmap);
	return al_get_bitmap_height(mpBitmap);
}


int GraphicsBuffer::getWidth() const
{
	assert(mpBitmap);
	return al_get_bitmap_width(mpBitmap);
}
