#include <iostream>
#include <SDL.h>

#if _DEBUG
#include <crtdbg.h>
#include <cstdlib>
#include "Windows.h"
#endif

#include <SimplexNoise.h>

#include "AsteroidsSystem.hpp"
#include "BaseSystems.hpp"
#include "Block.hpp"
#include "Game.hpp"
#include "MainMenuSystem.hpp"
#include "MovementSystem.hpp"
#include "Player.hpp"
#include "PongTestSystem.hpp"

int main( int argc, char * argv[ ] )
{
#if _DEBUG
    _CrtMemState sOld;
    _CrtMemState sNew;
    _CrtMemState sDiff;
    _CrtMemCheckpoint( &sOld );
#endif

    {
        const auto pGame = std::make_unique< Game >();

        pGame->createGame( "Mines of Uranus", 800, 600, "Assets/Sprites/icon.png" );

        const std::vector< std::string > blockNames = {
            "stone0", "stone1", "stone2", "stone3",
            "grass0", "grass1", "grass2", "grass3",
            "blueore0", "blueore1", "blueore2", "blueore3",
            "hidden0", "hidden1", "hidden2", "hidden3",
        };

        const std::vector< std::string > playerNames = {
            "player0idle", "player0walk0", "player0walk1", "player0jump",
            "player1idle", "player1walk0", "player1walk1", "player1jump",
            "player2idle", "player2walk0", "player2walk1", "player2jump",
            "player3idle", "player3walk0", "player3walk1", "player3jump",
        };

        const std::vector< std::string > healthbarNames = {
            "healthbar0", "healthbar1", "healthbar2", "healthbar3",
            "healthbar4", "healthbar5", "healthbar6", "healthbar7",
            "healthbar8", "healthbar9", "healthbar10", "healthbar12",
        };

        pGame->createAsset( new AtlasAsset{
            {
                {
                    "blocks0", "Assets/Sprites/blocks0.png", Asset::AssetType::Atlas
                },
                { 64 }
            },
            {
                blockNames,
                16, 16, 4, 4
            }
        } );

        pGame->createAsset( new AtlasAsset{
            {
                {
                    "healthbar", "Assets/Sprites/healthbar.png", Asset::AssetType::Atlas
                },
                { 32 }
            },
            {
                healthbarNames,
                12, 32, 4, 3
            }
        } );

        pGame->createAsset( new AtlasAsset{
            {
                {
                    "options", "Assets/Sprites/options.png", Asset::AssetType::Atlas
                },
                { 32 }
            },
            {
                { "option0", "option1" },
                2, 100, 2, 1
            }
        } );

        pGame->createAsset( new AtlasAsset{
            {
                {
                    "player", "Assets/Sprites/player.png", Asset::AssetType::Atlas
                },
                { 8 }
            },
            {
                playerNames,
                16, 8, 4, 4
            }
        } );

        pGame->createAsset( new FontAsset{
            {
                "fpsFont", "Assets/Fonts/blockyFont.ttf", Asset::AssetType::Font
            },
            FontData{ 25, Font::Style::Normal, Color( 0, 0, 0 ) }
        } );

        pGame->createAsset( new FontAsset{
            {
                "normalFont", "Assets/Fonts/normalFont.ttf", Asset::AssetType::Font
            },
            FontData{ 25, Font::Style::Normal, Color( 0, 0, 0 ) }
        } );

        pGame->createAsset( new SpriteAsset{
            { "menubackground", "Assets/Sprites/mainmenu.png", Asset::AssetType::Sprite }, {}
        } );

        pGame->createAsset( new SpriteAsset{
            { "asteroid", "Assets/Sprites/asteroid.png", Asset::AssetType::Sprite }, {}
        } );

        pGame->createAsset( new Asset{
            "crash",
            "Assets/Sounds/asteroid-crash.wav",
            Asset::AssetType::Sound
        } );

        const auto pMainMenuWorld = pGame->createWorld();

        pMainMenuWorld->registerComponents< Translation, SpriteHolder, UIElement, Scale, TextElement, FPSShower >();

        pMainMenuWorld->createEntity( {
            new Translation,
            new Scale( 10, 10 ),
            new SpriteHolder( "menubackground" ),
        } );

        pMainMenuWorld->createEntity( {
            new Translation,
            new TextElement( "fpsFont", "0.0", Font::Align::Left ),
            new UIElement,
            new FPSShower,
        } );

        pMainMenuWorld->createSystem( new MainMenuSystem );
        pMainMenuWorld->createSystem( new FPSViewerSystem );

        const auto pWorld = pGame->createWorld();

        pWorld->registerComponents< Translation, SpriteHolder, UIElement, Scale, TextElement, PongComponent, FPSShower, RigidBody, Collider, Player, Block, Asteroid >();

        pWorld->createEntity( {
            new Translation,
            new TextElement( "fpsFont", "0.0", Font::Align::Left ),
            new UIElement,
            new FPSShower,
        } );

        pWorld->createEntity( {
            new Translation( 0, 5.0f ),
            new Scale( 0.75f, 0.75f ),
            new SpriteHolder( "player0idle" ),
            new RigidBody,
            new Collider( 0.75f / 2.0f ),
            new Player,
        } );

        pWorld->createEntity( {
            new Translation( 0.05f, 0.75f ),
            new Scale( 2.5f, 2.5f ),
            new SpriteHolder( "healthbar12" ),
            new UIElement,
        } );

        //pWorld->createSystem( new PongTestSystem );
        pWorld->createSystem( new FPSViewerSystem );
        pWorld->createSystem( new PhysicsSystem );
        pWorld->createSystem( new MovementSystem );
        pWorld->createSystem( new AsteroidsSystem );

        pGame->startGame();
        std::cout << "Game over";
    }


    // Easy programmatical memory leak dumper
    //https://stackoverflow.com/a/60626788/13248561
#if _DEBUG
    _CrtMemCheckpoint( &sNew ); //take a snapshot 
    if ( _CrtMemDifference( &sDiff, &sOld, &sNew ) ) // if there is a difference
    {
        OutputDebugString( L"-----------_CrtMemDumpStatistics ---------" );
        _CrtMemDumpStatistics( &sDiff );
        OutputDebugString( L"-----------_CrtMemDumpAllObjectsSince ---------" );
        _CrtMemDumpAllObjectsSince( &sOld );
        OutputDebugString( L"-----------_CrtDumpMemoryLeaks ---------" );
        _CrtDumpMemoryLeaks();
    }
#endif

    return EXIT_SUCCESS;
}
