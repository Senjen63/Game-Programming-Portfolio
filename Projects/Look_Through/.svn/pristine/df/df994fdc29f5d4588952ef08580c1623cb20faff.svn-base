#include "Game.h"

Game::Game()
{
	mpDisplay = nullptr;
	mInputSystem.init();

	mpWoods = nullptr;
	mpSmurf = nullptr;
	mpDean = nullptr;

	pSmurfAnim = nullptr;
	pDeanAnim = nullptr;

	mpUnit = nullptr;
}

Game::~Game()
{
	cleanup();
}

void Game::init(int width, int height)
{
	mpDisplay->init();
	mpDisplay = new GraphicsSystem(width, height);

	mpWoods = new GraphicsBuffer(ASSET_PATH + BACKGROUND_FILENAME);
	mpSmurf = new GraphicsBuffer(ASSET_PATH + SMURF_FILENAME);
	mpDean = new GraphicsBuffer(ASSET_PATH + DEAN_FILENAME);

	pSmurfAnim = new Animation(mpSmurf, NUM_FRAMES, STARTING_TIMER, true);
	pDeanAnim = new Animation(mpDean, NUM_FRAMES, STARTING_TIMER, true);

	mpUnit = new Unit(pSmurfAnim, pDeanAnim, 0, 0);

}

void Game::cleanup()
{
	mpDisplay->cleanup();

	delete mpWoods;
	delete mpSmurf;
	delete mpDean;

	delete pSmurfAnim;
	delete pDeanAnim;
	delete mpUnit;

	delete mpDisplay;
}

void Game::doLoop()
{
	bool keepGoing = true;
	double timerChange = .001;

	PerformanceTracker* pTracker = new PerformanceTracker;

	Timer loopTimer;
	float animTimer = 0;

	bool enterPressed = false, 
		fPressed = false, 
		sPressed = false;

	Vector2D mousePos = Vector2D((DISP_WIDTH / 2) + (SPRITE_WIDTH / 2), (DISP_HEIGHT / 2) + (SPRITE_HEIGHT / 2));

	while (keepGoing)
	{
		//start loop
		pTracker->clearTracker("loop");
		pTracker->startTracking("loop");
		loopTimer.start();
		animTimer += loopTimer.getElapsedTime();

		//inputs
		if (mInputSystem.getMouseDown())
			mousePos = mInputSystem.getMousePos();

		//escape
		keepGoing = !(mInputSystem.getKeyState(ALLEGRO_KEY_ESCAPE));

		//slow and speed
		if (mInputSystem.getKeyState(ALLEGRO_KEY_S))
		{
			if (!sPressed)
			{
				sPressed = true;
				mpUnit->changeTiming(timerChange);
			}
		}
		else
			sPressed = false;

		if (mInputSystem.getKeyState(ALLEGRO_KEY_F))
		{
			if (!fPressed)
			{
				fPressed = true;
				mpUnit->changeTiming(-timerChange);
			}
		}
		else
			fPressed = false;


		//change which animation
		if (mInputSystem.getKeyState(ALLEGRO_KEY_ENTER))
		{
			if (!enterPressed)
			{
				enterPressed = true;
				mpUnit->setAnimation();
			}
		}
		else
			enterPressed = false;
		//end inputs

		//update
		if (animTimer > mpUnit->getTime())
		{
			mpUnit->update(timerChange);
			animTimer = 0;
		}

		//draw
		mpDisplay->draw(mpWoods, 0, 0, .5);
		mpDisplay->draw(mpUnit->draw()->getX(), mpUnit->draw()->getY(), mpUnit->draw(), 
			mousePos.getX() + (SPRITE_WIDTH / 2), mousePos.getY() + (SPRITE_HEIGHT / 2));
		mpDisplay->flip();

		
		//sleep
		loopTimer.sleepUntilElapsed(SLEEP_MS);
		pTracker->stopTracking("loop");
		
		//cout << "Frame Took:" << pTracker->getElapsedTime("loop") << " ms" << endl;

	}

	delete pTracker;
}

//needs to be at bottom?
Game* gpGame = nullptr;