#include "Hud.h"

#include <GameEvent.h>
#include <EventSystem.h>

const int SPACING = 35;

Hud::Hud(const std::string& fontFilePath, int fontSize, const Color& color) :
    mColor(color)
{
    mpFont = new Font(fontFilePath, fontSize);
}

Hud::~Hud()
{
    delete mpFont;

    if (mInitted)
        cleanUp();
}

void Hud::init()
{
    EventSystem::getInstance()->addListener((EventType)EVENT_GAME_LEVEL_LOADED, static_cast<EventListener*>(this));
    EventSystem::getInstance()->addListener((EventType)EVENT_GAME_POINTS, static_cast<EventListener*>(this));
    EventSystem::getInstance()->addListener((EventType)EVENT_GAME_START, static_cast<EventListener*>(this));

    mInitted = true;
}

void Hud::cleanUp()
{
    EventSystem::getInstance()->addListener((EventType)EVENT_GAME_LEVEL_LOADED, static_cast<EventListener*>(this));
    EventSystem::getInstance()->addListener((EventType)EVENT_GAME_POINTS, static_cast<EventListener*>(this));
    EventSystem::getInstance()->addListener((EventType)EVENT_GAME_START, static_cast<EventListener*>(this));

    mInitted = false;
}

void Hud::setFont(const std::string& pathToFont, int fontSize)
{
    if (mpFont)
        delete mpFont;

    mpFont = new Font(pathToFont, fontSize);
}

void Hud::update(double deltaTime)
{
    mElapseTime += deltaTime;
}

void Hud::handleEvent(const Event& theEvent)
{
    switch (theEvent.getType())
    {
    case GameEventType::EVENT_GAME_POINTS:
    {
        const PointsEvent& subEvent = static_cast<const PointsEvent&>(theEvent);

        mScore += subEvent.getPointsAmount();
        break;
    }
    
    case GameEventType::EVENT_GAME_LEVEL_LOADED:
    {
        resetElapseTime();
        break;
    }

    case GameEventType::EVENT_GAME_START:
    {
        resetElapseTime();
        mScore = 0;
        break;
    }
    }
}

void Hud::draw(GraphicsSystem& sys)
{
    assert(mpFont->isValidFont());

    std::string str;

    // Score 
    str = "Score: " + std::to_string(mScore);
    sys.drawText(Vector2D(0, SPACING * 0), *mpFont, mColor, TextAlignment::LEFT, str);

    str = "Time: " + std::to_string((int)(mElapseTime * 0.001));
    sys.drawText(Vector2D(0, SPACING * 1), *mpFont, mColor, TextAlignment::LEFT, str);

    str = "FPS: " + std::to_string(mFPS * 1000);
    sys.drawText(Vector2D(0, SPACING * 2), *mpFont, mColor, TextAlignment::LEFT, str);

}
