#include "Unit.h"

Unit::Unit()
{
	mLocation = Vector2D(0, 0);
	prime = true;
}

Unit::Unit(Vector2D location, Animation animationPrime, Animation animationSecondry)
{
	prime = true;
	mLocation = location;
	mPrimaryAnimation = animationPrime;
	mAlternateAnimation = animationSecondry;
	mCurrentAnimation = mPrimaryAnimation;
}

//Creating a static unit for use on a grid
Unit::Unit(Sprite aSprite, Square* aSquare)
{
	mLocation = aSquare->getPosition();
	mSprite = aSprite;
	mpCurrentSquare = aSquare;
}

Unit::~Unit()
{
	
}

void Unit::update(float timePassed)
{
	mCurrentAnimation.update(timePassed);
}

void Unit::setSquare(Square* newSquare)
{
	mpCurrentSquare->reset();
	mpCurrentSquare = newSquare;
	newSquare->setSnake();
}

void Unit::changeAnimation()
{
	if (prime)
	{
		mCurrentAnimation = mAlternateAnimation;
	}
	else if (!prime)
	{
		mCurrentAnimation = mPrimaryAnimation;
	}
}

void Unit::draw(GraphicsSystem* system)
{
	system->draw(mLocation, mCurrentAnimation.getCurrentSprite(), DEFAULT_SCALE);
}

void Unit::setLocation(Vector2D position)
{
	mLocation = position;
}

Square* Unit::getSquare()
{
	return mpCurrentSquare;
}

Sprite Unit::getSprite()
{
	return mSprite;
}
