#include "GraphicsSystem.h"

GraphicsSystem::GraphicsSystem(std::string displayName, float displayWidth, float displayHeight)
{
	mpDisplay = SDL_CreateWindow(displayName.c_str(), SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, displayWidth, displayHeight, SDL_WINDOW_SHOWN);
	mpRenderer = SDL_CreateRenderer(mpDisplay, -1, 0);
	mpDisplayBuffer = new GraphicsBuffer(SDL_GetWindowSurface(mpDisplay));
}

GraphicsSystem::~GraphicsSystem()
{
	// Potential crash or memory leak here
	delete(mpDisplayBuffer);
	mpDisplayBuffer = nullptr;
	SDL_DestroyRenderer(mpRenderer);
	SDL_DestroyWindow(mpDisplay);
	mpDisplay = nullptr;
}

void GraphicsSystem::init()
{
	// ttf addon?
}

void GraphicsSystem::clean()
{
	// unsure
}

void GraphicsSystem::draw(Sprite sprite, float xPos, float yPos, float scaleX, float scaleY)
{
	GraphicsBuffer* pSpriteGraphicsBuffer = sprite.getGraphicsBuffer();
	SDL_Surface* pSpriteSurface = pSpriteGraphicsBuffer->mpSurface;

	float spriteRectX = sprite.getSourceLocationX();
	float spriteRectY = sprite.getSourceLocationY();
	float spriteRectW = sprite.getWidth();
	float spriteRectH = sprite.getHeight();
	SDL_Rect spriteRect = SDL_Rect{ (int)spriteRectX, (int)spriteRectY, (int)spriteRectW, (int)spriteRectH};
	SDL_Rect displayRect = SDL_Rect{(int)xPos, (int)yPos, (int)scaleX, (int)scaleY};

	SDL_Texture* pSpriteTexture = SDL_CreateTextureFromSurface(mpRenderer, pSpriteSurface);

	SDL_RenderCopy(mpRenderer, pSpriteTexture, &spriteRect, &displayRect);

	SDL_DestroyTexture(pSpriteTexture);
}

// Old and Incomplete, might just draw to the Surface
void GraphicsSystem::draw(GraphicsBuffer* graphicsBuffer, Sprite sprite, float xPos, float yPos, float scaleX, float scaleY)
{
	GraphicsBuffer* pSpriteGraphicsBuffer = sprite.getGraphicsBuffer();
	SDL_Surface* pSpriteSurface = pSpriteGraphicsBuffer->mpSurface;

	float spriteRectX = sprite.getSourceLocationX();
	float spriteRectY = sprite.getSourceLocationY();
	float spriteRectW = sprite.getWidth();
	float spriteRectH = sprite.getHeight();
	SDL_Rect spriteRect = SDL_Rect{ (int)spriteRectX, (int)spriteRectY, (int)spriteRectW, (int)spriteRectH };
	SDL_Rect displayRect = SDL_Rect{ (int)xPos, (int)yPos, (int)scaleX, (int)scaleY};

	SDL_BlitSurface(pSpriteSurface, &spriteRect, graphicsBuffer->mpSurface, &displayRect);
}

void GraphicsSystem::drawText(Font* font, float xPos, float yPos, float scaleX, float scaleY, std::string displayText, GraphicsBuffer*& textBuffer)
{
	SDL_Surface* pTextSurface;

	if (textBuffer == NULL)
	{
		pTextSurface = TTF_RenderText_Solid(font->getFont(), displayText.c_str(), font->getColor());
		textBuffer = new GraphicsBuffer(pTextSurface);
	}

	else
	{
		SDL_FreeSurface(textBuffer->mpSurface); //still crashes for some reason.
		pTextSurface = TTF_RenderText_Solid(font->getFont(), displayText.c_str(), font->getColor());
		textBuffer->mpSurface = pTextSurface;
	}

	SDL_Rect displayRect = SDL_Rect{ (int)xPos, (int)yPos, (int)scaleX, (int)scaleY};
	SDL_Texture* pTextTexture = SDL_CreateTextureFromSurface(mpRenderer, pTextSurface);

	SDL_RenderCopy(mpRenderer, pTextTexture, NULL, &displayRect);

	SDL_DestroyTexture(pTextTexture);
}