#include "GraphicsBufferManager.h"
#include "GraphicsBuffer.h"

GraphicsBufferManager::GraphicsBufferManager()
{

}

GraphicsBufferManager::~GraphicsBufferManager()
{
	cleanup();
}

void GraphicsBufferManager::cleanup()
{
	for (auto item : mMap)
	{
		GraphicsBuffer* pBuff = item.second;
		delete pBuff;
	}

	mMap.clear();
}

void GraphicsBufferManager::addBuffer(const BufferName& key, string name)
{
	GraphicsBuffer* pBuff = NULL;
	auto item = mMap.find(key);

	if (item == mMap.end())
	{
		pBuff = new GraphicsBuffer(name);
		mMap[key] = pBuff;
	}
}

void GraphicsBufferManager::deleteBuffer(BufferName& key)
{
	auto item = mMap.find(key);

	if (item != mMap.end())
	{
		delete item->second;
		mMap.erase(item);
	}
}

void GraphicsBufferManager::deleteBuffer(GraphicsBuffer* pBuff)
{
	for (auto item : mMap)
	{
		if (pBuff == item.second)
		{
			delete item.second;
			mMap.erase(item.first);
			break;
		}
	}
}

GraphicsBuffer* GraphicsBufferManager::getBuffer(const BufferName& key)
{
	auto item = mMap.find(key);

	if (item != mMap.end())
	{
		return item->second;
	}
	else
	{
		return NULL;
	}
}

void GraphicsBufferManager::clear()
{
	for (auto item : mMap)
	{
		delete item.second;
	}

	mMap.clear();
}