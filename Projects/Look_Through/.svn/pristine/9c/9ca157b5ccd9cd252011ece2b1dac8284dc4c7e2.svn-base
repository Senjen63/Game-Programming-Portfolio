#pragma once

#include <SFML/Audio/Music.hpp>
#include <SFML/System/Time.hpp>

#include "Audio.h"


class Music : public Audio
{
public:

	Music() : Audio() {};

	virtual void loadFile(const std::string& fileName) override;
	
	virtual void restart() override { ((sf::Music*)mpSoundSource)->setPlayingOffset(sf::Time()); }

	virtual bool const getLooping() override { return ((sf::Music*)mpSoundSource)->getLoop(); }
	virtual void setLooping(bool shouldLoop) override { ((sf::Music*)mpSoundSource)->setLoop(shouldLoop); }

	virtual float const getSecondsProgress() override { return ((sf::Music*)mpSoundSource)->getPlayingOffset().asSeconds(); } // How many seconds into song object is
	virtual void setSecondsProgress(float progress) override { ((sf::Music*)mpSoundSource)->setPlayingOffset(sf::seconds(progress)); }

	float const getDuration() { ((sf::Music*)mpSoundSource)->getDuration().asSeconds(); } // Get duration of song in seconds
};