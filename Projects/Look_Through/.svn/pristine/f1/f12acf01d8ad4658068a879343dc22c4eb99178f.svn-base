#include "GraphicsSystem.h"

GraphicsSystem::GraphicsSystem() 
{
	mDisplay = nullptr;
	mBackBuffer = nullptr;
}

GraphicsSystem::GraphicsSystem(int width, int height) 
{
	mDisplay = al_create_display(width, height);
	mBackBuffer = new GraphicsBuffer(al_get_backbuffer(mDisplay));
}

GraphicsSystem::~GraphicsSystem()
{
	cleanUp();
}

bool GraphicsSystem::init()
{
	if (!al_init())
	{
		cout << "error initting Allegro\n";
		system("pause");
		return false;
	}
	if (!al_init_image_addon())
	{
		cout << "error - Image Add-on not initted\n";
		system("pause");
		return false;
	}
	if (!al_init_font_addon())
	{
		cout << "error - Font Add-on not initted\n";
		system("pause");
		return false;
	}
	if (!al_init_ttf_addon())
	{
		cout << "error - TTF Add-on not initted\n";
		system("pause");
		return false;
	}
	if (!al_init_primitives_addon())
	{
		cout << "error - primitives Add-on not initted\n";
		system("pause");
		return false;
	}

	return true;

}

void GraphicsSystem::cleanUp()
{
	delete mBackBuffer;
	al_destroy_display(mDisplay);
}

int GraphicsSystem::getHeight()
{
	return al_get_display_height(mDisplay);
}

int GraphicsSystem::getWidth()
{
	return al_get_display_width(mDisplay);
}

GraphicsBuffer* GraphicsSystem::getBuffer()
{
	return mBackBuffer;
}

void GraphicsSystem::flip()
{
	al_flip_display();
}

void GraphicsSystem::draw(int x, int y, Sprite sprite, float scale)
{
	Vector2D pos = sprite.getPos();
	Vector2D size = sprite.getSize();

	al_draw_scaled_bitmap(sprite.getSpriteGraphicsBuffer().mBitMap, pos.getX(), pos.getY(), size.getX(), size.getY(), x, y, scale * size.getX(), scale * size.getY(), 0);
}


void GraphicsSystem::draw(GraphicsBuffer* buff, int x, int y, Sprite sprite, float scale)
{
	Vector2D spritePos = sprite.getPos();
	Vector2D spriteSize = sprite.getSize();
	ALLEGRO_BITMAP* replaced = al_get_target_bitmap();

	al_set_target_bitmap(buff->mBitMap);

	al_draw_scaled_bitmap(sprite.getSpriteGraphicsBuffer().mBitMap, spritePos.getX(), spritePos.getY(), spriteSize.getX(), spriteSize.getY(), x, y, scale * spriteSize.getX(), scale * spriteSize.getY(), 0);

	al_set_target_bitmap(replaced);
}

void GraphicsSystem::draw(GraphicsBuffer* buff, int x, int y, float scale)
{
	int originX = 0;
	int originY = 0;
	al_draw_scaled_bitmap(buff->mBitMap, originX, originY, buff->getWidth(), buff->getHeight(), x, y, scale * buff->getWidth(), scale * buff->getHeight(), 0);
}

void GraphicsSystem::write(int x, int y, Font* font, Color color, string text)
{
	cout << color.getR() << " " << color.getG() << " " << color.getB() << " " << color.getA() << endl;
	ALLEGRO_COLOR newCol = al_map_rgba(color.getR(), color.getG(), color.getB(), color.getA());
	al_draw_text(font->mFontType, newCol, x, y, 0, text.c_str());
}
void GraphicsSystem::write(GraphicsBuffer* buff, int x, int y, Font* font, Color color, string text)
{
	ALLEGRO_COLOR newCol = al_map_rgba(color.getR(), color.getG(), color.getB(), color.getA());
	ALLEGRO_BITMAP* replaced = al_get_target_bitmap();
	al_set_target_bitmap(buff->mBitMap);
	al_draw_text(font->mFontType, newCol, x, y, font->mFlag, text.c_str());
	al_set_target_bitmap(replaced);
}

bool GraphicsSystem::saveBuffer(GraphicsBuffer* save, string filename)
{
	if (al_save_bitmap(filename.c_str(), save->mBitMap))
	{
		return true;
	}

	cout << "ERROR - Save Failed" << endl;
	return false;

}