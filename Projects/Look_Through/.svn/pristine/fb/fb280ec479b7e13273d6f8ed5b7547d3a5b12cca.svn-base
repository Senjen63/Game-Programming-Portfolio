#include "Game.h"

Game* gpGame = NULL;

Game::Game()
{
	mpDisplay = NULL;
	mpUnitList = NULL;
	mControls = NULL;
	mpBuffList= NULL;
	mpDeans = NULL;
	mpSmurfs = NULL;

}

Game::~Game()
{
	clean();
}

void Game::init()
{
	mpDisplay->init();
	mControls->init();

	mpDisplay = new GraphicsSystem(DISP_WIDTH, DISP_HEIGHT);
	mControls = new InputSystem();
	
}

void Game::doLoop()
{
	Sprite smurfs = Sprite();
	Sprite deans = Sprite();
	mpBuffList = new GraphicsBufferManager();
	mpBuffList->addBuff((ASSET_PATH + BACK_FILE).c_str(), 'b');
	mpBuffList->addBuff((ASSET_PATH + SMURF_FILE).c_str(), 's');
	mpBuffList->addBuff((ASSET_PATH + DEAN_FILE).c_str(), 'd');
	mpSmurfs = new Animation(mpBuffList->getBuff('s'), SMURF_SIZE, SPRITE_NUM, FPS, true, smurfs);
	mpDeans = new Animation(mpBuffList->getBuff('d'), SMURF_SIZE, SPRITE_NUM, FPS, true, deans);
	mpUnitList = new UnitManager();
	mpUnitList->addUnit(DISP_WIDTH / 2, DISP_HEIGHT / 2, mpSmurfs, mpDeans);


	Vector2D pos = Vector2D(DISP_WIDTH / 2, DISP_HEIGHT / 2);
	PerformanceTracker* pTracker = new PerformanceTracker();
	string looped = "looped";
	Timer timer;
	bool quit = false;
	float speedAdjust = -20.0;
	float slowDown = 20.0;
	float updateSpeed = 5.0;
	int total = 0;

	while (!quit)
	{
		pTracker->clearTracker(looped);
		pTracker->startTracking(looped);
		timer.start();
		if (mControls->getKeyState(59)) 
		{
			quit = true;
		}
		if (mControls->getMouseState(1))
		{
			
			pos = mControls->mousePos();
			mpUnitList->addUnit(pos.getX(), pos.getY(), mpSmurfs, mpDeans);
			total++;

		}
		if (mControls->getMouseState(2))
		{
			if (total > 1)
			{
				mpUnitList->removeUnit();
				total--;
			}
		}
		if (mControls->getKeyState(67))
		{
			mpUnitList->getUnit(total)->setAnimation();
		}
		if (mControls->getKeyState(6))
		{
			mpUnitList->getUnit(0)->changeSpeed(speedAdjust);
		}

		if (mControls->getKeyState(19))
		{
			mpUnitList->getUnit(0)->changeSpeed(slowDown);
		}

		if (mControls->getKeyState(75))
		{
			mpUnitList->getUnit(0)->pause();
		}
		
		mpUnitList->updateAll(updateSpeed);
		mpDisplay->draw(mpBuffList->getBuff('b'), 0, 0);
		mpUnitList->drawAll(mpDisplay);
		mpDisplay->flip();

		timer.sleepUntilElapsed(TIME_TIL_SLEEP);
		pTracker->stopTracking(looped);
		cout << "Time of Frame: " << pTracker->getElapsedTime(looped) << "\n";
	}
	


}

void Game::clean()
{
	mpDisplay->cleanUp();
	mControls->cleanUp();
	mpBuffList->clearAll();
	mpUnitList->clearAll();
	delete mpBuffList;
	delete mpSmurfs;
	delete mpDeans;
	delete mpUnitList;
}