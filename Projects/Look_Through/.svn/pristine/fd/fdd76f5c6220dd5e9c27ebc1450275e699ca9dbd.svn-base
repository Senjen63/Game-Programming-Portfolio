#include "Animation.h"
#include "Sprite.h"

Animation::Animation(bool isLoop) 
{
	this->mCurrentSprite = 0;
	this->mIsLoop = isLoop;
	this->mTimeOfAnimation = 100;
	this->mTimeRemainingOfAnimation = 100;
}

Animation::~Animation()
{
	
}

void Animation::addSprite(Sprite sprite) 
{
	mSprites.push_back(sprite);
}

void Animation::update(double elapsedTime)
{
	mTimeRemainingOfAnimation -= elapsedTime;

	/* update current sprite to the next if animation time remaining is 0 or below
	* if current sprite is last current sprite and animation is to loop reset back to the start of the animation
	*/
	if (mTimeRemainingOfAnimation <= 0)
	{
		if (mCurrentSprite < mSprites.size() - 1)
		{
			mCurrentSprite++;
		}
		else if (mCurrentSprite = mSprites.size() - 1 && mIsLoop)
		{
			mCurrentSprite = 0;
		}
		mTimeRemainingOfAnimation = mTimeOfAnimation;
	}
	
}

void Animation::slowDownAnimation()
{
	const int MAX_ANIMATION_SPEED = 400;

	// increase animation speed by double unless going above the maximum
	if (mTimeOfAnimation >= MAX_ANIMATION_SPEED)
	{
		mTimeOfAnimation = MAX_ANIMATION_SPEED;
	}
	else
	{
		mTimeOfAnimation = mTimeOfAnimation * 2;
	}
}

void Animation::speedUpAnimation()
{
	const int MIN_ANIMATION_SPEED = 25;

	// cut animation speed in half without going below the minimum
	if (mTimeOfAnimation <= MIN_ANIMATION_SPEED)
	{
		mTimeOfAnimation = MIN_ANIMATION_SPEED;
	}
	else 
	{
		mTimeOfAnimation = mTimeOfAnimation * .5;
	}
}


Sprite Animation::getCurrentSprite() 
{
	return mSprites[mCurrentSprite];
}