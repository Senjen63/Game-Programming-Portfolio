#include "Game.h"

Game::Game()
{
    mpGraphics = new GraphicsSystem();
}


Game::Game(Vector2D widthHeight)
{
    mWidthHeight = widthHeight;
}


Game::~Game()
{
    cleanup();
}


void Game::init()
{
    if (!mInitialized)
    {
        mpGraphics->init();
        mInput.init();

        mpGraphics = new GraphicsSystem(mWidthHeight.getX(), mWidthHeight.getY());
        mInput = InputSystem();

        mInitialized = true;
    }
}


void Game::cleanup()
{
    if (!mCleaned)
    {
        delete mpGraphics;
        mCleaned = true;
    }
}


void Game::gameLoop()
{
    mEndGame = false;

    PerformanceTracker* pPerformance = new PerformanceTracker;

    GraphicsBuffer* pWoods = new GraphicsBuffer(ASSET_PATH + WOODS_FILENAME);
    GraphicsBuffer* pSmurf = new GraphicsBuffer(ASSET_PATH + SMURF_FILENAME);
    GraphicsBuffer* pDean = new GraphicsBuffer(ASSET_PATH + DEAN_FILENAME);

    Unit* pCharacter = new Unit(Vector2D(mpGraphics->getWidth() / 2, mpGraphics->getHeight() / 2), mFps);
    pCharacter->addAnimation(pSmurf, X_SECTIONS, Y_SECTIONS);
    pCharacter->addAnimation(pDean, X_SECTIONS, Y_SECTIONS);

    bool fPressed = false;
    bool sPressed = false;
    bool enterPressed = false;

    while (!mEndGame)
    {
        pPerformance->clearTracker(LOOP_TRACKER_NAME);
        pPerformance->startTracking(LOOP_TRACKER_NAME);

        Timer timer;
        timer.start();

        mpGraphics->draw(pWoods, 0, 0, mWidthHeight.getX() / pWoods->getWidth(), mWidthHeight.getY() / pWoods->getHeight());

        Vector2D checkMouse = mInput.getMouseState(LEFT_MOUSE);

        if (checkMouse != Vector2D(-1, -1))
        {
            pCharacter->changePosition(checkMouse);
        }

        if (mInput.getKeyState(F_KEY))
        {
            if (!fPressed)
            {
                fPressed = true;

                mFps -= FRAME_CHANGE_FACTOR;

                if (mFps < FRAME_RATE_MIN)
                {
                    mFps = FRAME_RATE_MIN;
                }

                pCharacter->setFps(mFps);
            }
        }
        else
        {
            fPressed = false;
        }

        if (mInput.getKeyState(S_KEY))
        {
            if (!sPressed)
            {
                sPressed = true;

                mFps += FRAME_CHANGE_FACTOR;

                if (mFps > FRAME_RATE_CAP)
                {
                    mFps = FRAME_RATE_CAP;
                }

                pCharacter->setFps(mFps);
            }
        }
        else
        {
            sPressed = false;
        }

        if (mInput.getKeyState(ESCAPE))
        {
            mEndGame = true;
        }

        if (mInput.getKeyState(ENTER))
        {
            if (!enterPressed)
            {
                enterPressed = true;

                int nextIndex = pCharacter->getCurrentIndex() + 1;

                if (nextIndex >= pCharacter->getAnimCount())
                {
                    nextIndex = 0;
                }

                pCharacter->setAnimation(nextIndex);
            }
        }
        else
        {
            enterPressed = false;
        }

        pCharacter->update(timer.getElapsedTime() * TIME_SCALE);
        pCharacter->draw(mpGraphics);
        mpGraphics->flip();

        timer.sleepUntilElapsed(mTimePerFrame);

        pPerformance->stopTracking(LOOP_TRACKER_NAME);
        cout << pPerformance->getElapsedTime(LOOP_TRACKER_NAME) << endl;
    }
    
    delete pCharacter;
    delete pDean;
    delete pSmurf;
    delete pWoods;
    delete pPerformance;
}

Game* gpGame = nullptr;