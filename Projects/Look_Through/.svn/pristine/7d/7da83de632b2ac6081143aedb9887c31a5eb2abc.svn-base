#include "GraphicsBufferManager.h"
#include "GraphicsBuffer.h"

#include "GraphicsSystem.h"
#include <Vector2D.h>

GraphicsBufferManager::~GraphicsBufferManager()
{
    clearGraphicsBuffer();
}

GraphicsBuffer* GraphicsBufferManager::getGraphicsBuffer(string key)
{
    if (mpGraphicsBufferMap.count(key) > 0)
    {
        return mpGraphicsBufferMap.at(key);
    }    
    return nullptr;
}

void GraphicsBufferManager::addGraphicsBuffer(GraphicsBuffer* buffer, string key)
{
    if (mpGraphicsBufferMap.count(key) == 0)
    {
        mpGraphicsBufferMap.insert(pair<string, GraphicsBuffer*>(key, buffer));
    }
}

void GraphicsBufferManager::addGraphicsBuffer(string fileName, string key)
{
    if (mpGraphicsBufferMap.count(key) == 0)
    {
        mpGraphicsBufferMap.insert(pair<string, GraphicsBuffer*>(key, new GraphicsBuffer(fileName)));
    }
}

void GraphicsBufferManager::addGraphicsBuffer(int width, int height, string key)
{
    if (mpGraphicsBufferMap.count(key) == 0)
    {
        mpGraphicsBufferMap.insert(pair<string, GraphicsBuffer*>(key, new GraphicsBuffer(width, height)));
    }
}

void GraphicsBufferManager::deleteGraphicsBuffer(string key)
{
    if (mpGraphicsBufferMap.count(key) > 0)
    {
        delete mpGraphicsBufferMap.at(key);
        mpGraphicsBufferMap.erase(key);
    }
}

void GraphicsBufferManager::clearGraphicsBuffer()
{
    for each (auto iter in mpGraphicsBufferMap)
    {
        delete iter.second;
    }

    mpGraphicsBufferMap.clear();
}

void GraphicsBufferManager::drawBuffer(string key, Vector2D loc, float scale)
{
    if (mpGraphicsBufferMap.count(key) > 0)
    {
        GraphicsSystem* graphSys = GraphicsSystem::getInstance();
        graphSys->draw(loc, mpGraphicsBufferMap.at(key), scale);
    }
}
