#include "Game.h"

Game* gpGame = nullptr;

Game::Game(int height, int width)
{
	mpGraphicsSystem = new GraphicsSystem(height, width);
	mpInputSystem = new InputSystem();
}

Game::~Game()
{
	delete mpGraphicsSystem;
	delete mpInputSystem;
	mpGraphicsSystem = nullptr;
	mpInputSystem = nullptr;
}

bool Game::init()
{
	if (!mpGraphicsSystem->init())
	{
		std::cout << "Issues with Graphics system." << std::endl;
		system("pause");
		return false;
	}
	if (!mpInputSystem->init())
	{
		std::cout << "Issues with Input system." << std::endl;
		system("pause");
		return false;
	}
	return true;
}

void Game::cleanUp()
{
	mpGraphicsSystem->cleanup();
	mpInputSystem->cleanUp();
}

void Game::doLoop()
{
	//Time in milliseconds.
	double targetTime = 16.7;
	bool shouldContinue = true;
	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string DEANSPRITE_FILENAME = "dean_sprites.png";
	const string SMURFSPRITE_FILENAME = "smurf_sprites.png";
	const string BACKGROUND_FILENAME = "woods.png";
	int spriteNum = 4;
	double fps = 60;

	GraphicsBuffer* backgroundImg = new GraphicsBuffer((ASSET_PATH + BACKGROUND_FILENAME).c_str());

	Unit object = Unit(300, 300, 1, 1);
	Animation* smurfAnim = new Animation();
	Animation* deanAnim = new Animation();
	GraphicsBuffer* smurfImg = new GraphicsBuffer((ASSET_PATH + SMURFSPRITE_FILENAME).c_str());
	GraphicsBuffer* deanImg = new GraphicsBuffer((ASSET_PATH + DEANSPRITE_FILENAME).c_str());
	smurfAnim->addSprite(smurfImg, spriteNum, spriteNum, fps, true);
	deanAnim->addSprite(deanImg, spriteNum, spriteNum, fps, true);
	
	bool isSmurf = true;

	object.setAnimation(smurfAnim);


	while (shouldContinue)
	{
		Timer theTimer;
		theTimer.start();

		bool fKeyDown = mpInputSystem->getKeyState(ALLEGRO_KEY_F);
		bool sKeyDown = mpInputSystem->getKeyState(ALLEGRO_KEY_S);
		bool enterKeyDown = mpInputSystem->getKeyState(ALLEGRO_KEY_ENTER);
		bool escapeKeyDown = mpInputSystem->getKeyState(ALLEGRO_KEY_ESCAPE);

		int mouseState = mpInputSystem->getMouseState();
		bool mouseLeftButtonDown = false;
		if (mouseState == 1)
		{
			mouseLeftButtonDown = true;
		}

		Vector2D mousePosition = mpInputSystem->getMousePosition();

		shouldContinue = !escapeKeyDown;

		if (mouseLeftButtonDown)
		{
			Animation* anim = object.getAnimation();
			Sprite spr = anim->getCurrentSprite();
			Vector2D offset = spr.getHeightAndWidth() / 2;
			object.setLocation(mousePosition - offset);
		}

		if (fKeyDown)
		{
			deanAnim->speedChange(-0.5);
			smurfAnim->speedChange(-0.5);
		}
		if (sKeyDown)
		{
			deanAnim->speedChange(0.5);
			smurfAnim->speedChange(0.5);
		}
		if (enterKeyDown)
		{
			if (isSmurf)
			{
				object.setAnimation(deanAnim);
				isSmurf = false;
			}
			else
			{
				object.setAnimation(smurfAnim);
				isSmurf = true;
			}
		}
		

		object.Update(targetTime);
		gpGame->getGraphicsSystem()->draw(backgroundImg, 0, 0, 1, 1);
		object.draw();

		mpGraphicsSystem->flip();

		theTimer.sleepUntilElapsed(targetTime);
	}

	delete smurfImg;
	delete deanImg;
	delete backgroundImg;
	delete smurfAnim;
	delete deanAnim;
	smurfImg = nullptr;
	deanImg = nullptr;
	backgroundImg = nullptr;
	smurfAnim = nullptr;
	deanAnim = nullptr;
}