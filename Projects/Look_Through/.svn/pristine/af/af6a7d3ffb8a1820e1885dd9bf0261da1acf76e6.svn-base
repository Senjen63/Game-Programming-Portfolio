#include "Gui.h"

Gui::Gui()
{
	init();
}

Gui::Gui(GraphicsSystem* gSystem)
{
	mpGraphicsSystem = gSystem;

	mpEventSystem = nullptr;
	
	mFps = 0.0f;
	mTime = 0.0f;
	mScore = 0;

	init();
}

Gui::~Gui()
{
	mpEventSystem->cleanup();
	mpCour = nullptr;
	delete mpCour;
}

void Gui::init()
{
	mpEventSystem = EventSystem::getInstance();
	//mpEventSystem->init();

	mpGuiManager = new GraphicsBufferManager();

	mpCour = new Font(20, mFONT_FILENAME);

	GraphicsBuffer* scoreBuffer = new GraphicsBuffer(HUD_BUFFER_WIDTH, HUD_BUFFER_HEIGHT, mBlack);
	GraphicsBuffer* timeBuffer = new GraphicsBuffer(HUD_BUFFER_WIDTH, HUD_BUFFER_HEIGHT, mBlack);
	GraphicsBuffer* fpsBuffer = new GraphicsBuffer(HUD_BUFFER_WIDTH, HUD_BUFFER_HEIGHT, mBlack);
	mpGuiManager->addGraphicsBuffer(scoreBuffer, "score");
	mpGuiManager->addGraphicsBuffer(timeBuffer, "time");
	mpGuiManager->addGraphicsBuffer(fpsBuffer, "fps");

	mpEventSystem->addListener((EventType)FPS_EVENT, this);
	mpEventSystem->addListener((EventType)TIME_EVENT, this);
	mpEventSystem->addListener((EventType)SCORE_EVENT, this);
}

void Gui::cleanup()
{
	mpGuiManager->Clear();
	delete mpGuiManager;
}

void Gui::handleEvent(const Event& currentEvent)
{
	if (currentEvent.getType() == FPS_EVENT)
	{
		const FpsEvent& fpsEvent = static_cast<const FpsEvent&>(currentEvent);
		mFps = fpsEvent.getFps();
	}
	else if (currentEvent.getType() == SCORE_EVENT)
	{
		const ScoreEvent& scoreEvent = static_cast<const ScoreEvent&>(currentEvent);
		mScore = scoreEvent.getScore();
	}
	else if (currentEvent.getType() == TIME_EVENT)
	{
		const TimeEvent& timeEvent = static_cast<const TimeEvent&>(currentEvent);
		mTime = timeEvent.getTime();
	}
}

void Gui::display()
{
	mpGuiManager->getGraphicsBuffer("fps")->clearToColor(mBlack);
	mpGraphicsSystem->draw(mpGuiManager->getGraphicsBuffer("fps"), 0, 0, 1);
	int xFps = mpGuiManager->getGraphicsBuffer("fps")->getWidth();
	int yFps = mpGuiManager->getGraphicsBuffer("fps")->getHeight();
	
	mpGraphicsSystem->writeText(mpGuiManager->getGraphicsBuffer("fps"), ((xFps/2)), ((yFps/2)-10), mpCour, mWhite, "FPS: " + to_string(mFps));
	
	
	mpGuiManager->getGraphicsBuffer("score")->clearToColor(mBlack);
	mpGraphicsSystem->draw(mpGuiManager->getGraphicsBuffer("score"), 250, 0, 1);
	int xScore = mpGuiManager->getGraphicsBuffer("score")->getWidth();
	int yScore = mpGuiManager->getGraphicsBuffer("score")->getHeight();

	mpGraphicsSystem->writeText(mpGuiManager->getGraphicsBuffer("score"), ((xScore / 2) +250), ((yScore / 2) - 10), mpCour, mWhite, "Score: " + to_string(mScore));

	mpGuiManager->getGraphicsBuffer("time")->clearToColor(mBlack);
	mpGraphicsSystem->draw(mpGuiManager->getGraphicsBuffer("time"), 500, 0, 1);
	int xTime = mpGuiManager->getGraphicsBuffer("time")->getWidth();
	int yTime = mpGuiManager->getGraphicsBuffer("time")->getHeight();
	mpGraphicsSystem->writeText(mpGuiManager->getGraphicsBuffer("time"), ((xTime / 2) +500), ((yTime / 2) - 10), mpCour, mWhite, "Time: " + to_string(mTime));

	
}

void Gui::increaseScore()
{
	score++;
}