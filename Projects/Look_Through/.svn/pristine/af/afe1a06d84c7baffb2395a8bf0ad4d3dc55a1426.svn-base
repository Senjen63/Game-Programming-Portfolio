#pragma once
#include <unordered_map>
#include <Trackable.h>
#include "GraphicsBuffer.h"

typedef std::string BufferKey;

class GraphicsBufferManager
{
public:
    GraphicsBufferManager() = default;
    GraphicsBufferManager(const GraphicsBufferManager& other) = delete;
    GraphicsBufferManager& operator=(const GraphicsBufferManager& other) = delete;
    ~GraphicsBufferManager();

    GraphicsBuffer* getBuffer(const BufferKey& key) const;
    void deleteBuffer(const BufferKey& key);
    /// <summary>
    /// Creates an empty bitmap of size width, height. Returns nullptr if that key is already in use. 
    /// </summary>
    GraphicsBuffer* addBuffer(const BufferKey& key, int width, int height, Color color = COLOR_CLEAR);
    /// <summary>
    /// Opens an asset file as a bitmap. Returns nullptr if that key is already in use. 
    /// </summary>
    GraphicsBuffer* addBuffer(const BufferKey& key, const std::string& pathToAsset);

    bool bufferExists(const BufferKey& key) const;

    void clearAll();

    GraphicsBuffer* operator[](const BufferKey& key) const { return getBuffer(key); }

private:
    std::unordered_map<BufferKey, GraphicsBuffer*> mMap;
};
