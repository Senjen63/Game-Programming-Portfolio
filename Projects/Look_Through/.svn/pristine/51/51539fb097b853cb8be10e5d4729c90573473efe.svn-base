//     -------------------------------------------------------------------------
//     Final Project
//         Scene.hpp
//     
//             Created:
//                 07-04-2022
//             Author(s):
//                 Aven Presseisen
//     -------------------------------------------------------------------------

#pragma once

#include <memory>
#include <vector>

#include "AssetManager.hpp"
#include "Camera.hpp"
#include "ComponentManager.hpp"
#include "EntityCommandBuffer.hpp"
#include "EntityManager.hpp"
#include "InputTranslator.hpp"
#include "System.hpp"
#include "Time.hpp"

class World
{
    friend class Game;

    std::weak_ptr< Time > mpTime;
    std::weak_ptr< InputTranslator > mpInputTranslator;

    std::shared_ptr< EntityManager > mpEntityManager;
    std::shared_ptr< EntityCommandBuffer > mpEntityCommandBuffer;

    std::vector< std::unique_ptr< System > > mSystems;

    std::shared_ptr< Camera > mpCamera;
    std::weak_ptr< AssetManager > mpAssetManager;

    explicit World( const std::shared_ptr< AssetManager > & pAssetManager, GraphicsSystem * pGraphicsSystem, const std::shared_ptr< Time > & pTime, const std::shared_ptr< InputTranslator > & pInputTranslator );
public:
    void createSystem( System * pSystem );
    void createEntity( const std::vector< Component * > & components ) const;

    template < typename ... TComponents >
    void registerComponents() const;

    void generateQueries() const;
    int update() const;
};

template < typename ... TComponents >
void World::registerComponents() const
{
    (mpEntityManager->mpComponentManager->registerComponent< TComponents >(), ...);
}
