//BP
#pragma once
#include "Items.h"
#include "Snake.h"
#include <fstream>
#include "HUDBox.h"
#include "GameHUD.h"
#include <algorithm>
#include "GameFood.h"
#include "GameTime.h"
#include "Framerate.h"
#include <Trackable.h>
#include "InputSystem.h"
#include <EventSystem.h>
#include "UnitManager.h"
#include "GameMessages.h"
#include "LevelManager.h"
#include "EndGameLevel.h"
#include "WallCreation.h"
#include "SnakeCreation.h"
#include <EventListener.h>
#include "GraphicsSystem.h"
#include "DirectionChange.h"
#include "InputTranslator.h"
#include <PerformanceTracker.h>
#include "GraphicsBufferManager.h"


const string GAME_WALL_KEY = "Wall";
const string GAME_FONT_KEY = "GameFont";
const string GAME_FOOD_KEY = "Food";
const string GAME_LOOP_KEY = "loop";
const string SNAKE_HEAD_KEY = "SnakeHead";
const string SNAKE_BODY_KEY = "SnakeBody";
const string GAME_SPEED_KEY = "SpeedPowerup";
const string GAME_SLOW_KEY = "SlowPowerup";
const string LEVEL_ONE_FILE = "Level_1.txt";
const string LEVEL_TWO_FILE = "Level_2.txt";
const string LEVEL_THREE_FILE = "Level_3.txt";
const string GAME_ASSET_PATH = "GameAssets\\";
const string GAME_BACKGROUND_KEY = "Background";
const string GAME_BONUS_ITEM_KEY = "BonusItem";
const string COMMON_ASSET_PATH = "..\\..\\common\\assets\\";
const string GAME_ASSET_NAMES_FILE = "TextureFontFilenames.txt";
const int HORI_PIECES = 4;
const int VERT_PIECES = 4;
const int FRAME_TIMING = 30;
const int MIN_FRAMERATE = 30;
const int ITEM_FRAMERATE = 30;
const int FOOD_FRAMERATE = 30;
const int MAX_FRAMERATE = 140;
const int FONT_SCALE_VALUE = 30;
const int WINDOW_X_DIMENSION = 800;
const int WINDOW_Y_DIMENSION = 600;
const int LOWEST_MOVEMENT_SPEED = 3;
const Vector2D UP_SPACE = Vector2D(0, -1);
const Vector2D BEGINNING_PATH = UP_SPACE;
const Vector2D DOWN_SPACE = Vector2D(0, 1);
const Vector2D LEFT_SPACE = Vector2D(-1, 0);
const Vector2D RIGHT_SPACE = Vector2D(1, 0);
const Vector2D SLOW_SECTIONS = Vector2D(2, 2);
const Vector2D WALL_SECTIONS = Vector2D(1, 1);
const Vector2D HEAD_SECTIONS = Vector2D(1, 1);
const Vector2D BODY_SECTIONS = Vector2D(1, 1);
const Vector2D FOOD_SECTIONS = Vector2D(2, 2);
const Vector2D SPEED_SECTIONS = Vector2D(2, 2);
const Vector2D BONUS_SECTIONS = Vector2D(2, 2);
const Vector2D BACKGROUND_SECTIONS = Vector2D(1, 1);
const Color BLACK = Color(0, 0, 0);
const Color GREEN = Color(0, 255, 0);

class Game : public EventListener
{
private:
    Game();
    Game(Vector2D heightAndWidth);
    ~Game();
    int mFps = 60;
    static Game* mspGameInstance;
    EventSystem* mpEventSystem = nullptr;
    GraphicsSystem* mpGraphicSystem = nullptr;
    UnitManager* mpUnitManager = nullptr;
    GraphicsBufferManager* mpGraphicsBufferManager = nullptr;
    LevelManager* mpLevelManager = nullptr;
    InputSystem mInputSystem;
    InputTranslator mInputTranslator;
    Snake* mpGameSnake = nullptr;
    GameFood* mpGameFood = nullptr;
    Items mItemSpawner;
    GameHUD* mpHUD = nullptr;
    string mSnakeBodyFile = "";
    string mSnakeHeadFile = "";
    string mGameFoodFile = "";
    string mSpeedUpItemFile = "";
    string mSlowDownItemFile = "";
    string mBonusPointsItemFile = "";
    string mGameWallFile = "";
    string mGameBackgroundFile = "";
    string mGameFontFile = "";
    Font* mpFont = nullptr;
    float mSecond = 1000.0;
    float mFrameTiming = mSecond / mFps;
    float mTotalTimePassed = 0;
    float mTrueFps = 0;
    bool mPlayCurrentLevel = false;
    bool mProceed = false;
    bool mGameOver = false;
    bool mIsInit = false;
    bool mIsClean = false;
    Vector2D mHeightAndWidth;
public:
    static void createGameInstance();
    static void createGameInstance(Vector2D heightAndWidth);
    static void destroyGameInstance();
    static Game* getGameInstance() { return mspGameInstance; }
    void init();
    void cleaner();
    void gameLoop();
    void loadFiles();
    void renderGame();
    void endCurrentLevel();
    void HUDEvents(float timePassed);
    void updateGame(float timePassed);
    float getTimeScale() { return mSecond; }
    void inputEvents() { mInputSystem.fireInputs(); }
    virtual void handleEvent(const Event& thisEvent);
    UnitManager* getUnitManager() { return mpUnitManager; }
    void loadSpecificLevel(int levelIndex, Vector2D wallPieces);
    GraphicsSystem* getGraphicsSystem() { return mpGraphicSystem; }
    Vector2D findBlankLevelLocation(float horiDiameter, float vertDiameter);
};