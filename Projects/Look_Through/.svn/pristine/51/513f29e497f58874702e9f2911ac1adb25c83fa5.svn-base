
#include "Game.h"
#include <windows.h>

Game* gpGameSystem = new Game();

Game::Game()
{
	mpSystem = new GraphicsSystem();
	mInputSystem.init();

	mpWoods = nullptr;
	mpSmurf = nullptr;
	mpDean = nullptr;

	mpSmurfAnim = nullptr;
	mpDeanAnim = nullptr;

	mpObject = nullptr;
}

Game::~Game()
{
	cleanup();
}

void Game::init()
{
	mpSystem->init(DISP_HEIGHT, DISP_WIDTH);

	mpWoods = new GraphicsBuffer(ASSET_PATH + BACKGROUND_FILENAME);
	mpSmurf = new GraphicsBuffer(ASSET_PATH + SMURF_FILENAME);
	mpDean = new GraphicsBuffer(ASSET_PATH + DEAN_FILENAME);

	mpSmurfAnim = new Animation(mpSmurf, NUM_FRAMES, STARTING_TIMING, true);
	mpDeanAnim = new Animation(mpDean, NUM_FRAMES, STARTING_TIMING, true);

	mpObject = new Unit(mpSmurfAnim, mpDeanAnim, Vector2D());
}

void Game::cleanup()
{	
	mpSystem->cleanUp();

	delete mpWoods;
	delete mpSmurf;
	delete mpDean;
	delete mpSmurfAnim;
	delete mpDeanAnim;

	delete mpObject;
	
	delete mpSystem;
}

void Game::doLoop()
{
	bool exit = false;
	float timingAmount = .0005;

	PerformanceTracker* pTracker = new PerformanceTracker();

	Timer time;
	float animTime = 0;

	Vector2D mousePos = Vector2D((DISP_WIDTH / 2) + (SPRITE_WIDTH / 2), (DISP_HEIGHT / 2) + (SPRITE_HEIGHT / 2));
	
	while (!exit)
	{
		//start timers
		pTracker->clearTracker("loop");
		pTracker->startTracking("loop");
		time.start();
		animTime += time.getElapsedTime();

		if (animTime > mpObject->getTiming())
		{
			mpObject->update();
			animTime = 0;
		}

		mpSystem->draw(mpWoods, Vector2D(), .5);
		mpSystem->draw(mpObject->draw()->getLocation(), mpObject->draw(), mousePos.getX() + (SPRITE_WIDTH / 2), mousePos.getY() + (SPRITE_HEIGHT / 2));
		mpSystem->flip();

		if (mInputSystem.getMouseDown())
			mousePos = mInputSystem.getMousePosition();

		exit = mInputSystem.getKeyState(ALLEGRO_KEY_ESCAPE);

		if (mInputSystem.getKeyState(ALLEGRO_KEY_S))
			mpObject->setTiming(timingAmount);
		else if (mInputSystem.getKeyState(ALLEGRO_KEY_F))
			mpObject->setTiming(-timingAmount);

		if (mInputSystem.getKeyState(ALLEGRO_KEY_ENTER))
			mpObject->setAnimation();

		//sleep for desired time
		time.sleepUntilElapsed(SLEEP_MS);
		pTracker->stopTracking("loop");
		cout << pTracker->getElapsedTime("loop") << endl;
	}

	delete pTracker;
}
