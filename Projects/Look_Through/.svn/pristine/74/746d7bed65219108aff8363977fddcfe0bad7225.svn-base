#include "EnemyBase.h"
#include "Game.h"

EnemyBase::EnemyBase(Direction dir, Vector2D location, Animation* anim)
{
	Game* pGame = Game::getInstance();

	mSpeed = 0;
	mDirection = dir;
	mMaxHealth = 0;
	mCurrentHealth = mMaxHealth;
	mInvFrames = pGame->GAME_FPS * 6.0;
	mCurrentInv = mInvFrames;
	mCurrentFlashFrames = 0;
	mID = 0; //make it an actual id?????
	mCanHit = true;

	mpCurrentAnimation = anim;
	mpSprites[0] = nullptr;

	mLocation = location;

	mCurrentSize = SPRITE_SIZE;
	mColor = BASE_COLOR;
}

EnemyBase::~EnemyBase()
{
	delete mpCurrentAnimation;
	//delete[] mpSprites;
}

void EnemyBase::update(double mFPS)
{
	Game* pGame = Game::getInstance();

	mpCurrentAnimation->setPosition(mLocation.getX(), mLocation.getY());
	mpCurrentAnimation->update(mFPS);

	move();

	if (!mCanHit)
	{
		mCurrentInv--;
		if (mCurrentInv <= 0)
		{
			mCurrentInv = mInvFrames;
			mCanHit = true; 
			mColor = BASE_COLOR;
		}
		else //flash while invincible
		{
			mCurrentFlashFrames++;
			if (mCurrentFlashFrames > ENEMY_FLASH_TIME * 2)
			{
				mColor = BASE_COLOR;
				mCurrentFlashFrames = 0;
			}
			else if (mCurrentFlashFrames > ENEMY_FLASH_TIME) { mColor = FLASH_COLOR; }
		}
	}
}

bool EnemyBase::isColliding(Vector2D locationColliding)
{
	Game* pGame = Game::getInstance();

	float currentXPos = locationColliding.getX();
	float currentYPos = locationColliding.getY();

	for (auto wall : pGame->getLevels()->getWalls())
	{
		if (currentXPos < wall->getX() + wall->getSize() &&
			currentXPos + mCurrentSize > wall->getX() &&
			currentYPos < wall->getY() + wall->getSize() &&
			currentYPos + mCurrentSize > wall->getY())
		{
			return true;
		}
	}

	return false;
}

void EnemyBase::draw()
{
	Game* pGame = Game::getInstance();

	mpCurrentAnimation->setPosition(mLocation);
	mpCurrentAnimation->setColor(mColor);
	Game::getInstance()->getGraphics()->draw(mpCurrentAnimation);
}

void EnemyBase::getHit()
{
	Game* pGame = Game::getInstance();

	if (mCanHit)
	{
		mCurrentHealth--;
		mCurrentInv = mInvFrames;

		if (mCurrentHealth <= 0)
		{
			pGame->playSound(KILL_ENEMY);
			destroy();
		}
		else
		{
			pGame->playSound(DAMAGE_ENEMY);
			mCanHit = false;
		}
	}
}

void EnemyBase::destroy()
{
	Game::getInstance()->getLevels()->deleteEnemy(this);
}