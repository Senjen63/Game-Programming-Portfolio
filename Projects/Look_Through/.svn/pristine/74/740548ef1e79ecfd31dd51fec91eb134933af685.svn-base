#include "Snake.h"

Snake::Snake()
{
}

Snake::Snake(Sprite snakeHead, Sprite snakeBody, int startX, int startY)
{
	mSnakeHead = snakeHead;
	mSnakeBody = snakeBody;
	mX = startX;
	mY = startY;
	mMoveDirection = 'U';
}

Snake::~Snake()
{

}

void Snake::update(double timePassed, Level level)
{
	mTimeRemaining -= timePassed;
	if (mTimeRemaining <= 0)
	{
		Square* target = mpCurrentSquare;
		Square* holder;
		int snakeAhead = mSnakeSegments.size();
		for (int i = 0; i < mSnakeSegments.size(); i++)
		{
			holder = mSnakeSegments.at(i).getSquare();
			mSnakeSegments.at(i).setSquare(target);
			holder->reset();
			target = holder;
		}
		switch (mMoveDirection)
		{
		case 'U':
			mY--;
			break;

		case 'D':
			mY++;
			break;

		case 'R':
			mX++;
			break;

		case 'L':
			mX--;
			break;

		default:
			break;
		}
		mpCurrentSquare = level.getSquare(mX,mY);
		mTimeRemaining = mSpeed * SPEED_MODIFIER;
	}
}

void Snake::setMoveDirection(char direction)
{
	mMoveDirection = direction;
}


void Snake::addSegment()
{
	if(mSnakeSegments.size() <= 0)
	{
		mSnakeSegments.push_back(Unit(mSnakeBody, mpCurrentSquare));
	}
	else
	{
		mSnakeSegments.push_back(Unit(mSnakeBody, mSnakeSegments.at(0).getSquare()));
	}
}

void Snake::setHead(Sprite head)
{
	mSnakeHead = head;
}

void Snake::setBody(Sprite body)
{
	mSnakeBody = body;
}

Sprite Snake::getHead()
{
	return mSnakeHead;
}

int Snake::getLength()
{
	return mSnakeSegments.size();
}

void Snake::setPosition(Square* square)
{
	mpCurrentSquare = square;
	mX = square->getColumn();
	mY = square->getRow();
}

void Snake::setSpeed(float speed)
{
	mSpeed = speed;
	mTimeRemaining = mSpeed * SPEED_MODIFIER;
}

void Snake::setSegments(int numSegments)
{
	for (int i = 0; i < numSegments; i++)
	{
		mSnakeSegments.push_back(Unit (mSnakeBody, mpCurrentSquare));
	}
}

Square* Snake::getCurrentSquare()
{
	return mpCurrentSquare;
}

Unit Snake::getSegment(int num)
{
	return mSnakeSegments.at(num);
}

void Snake::speedUp()
{
	mSpeed/=SPEED_ADJUSTMENT;
}

void Snake::slowDown()
{
	mSpeed*=SPEED_ADJUSTMENT;
}

void Snake::resetLength()
{
	for (int i = 0; i < mSnakeSegments.size(); i++)
	{
		mSnakeSegments.clear();
	}
}

void Snake::draw(GraphicsSystem * system)
{
	system->draw(mpCurrentSquare->getPosition(), mSnakeHead, 1);
	for (int i = 0; i < mSnakeSegments.size(); i++)
	{
		system->draw(mSnakeSegments.at(i).getSquare()->getPosition(), mSnakeSegments.at(i).getSprite(), 1);
	}
}
