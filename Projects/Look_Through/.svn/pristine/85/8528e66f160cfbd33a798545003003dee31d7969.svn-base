#include "Unit.h"
#include "Game.h"

Unit::Unit(float posX, float posY, float scaleX, float scaleY)
{
	mLocation = Vector2D(posX, posY);
	mScale = Vector2D(scaleX, scaleY);
}

Unit::Unit(float posX, float posY, float scaleX, float scaleY, string tag)
{
	mLocation = Vector2D(posX, posY);
	mScale = Vector2D(scaleX, scaleY);
	mTag = tag;
}

Unit::~Unit()
{
	delete mpAnimations;
	mpAnimations = nullptr;
}

void Unit::draw()
{
	Game* game = Game::getGameInstance();
	GraphicsSystem* graphics = game->getGraphicsSystem();
	graphics->draw(mpAnimations->getCurrentSprite(), mLocation.getX(), mLocation.getY(), mScale.getX(), mScale.getY());
}

void Unit::setAnimation(Animation* animation)
{
	if (mpAnimations != nullptr)
	{
		delete mpAnimations;
		mpAnimations = nullptr;
	}
	mpAnimations = animation;
}

void Unit::update(double dt)
{
	mpAnimations->Update(dt);
	//newPos = oldPos + velocity * 30.000f;
}

bool Unit::doesPointIntersect(Vector2D vec)
{
	Sprite sprite = mpAnimations->getCurrentSprite();
	//Vector2D sourceLoc = sprite.getSourcePosition();
	Vector2D size = sprite.getHeightAndWidth();

	//topleft is 0,0
	int xMin = mLocation.getX();
	int xMax = mLocation.getX() + (size.getX() * mScale.getX());
	int yMin = mLocation.getY();
	int yMax = mLocation.getY() + (size.getY() * mScale.getY());

	if (vec.getX() >= xMin && vec.getX() <= xMax)
	{
		if (vec.getY() >= yMin && vec.getY() <= yMax)
		{
			return true;
		}
	}
	return false;
}