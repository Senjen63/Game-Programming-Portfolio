#include "GraphicsBuffer.h"

GraphicsBuffer::GraphicsBuffer(string path, SDL_Renderer* render)
{
	mOwnsBitmap = false;

	SDL_Surface* tmp = IMG_Load(path.c_str());
	mpBitmap = SDL_CreateTextureFromSurface(render, tmp);
	SDL_FreeSurface(tmp);
}

GraphicsBuffer::GraphicsBuffer(Color color, int height, int width, SDL_Renderer* render)
{
	mOwnsBitmap = false;

	mpBitmap = SDL_CreateTexture(render, SDL_PIXELFORMAT_ABGR8888, SDL_TEXTUREACCESS_TARGET, width, height);
	SDL_Texture* oldTarget = SDL_GetRenderTarget(render);
	SDL_SetRenderTarget(render, mpBitmap);//new render target

	Uint8 r, g, b, a;
	SDL_GetRenderDrawColor(render, &r, &g, &b, &a);

	SDL_SetTextureBlendMode(mpBitmap, SDL_BLENDMODE_BLEND);
	SDL_SetRenderDrawColor(render, color.getR(), color.getG(), color.getB(), color.getA());
	SDL_RenderClear(render);

	SDL_SetRenderDrawColor(render, r, g, b, a);
	SDL_SetRenderTarget(render, oldTarget);
}

GraphicsBuffer::GraphicsBuffer(SDL_Texture* pBitmap)
{
	mOwnsBitmap = false;
	mpBitmap = pBitmap;
}

GraphicsBuffer::~GraphicsBuffer()
{
	if (mOwnsBitmap == true)
	{
		SDL_DestroyTexture(mpBitmap);
	}
}

int GraphicsBuffer::getWidth()
{
	int width, height;
	SDL_QueryTexture(mpBitmap, NULL, NULL, &width, &height);

	return width;
}

int GraphicsBuffer::getHeight() 
{
	int width, height;
	SDL_QueryTexture(mpBitmap, NULL, NULL, &width, &height);

	return height;
}