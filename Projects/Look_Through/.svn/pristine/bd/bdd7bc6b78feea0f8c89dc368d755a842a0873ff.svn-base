#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

#include <iostream>
#include <cassert>
#include <string>
#include <vector>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>

#include "GraphicsSystem.h"
#include "GraphicsBuffer.h"
#include "Sprite.h"
#include "Color.h"
#include "Font.h"

using namespace std;

int main()
{
	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;

	const string INIT_TRACKER_NAME = "init";
	const string DRAW_TRACKER_NAME = "draw";
	const string WAIT_TRACKER_NAME = "wait";

	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;

	const int NUM_SPRITES = 16;
	const int SPRITE_WIDTH = 60;
	const int SPRITE_HEIGHT = 60;	
	const int SPRITE_SHEET_WIDTH = 4;
	const int SPRITE_SHEET_HEIGHT = 4;

	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string BACKGROUND_FILENAME = "steps.png";
	const string QUIMBY_FILENAME = "mayor_quimby.png";
	const string SMUFS_FILENAME = "smurf_sprites.png";
	const string FONT_FILENAME = "cour.ttf";
	const int FONT_SIZE = 48;
	//const string SAMPLE_FILENAME = "clapping.wav";
	const double SLEEP_TIME = 5.0;

	const Vector2D ORIGIN = Vector2D(0, 0);
	const Vector2D DISP_CENTER = Vector2D(DISP_WIDTH / 2, DISP_HEIGHT / 2);
	const Vector2D DISP_MIDDLE_TOP = Vector2D(DISP_WIDTH / 2, 0);
	const Vector2D RED_BUFFER_LOC = Vector2D(DISP_WIDTH / 6, DISP_HEIGHT / 6);

	const float RED_BUFFER_SCALE = 2.0f / 3.0f;


	//System Setup
	GraphicsSystem* pSystem = nullptr;
	pSystem = new GraphicsSystem;
	pSystem->init(DISP_WIDTH, DISP_HEIGHT);

	GraphicsBuffer* pStepsBuffer = new GraphicsBuffer(ASSET_PATH + BACKGROUND_FILENAME);
	GraphicsBuffer* pQuimbyBuffer = new GraphicsBuffer(ASSET_PATH + QUIMBY_FILENAME);
	GraphicsBuffer* pSmurfSheetBuffer = new GraphicsBuffer(ASSET_PATH + SMUFS_FILENAME);
	GraphicsBuffer* pRedBuffer = new GraphicsBuffer(DISP_WIDTH, DISP_HEIGHT);

	Font* pCourFont = new Font(ASSET_PATH + FONT_FILENAME, FONT_SIZE);

	Sprite* pQuimby =  new Sprite(pQuimbyBuffer);
	Sprite* pSteps = new Sprite(pStepsBuffer);

	vector<Sprite*> vpSmurfs;	

	for (int i = 0; i < SPRITE_SHEET_HEIGHT; i++)
	{
		for (int j = 0; j < SPRITE_SHEET_WIDTH; j++)
		{
			Vector2D spriteLocation = Vector2D(j * SPRITE_WIDTH, i * SPRITE_HEIGHT);
			vpSmurfs.push_back(new Sprite(pSmurfSheetBuffer, spriteLocation, SPRITE_WIDTH, SPRITE_HEIGHT));			
		}
	}

	Color red = Color(200, 0, 0, 255);
	Color black = Color();

	string curseText = "Curse you Papa Smurf!";	

	Timer timer;



	//Draw Stuff
	pSystem->fillColor(pRedBuffer, red);
	pSystem->draw(pRedBuffer, ORIGIN, pQuimby);
	pSystem->writeText(pRedBuffer, DISP_MIDDLE_TOP, pCourFont, black, curseText);

	pSystem->draw(ORIGIN, pSteps);
	pSystem->draw(RED_BUFFER_LOC, pRedBuffer, RED_BUFFER_SCALE);

	for (int i = 0; i < NUM_SPRITES; i++)
	{
		// Generate a random x/y that's in the buffer and doesn't clip the smurf
		int randX = rand() % (DISP_WIDTH - SPRITE_WIDTH);
		int randY = rand() % (DISP_HEIGHT - SPRITE_HEIGHT);
		
		pSystem->draw(Vector2D(randX, randY), vpSmurfs[i]);
	}

	pSystem->saveBuffer(pSystem->getBackBuffer(), "backbuffer.jpg");
	pSystem->saveBuffer(pRedBuffer, "redbuffer.jpg");

	pSystem->flip();

	
	
	
	timer.sleep(5000.0);

	pPerformanceTracker->stopTracking("loop");
	//cout << "Frame Took:" << pPerformanceTracker->getElapsedTime("loop") << " ms" << endl;
	pPerformanceTracker->clearTracker("loop");


	// Clean up graphics things
	delete pCourFont;
	delete pRedBuffer;
	delete pSmurfSheetBuffer;
	delete pQuimbyBuffer;
	delete pStepsBuffer;
	delete pSystem;


	// Clean up Sprites
	delete pQuimby;
	delete pSteps;

	for (int i = 0; i < NUM_SPRITES; i++)
	{
		delete vpSmurfs[i];
	}


	delete pPerformanceTracker;
	MemoryTracker::getInstance()->reportAllocations(cout);

	system("pause");
	return 0;
}