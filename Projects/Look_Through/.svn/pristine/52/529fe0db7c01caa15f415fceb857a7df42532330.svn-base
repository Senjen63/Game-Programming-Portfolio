#include "Walls.h"
#include "Game.h"
#include "GraphicsBuffer.h"
#include "GraphicsBufferManager.h"
#include "GraphicsSystem.h"
#include "Level.h"
#include "LevelManager.h"
#include <fstream>
#include "Color.h"

Walls::Walls()
{
	int red = 0;
	int green = 0;
	int blue = 0;
	int a = 0;

	ifstream input("./data_files/Walls.txt");

	if (input.good())
	{
		string key;

		while (!input.eof())
		{
			input >> key;
			if (key == "wall_color")
			{
				input >> red >> green >> blue >> a;
				this->mpWallColor = new Color(red, green, blue, a);
			}
		}
	}
	input.close();
	
	Game* pGame = Game::getInstance();

	this->mpWallSprite = nullptr;
	this->mWallWidth = pGame->getGridSlotSize().getX();
	this->mWallHeight = pGame->getGridSlotSize().getY();

	createWallSprite();
}

Walls::~Walls()
{
	delete mpWallSprite;
	delete mpWallColor;
}

void Walls::createWallSprite()
{
	Game* pGame = Game::getInstance();

	const string WALL_KEY = "wall";

	pGame->getGraphicsBufferManager()->createAndAddGraphicsBuffer(WALL_KEY, mWallWidth, mWallHeight);
	pGame->getGraphicsSystem()->setColor(pGame->getGraphicsBufferManager()->getGraphicsBuffer(WALL_KEY), mpWallColor);

	mpWallSprite = new Sprite(mWallWidth, mWallHeight, Vector2D(0, 0), pGame->getGraphicsBufferManager()->getGraphicsBuffer(WALL_KEY));
}

void Walls::drawAllWalls()
{
	Game* pGame = Game::getInstance();

	for (auto wallCoord : pGame->getLevelManager()->getLevels()[pGame->getLevelManager()->getCurrentLevel() - 1]->getWallCoords())
	{
		pGame->getGraphicsSystem()->draw(wallCoord, *mpWallSprite);
	}
}