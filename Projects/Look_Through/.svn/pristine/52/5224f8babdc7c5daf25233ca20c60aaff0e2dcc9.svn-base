//BP
#include "GraphicsSystem.h"

GraphicsSystem::GraphicsSystem()
{
	mpDisplay = nullptr;
	mpBackBuff = nullptr;
	mBuffSize = Vector2D(0, 0);
}

GraphicsSystem::GraphicsSystem(int hori, int vert)
{
	mBuffSize = Vector2D(hori, vert);
}

GraphicsSystem::~GraphicsSystem()
{
	cleaner();
}

bool GraphicsSystem::init()
{
	if (!al_init())
	{
		cout << "Allegro couldn't start." << endl;
		system("pause");
		return false;
	}
	if (!al_init_primitives_addon())
	{
		cout << "Issues with primitives." << endl;
		system("pause");
		return false;
	}
	if (!al_init_image_addon())
	{
		cout << "Issues with Image addon." << endl;
		system("pause");
		return false;
	}
	if (!al_init_ttf_addon())
	{
		cout << "Issues with TTF addon." << endl;
		system("pause");
		return false;
	}
	if (!al_init_font_addon())
	{
		cout << "Issues with Font addon." << endl;
		system("pause");
		return false;
	}
	mpDisplay = al_create_display(mBuffSize.getX(), mBuffSize.getY());
	mpBackBuff = new GraphicsBuffer(al_get_backbuffer(mpDisplay));
	return true;
}

void GraphicsSystem::cleaner()
{
	delete mpBackBuff;
	al_destroy_display(mpDisplay);
}

bool GraphicsSystem::saveBuff(GraphicsBuffer* saveBuff, string name)
{
	if (al_save_bitmap(name.c_str(), saveBuff->mpBitmap))
	{

		return true;

	}
	cout << "Couldn't save buffer." << endl;
	return false;
}

void GraphicsSystem::displayMessage(int hori, int vert, Font* font, Color color, string message)
{
	ALLEGRO_COLOR newColor = al_map_rgba(color.getR(),
		color.getG(),
		color.getB(),
		color.getA());
	al_draw_text(font->mpFont,
		newColor,
		hori, vert,
		font->mFlag,
		message.c_str());
}

void GraphicsSystem::draw(int hori, int vert, Sprite sprite, float horiScale, float vertScale)
{
	Vector2D originPoint = sprite.getSourcePosition();
	Vector2D originDimensions = sprite.getHeightAndWidth();
	al_draw_scaled_bitmap(sprite.getSpriteBuff().mpBitmap,
		originPoint.getX(),
		originPoint.getY(),
		originDimensions.getX(),
		originDimensions.getY(),
		hori, vert,
		horiScale * originDimensions.getX(),
		vertScale * originDimensions.getY(), 0);
}

void GraphicsSystem::draw(GraphicsBuffer* pBackBuff, int hori, int vert, float horiScale, float vertScale)
{
	int x = 0;
	int y = 0;
	al_draw_scaled_bitmap(pBackBuff->mpBitmap,
		x, y,
		pBackBuff->getWidth(),
		pBackBuff->getHeight(), 
		hori, vert,
		horiScale * pBackBuff->getWidth(),
		vertScale * pBackBuff->getHeight(), 0);
}

void GraphicsSystem::displayMessage(GraphicsBuffer* pBackBuff, int hori, int vert, Font* font, Color color, string message)
{
	ALLEGRO_COLOR newColor = al_map_rgba(color.getR(),
		color.getG(),
		color.getB(),
		color.getA());
	ALLEGRO_BITMAP* previousBitmap = al_get_target_bitmap();
	al_set_target_bitmap(pBackBuff->mpBitmap);
	al_draw_text(font->mpFont,
		newColor,
		hori, vert,
		font->mFlag,
		message.c_str());
	al_set_target_bitmap(previousBitmap);
}

void GraphicsSystem::draw(GraphicsBuffer* pBackBuff, int hori, int vert, Sprite sprite, float horiScale, float vertScale)
{
	Vector2D originPoint = sprite.getSourcePosition();
	Vector2D originDimensions = sprite.getHeightAndWidth();
	ALLEGRO_BITMAP* previousBitmap = al_get_target_bitmap();
	al_set_target_bitmap(pBackBuff->mpBitmap);
	al_draw_scaled_bitmap(sprite.getSpriteBuff().mpBitmap,
		originPoint.getX(),
		originPoint.getY(),
		originDimensions.getX(),
		originDimensions.getY(),
		hori, vert,
		horiScale * originDimensions.getX(),
		vertScale * originDimensions.getY(), 0);
	al_set_target_bitmap(previousBitmap);
}

void GraphicsSystem::draw(GraphicsBuffer* pBackBuff, int horiCenter, int vertCenter, int hori, int vert, float horiScale, float vertScale, float angle)
{
	al_draw_scaled_rotated_bitmap(pBackBuff->mpBitmap,
		horiCenter,
		vertCenter,
		hori, vert,
		horiScale,
		vertScale,
		angle, 0);
}