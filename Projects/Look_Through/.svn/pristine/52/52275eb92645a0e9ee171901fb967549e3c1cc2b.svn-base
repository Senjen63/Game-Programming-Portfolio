#include "GraphicsSystem.h"
#include "Color.h"
#include "Font.h"
#include "GraphicsBuffer.h"
#include "Sprite.h"
#include "Vector2D.h"
#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

using namespace std;

GraphicsSystem::GraphicsSystem()
{
	this->mpDisplay = nullptr;
	this->mpBackBuffer = nullptr;
}

GraphicsSystem::~GraphicsSystem() 
{
	cleanUp();
}

void GraphicsSystem::init(int displayWidth, int displayHeight)
{
	if (!al_init())
	{
		cout << "error initting Allegro\n";
		system("pause");
		return;
	}
	if (!al_init_image_addon())
	{
		cout << "error - Image Add-on not initted\n";
		system("pause");
		return;
	}
	if (!al_init_font_addon())
	{
		cout << "error - Font Add-on not initted\n";
		system("pause");
		return;
	}
	if (!al_init_ttf_addon())
	{
		cout << "error - TTF Add-on not initted\n";
		system("pause");
		return;
	}
	if (!al_init_primitives_addon())
	{
		cout << "error - primitives Add-on not initted\n";
		system("pause");
		return;
	}
	if (!al_install_audio())
	{
		cout << "error - Audio Add-on not initted\n";
		system("pause");
		return;
	}
	if (!al_init_acodec_addon())
	{
		cout << "error - Audio Codec Add-on not initted\n";
		system("pause");
		return;
	}
	if (!al_reserve_samples(1))
	{
		cout << "error - samples not reserved\n";
		system("pause");
		return;
	}

	this->mpDisplay = al_create_display(displayWidth, displayHeight);
	this->mpBackBuffer = new GraphicsBuffer(al_get_backbuffer(mpDisplay));
}

void GraphicsSystem::cleanUp() 
{
	al_destroy_display(mpDisplay);
	delete mpBackBuffer;
}

void GraphicsSystem::flip() 
{
	al_flip_display();
}

void GraphicsSystem::draw(Vector2D loc, Sprite sprite, float scale)
{
	al_set_target_bitmap(mpBackBuffer->mpBitmap);

	al_draw_scaled_bitmap(sprite.getBuffer()->mpBitmap, sprite.getSourceLocation().getX(), sprite.getSourceLocation().getY(), sprite.getSpriteWidth(), sprite.getSpriteHeight(), loc.getX(), loc.getY(), sprite.getSpriteWidth()*scale, sprite.getSpriteHeight()*scale, 0);
}

void GraphicsSystem::draw(GraphicsBuffer* buffer, Vector2D loc, Sprite sprite, float scale)
{
	al_set_target_bitmap(buffer->mpBitmap);

	al_draw_scaled_bitmap(sprite.getBuffer()->mpBitmap, sprite.getSourceLocation().getX(), sprite.getSourceLocation().getY(), sprite.getSpriteWidth(), sprite.getSpriteHeight(), loc.getX(), loc.getY(), sprite.getSpriteWidth() * scale, sprite.getSpriteHeight() * scale, 0);
}

void GraphicsSystem::writeText(Vector2D loc, Font* font, Color* color, string text, string alignment)
{
	al_set_target_bitmap(mpBackBuffer->mpBitmap);

	if (alignment == "center")
	{
		al_draw_text(font->mpFont, createColor(color), loc.getX(), loc.getY(), ALLEGRO_ALIGN_CENTER, text.c_str());
	}
	else if (alignment == "left")
	{
		al_draw_text(font->mpFont, createColor(color), loc.getX(), loc.getY(), ALLEGRO_ALIGN_LEFT, text.c_str());
	}
	else if (alignment == "right")
	{
		al_draw_text(font->mpFont, createColor(color), loc.getX(), loc.getY(), ALLEGRO_ALIGN_RIGHT, text.c_str());
	}
	else if (alignment == "none")
	{
		al_draw_text(font->mpFont, createColor(color), loc.getX(), loc.getY(), 0, text.c_str());
	}
}

void GraphicsSystem::writeText(GraphicsBuffer* buffer, Vector2D loc, Font* font, Color* color, string text, string alignment)
{
	al_set_target_bitmap(buffer->mpBitmap);
	if (alignment == "center")
	{
		al_draw_text(font->mpFont, createColor(color), loc.getX(), loc.getY(), ALLEGRO_ALIGN_CENTER, text.c_str());
	}
	else if (alignment == "left")
	{
		al_draw_text(font->mpFont, createColor(color), loc.getX(), loc.getY(), ALLEGRO_ALIGN_LEFT, text.c_str());
	}
	else if (alignment == "right")
	{
		al_draw_text(font->mpFont, createColor(color), loc.getX(), loc.getY(), ALLEGRO_ALIGN_RIGHT, text.c_str());
	}
	else if (alignment == "none")
	{
		al_draw_text(font->mpFont, createColor(color), loc.getX(), loc.getY(), 0, text.c_str());
	}
}

void GraphicsSystem::saveBuffer(GraphicsBuffer* buffer, string fileName)
{
	al_save_bitmap(fileName.c_str(), buffer->mpBitmap);
}

GraphicsBuffer* GraphicsSystem::getBackBuffer()
{
	return mpBackBuffer;
}

ALLEGRO_COLOR GraphicsSystem::createColor(Color* color) 
{
	return al_map_rgba(color->getRed(), color->getGreen(), color->getBlue(), color->getA());
}

void GraphicsSystem::setColor(GraphicsBuffer* buffer,  Color* color)
{
	al_set_target_bitmap(buffer->mpBitmap);
	al_clear_to_color(createColor(color));
}
