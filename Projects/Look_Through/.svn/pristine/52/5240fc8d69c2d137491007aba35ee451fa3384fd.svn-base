#include "GraphicsBufferManager.h"

GraphicsBufferManager::GraphicsBufferManager()
{
}

GraphicsBufferManager::~GraphicsBufferManager()
{
	clear();
}


void GraphicsBufferManager::clear()
{
	for (auto map : mMap)
	{
		GraphicsBuffer* pBuff = map.second;
		delete pBuff;
	}
	mMap.clear();
}

//From lawson Manager and Singleton examples
void GraphicsBufferManager::addBuffer(const BufferKey& key, string newBuffer)
{
	GraphicsBuffer* pBuff = NULL;

	auto map = mMap.find(key);

	if (map == mMap.end())
	{
		pBuff = new GraphicsBuffer(ASSET_PATH + newBuffer);
		mMap[key] = pBuff;
	}
}

void GraphicsBufferManager::addBuffer(const BufferKey& key, GraphicsBuffer* buffer)
{
	auto map = mMap.find(key);

	if (map == mMap.end())
	{
		mMap[key] = buffer;
	}
}

//From lawson Manager and Singleton examples
void GraphicsBufferManager::removeBuffer(GraphicsBuffer* buffer)
{
	for (auto map : mMap)
	{
		if (buffer == map.second)
		{
			delete buffer;
			mMap.erase(map.first);
			return;
		}
	}
}

//From lawson Manager and Singleton examples
GraphicsBuffer* GraphicsBufferManager::getBuffer(const BufferKey& key) const
{
	auto map = mMap.find(key);

	if (map != mMap.end())
	{
		return map->second;
	}
	else
		return nullptr;
}