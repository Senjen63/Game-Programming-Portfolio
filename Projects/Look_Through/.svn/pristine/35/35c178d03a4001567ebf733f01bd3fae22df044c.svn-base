#include "Animation.h"
#include "Game.h"

Animation::Animation(int fps, bool loop)
{
	mCurrent = 0;
	mFps = fps;
	mLoop = loop;

	if (Game::getGame() != nullptr)
	{
		mTimePerSprite = *Game::getGame()->getTimeScale() / mFps;
	}
	else
	{
		mTimePerSprite = DEFAULT_TIME_SCALE / mFps;
	}
	
	mTimeLeft = mTimePerSprite;

	mpFrames = nullptr;
}

Animation::Animation(AnimationFrames* frames, int fps, bool loop)
{
    mCurrent = 0;
    mFps = fps;

	if (Game::getGame() != nullptr)
	{
		mTimePerSprite = *Game::getGame()->getTimeScale() / mFps;
	}
	else
	{
		mTimePerSprite = DEFAULT_TIME_SCALE / mFps;
	}

    mTimeLeft = mTimePerSprite;
    mLoop = loop;

	mpFrames = frames;
}


Animation::~Animation()
{

}


int Animation::getCurrentFrame() const
{
	return mCurrent;
}


int Animation::getFrameTotal() const
{
	return mpFrames->getFrameTotal();
}


Sprite Animation::getCurrentSprite()
{
	return mpFrames->getSprite(mCurrent);
}


void Animation::addSprite(Sprite newSprite)
{
	mpFrames->addSprite(newSprite);
}


void Animation::update(float timeElapsed)
{
	mTimeLeft -= timeElapsed;

	if (mTimeLeft <= 0)
	{
		mCurrent++;
		mTimeLeft = mTimePerSprite;

		if (mCurrent >= mpFrames->getFrameTotal() && mLoop)
		{
			mCurrent = 0;
		}
	}
}


void Animation::changeSpeed(int newFps)
{
	mFps = newFps;
	mTimePerSprite = 1000.0 / newFps;
}


void Animation::sync(const Animation& lastAnim)
{
	if (mpFrames->getFrameTotal() == lastAnim.getFrameTotal())
	{
		mCurrent = lastAnim.getCurrentFrame();
	}
}