
#include "Game.h"
#include <windows.h>

Game* Game::mpsGameSystem = NULL;

Game::Game()
{
	mpHud = nullptr;
	mpFont = nullptr;
	mpSystem = new GraphicsSystem();
	mInputSystem.init();

	mpEventSystem = nullptr;
}

Game::~Game()
{
	/*if (mMenuState == MenuState::PLAY_GAME)
		saveGame();*/
	cleanup();
}

void Game::createInstance()
{
	if (mpsGameSystem == NULL)
	{
		mpsGameSystem = new Game;
	}
}

void Game::destroyInstance()
{
	delete mpsGameSystem;
	mpsGameSystem = nullptr;
}


void Game::init()
{
	loadAssets();

	mBufferManager.createAndManageBuffer(mBackgroundFile, mAssetPath + mBackgroundFile);

	mBufferManager.createAndManageBuffer(mBBishop, mAssetPath + mBlackPath + mBBishop);
	mBufferManager.createAndManageBuffer(mBKing, mAssetPath + mBlackPath + mBKing);
	mBufferManager.createAndManageBuffer(mBKnight, mAssetPath + mBlackPath + mBKnight);
	mBufferManager.createAndManageBuffer(mBPawn, mAssetPath + mBlackPath + mBPawn);
	mBufferManager.createAndManageBuffer(mBQueen, mAssetPath + mBlackPath + mBQueen);
	mBufferManager.createAndManageBuffer(mBRook, mAssetPath + mBlackPath + mBRook);

	mBufferManager.createAndManageBuffer(mWBishop, mAssetPath + mWhitePath + mWBishop);
	mBufferManager.createAndManageBuffer(mWKing, mAssetPath + mWhitePath + mWKing);
	mBufferManager.createAndManageBuffer(mWKnight, mAssetPath + mWhitePath + mWKnight);
	mBufferManager.createAndManageBuffer(mWPawn, mAssetPath + mWhitePath + mWPawn);
	mBufferManager.createAndManageBuffer(mWQueen, mAssetPath + mWhitePath + mWQueen);
	mBufferManager.createAndManageBuffer(mWRook, mAssetPath + mWhitePath + mWRook);

	mBufferManager.createAndManageBuffer(mFlash, mAssetPath + mFlash);
	mBufferManager.createAndManageBuffer(mMovePtsFile, mAssetPath + mMovePtsFile);
	mBufferManager.createAndManageBuffer(mAttackPtsFile, mAssetPath + mAttackPtsFile);

	mBufferManager.createAndManageBuffer(GREEN, Color(0, 255, 0, 150), mSpriteWidth, mSpriteHeight);
	mBufferManager.createAndManageBuffer(RED, Color(255, 0, 0, 150), mSpriteWidth, mSpriteHeight);

	mpFont = new Font(mFontPath, mFontSize);
	mpHud = new Hud(mpSystem, mpFont);

	mAnimationManager.createAnimation(mFlash, new Animation(mBufferManager.getBuffer(mFlash), 4, 50, Game::getInstance()->getDefaultTiming(), true));
	mAnimationManager.createAnimation(mMovePtsFile, new Animation(mBufferManager.getBuffer(mMovePtsFile), 4, mSpriteWidth, Game::getInstance()->getDefaultTiming(), true));
	mAnimationManager.createAnimation(mAttackPtsFile, new Animation(mBufferManager.getBuffer(mAttackPtsFile), 4, mSpriteWidth, Game::getInstance()->getDefaultTiming(), true));

	mFlashs.createAndAddUnit(mAnimationManager.getAnimation(mFlash));
	mFlashs.createAndAddUnit(mAnimationManager.getAnimation(mFlash));
	mFlashs.createAndAddUnit(mAnimationManager.getAnimation(mFlash));
	mFlashs.createAndAddUnit(mAnimationManager.getAnimation(mFlash));
	mFlashs.setUnitPos(0, Vector2D(80, 80));
	mFlashs.setUnitPos(1, Vector2D(770, 80));
	mFlashs.setUnitPos(2, Vector2D(80, 770));
	mFlashs.setUnitPos(3, Vector2D(770, 770));

	mpEventSystem = EventSystem::getInstance();
	mpEventSystem->init();

	mpHud->init();

	mMenuManager.loadAssets(ASSET_DATA);
	mMenuState = mMenuManager.getCurrentState();

	mSounds.addSound((mSoundPath + mYodaDeath).c_str());
	mSounds.addSound((mSoundPath + mMoveSound).c_str());
	mSounds.addSound((mSoundPath + mSelectSound).c_str());
	mSounds.addSound((mSoundPath + mBackgroundTheme).c_str());
	mSounds.playSound(3, -1);//Background theme

	mpEventSystem->getInstance()->addListener((EventType)INPUT_EVENT, this);
	mpEventSystem->getInstance()->addListener((EventType)GAMEPLAY_EVENT, this);
	mpEventSystem->getInstance()->addListener((EventType)MY_MOUSE_EVENT, this);
}

void Game::cleanup()
{
	mpSystem->cleanUp();

	mMenuManager.cleanUp();

	mBufferManager.cleanup();
	mLevelManager.cleanUp();

	//mAnimationManager.cleanUp();
	mFlashs.cleanup();
	mAnimationManager.cleanUp();
	
	//mWhitePieces.cleanUp();
	//mBlackPieces.cleanUp();

	//mBufferManager.cleanup();

	delete mpSystem;

	delete mpFont;
	delete mpHud;

	mpEventSystem->cleanup();
}

void Game::checkTimer()
{
	if(mGameSpeed == Speed::SLOW_SPEED)
	{
		if(mElapsedTime <= 0)
		{
			mElapsedTime = mSlowSpeed;
			endCurrentTurn();
		}
	}
	else if(mGameSpeed == Speed::MEDIUM_SPEED)
	{
		if (mElapsedTime <= 0)
		{
			mElapsedTime = mDefaultSpeed;
			endCurrentTurn();
		}
	}
	else if(mGameSpeed == Speed::FAST_SPEED)
	{
		if(mElapsedTime <= 0)
		{
			mElapsedTime = mFastSpeed;
			endCurrentTurn();
		}
	}
}

void Game::doLoop()
{
	PerformanceTracker* pTracker = new PerformanceTracker();

	Timer time;
	float elapsedTime = 0.0;
	int spawn = 500;

	loadLevels();

	if(mGameSpeed == Speed::SLOW_SPEED)
		mElapsedTime = mSlowSpeed;
	else if(mGameSpeed == Speed::MEDIUM_SPEED)
		mElapsedTime = mDefaultSpeed;
	else if(mGameSpeed == Speed::FAST_SPEED)
		mElapsedTime = mFastSpeed;
	

	Vector2D mousePos;

	while (mMenuState != MenuState::EXIT)
	{
		//start timers
		pTracker->clearTracker("loop");
		pTracker->startTracking("loop");
		time.start();

		if (mMenuState == MenuState::MAIN_MENU)
		{
			mpSystem->clearFrame();
			mInputSystem.getInputEvent();
			
			mMenuManager.mouseOverButton(mInputSystem.getMousePosition());
			mMenuManager.drawMenuButtons(mpSystem);
			
			mpSystem->flip();
		}
		else if (mMenuState == MenuState::OPTIONS_MENU)
		{
			mpSystem->clearFrame();
			mInputSystem.getInputEvent();

			mMenuManager.mouseOverButton(mInputSystem.getMousePosition());
			mMenuManager.drawOptionsButtons(mpSystem);

			mpSystem->flip();
		}
		else if (mMenuState == MenuState::PLAY_GAME)
		{
			mHidLevel = false;

			checkTimer();
			mInputSystem.getInputEvent();

			mpSystem->clearFrame();

			mAnimationManager.update(SLEEP_MS);

			if (mWhiteTurn)
			{
				mWhitePieces.checkCheck(mWhitePieces, mBlackPieces);
			}
			else
			{
				mBlackPieces.checkCheck(mBlackPieces, mWhitePieces);
			}

			draw();

			mpSystem->flip();

			//sleep for desired time
			time.sleepUntilElapsed(SLEEP_MS);

			hudEvents((float)time.getElapsedTime());
			elapsedTime += (float)time.getElapsedTime();

			pTracker->stopTracking("loop");
			//cout << pTracker->getElapsedTime("loop") << endl;
		}
	}

	delete pTracker;
}

void Game::loadAssets()
{
	ifstream fin;
	fin.open(ASSET_DATA, ios::in);

	string tmp;

	if (!fin.fail())
	{
		while (!fin.eof())
		{
			fin >> tmp;
			
			if (tmp == "Sound=")
				fin >> mSoundPath;

			if (tmp == "Yoda=")
				fin >> mYodaDeath;

			if (tmp == "Move=")
				fin >> mMoveSound;

			if (tmp == "Select=")
				fin >> mSelectSound;

			if (tmp == "Theme=")
				fin >> mBackgroundTheme;

			if (tmp == "Background=")
				fin >> mBackgroundFile;

			if (tmp == "AssetPath=")
				fin >> mAssetPath;

			if (tmp == "SpriteWidth=")
				fin >> mSpriteWidth;

			if (tmp == "SpriteHeight=")
				fin >> mSpriteHeight;

			if (tmp == "NumFrames=")
				fin >> mNumFrames;

			if (tmp == "FontPath=")
				fin >> mFontPath;

			if (tmp == "FontSize=")
				fin >> mFontSize;

			if (tmp == "BlackPath=")
				fin >> mBlackPath;

			if (tmp == "WhitePath=")
				fin >> mWhitePath;

			if (tmp == "BBi=")
				fin >> mBBishop;

			if (tmp == "WBi=")
				fin >> mWBishop;

			if (tmp == "BKi=")
				fin >> mBKing;

			if (tmp == "WKi=")
				fin >> mWKing;

			if (tmp == "BKn=")
				fin >> mBKnight;

			if (tmp == "WKn=")
				fin >> mWKnight;

			if (tmp == "BPa=")
				fin >> mBPawn;

			if (tmp == "WPa=")
				fin >> mWPawn;

			if (tmp == "BQu=")
				fin >> mBQueen;

			if (tmp == "WQu=")
				fin >> mWQueen;

			if (tmp == "BRo=")
				fin >> mBRook;

			if (tmp == "WRo=")
				fin >> mWRook;

			if (tmp == "Flash=")
				fin >> mFlash;

			if (tmp == "MovePt=")
				fin >> mMovePtsFile;

			if (tmp == "AttackPt=")
				fin >> mAttackPtsFile;
		}
	}
	else
	{
		cout << "Asset File failed to open." << endl;
	}

	fin.close();
}

void Game::loadLevels()
{
	ifstream fin;
	float tmp = 0;
	int numLevels = 0, currentLevel = 0, numWalls = 0, posX, posY, length, speedSpawn, slowSpawn, scoreSpawn, scorePoints, startingLength;
	string text;

	fin.open(LEVEL_DATA, ios::in);
	
	if (!fin.fail())
	{
		while (!fin.eof())
		{
			fin >> text;

			if (text == "Levels=")
			{
				fin >> numLevels;
				mLevelManager.init(numLevels);
			}

			if (text == "DefaultSpeed=")
			{
				fin >> tmp;
				mDefaultSpeed = tmp;
			}

			if (text == "FastSpeed=")
			{
				fin >> tmp;
				mFastSpeed = tmp;
			}

			if (text == "SlowSpeed=")
			{
				fin >> tmp;
				mSlowSpeed = tmp;
			}

			if (text == "{")
			{
				fin >> numWalls;

				mLevelManager.createSideWalls(currentLevel);

				for (int i = 0; i < numWalls; i++)
				{
					fin >> posX >> posY;
					mLevelManager.createInnerWall(currentLevel, Vector2D(posX, posY));
				}

				fin >> text >> length
					>> text >> speedSpawn
					>> text >> slowSpawn
					>> text >> scoreSpawn
					>> text >> scorePoints
					>> text >> startingLength;

				mLevelManager.loadLevelData(currentLevel, length, speedSpawn, slowSpawn, scoreSpawn, scorePoints, startingLength);

				fin >> text;
				currentLevel++;
			}
			
		}
	}
	else
	{
		cout << "Level File failed to open." << endl;

		mLevelManager.init(numLevels);
		mLevelManager.createSideWalls(numLevels);
	}

	fin.close();
}

void Game::draw()
{
	if (!mHidLevel)
	{
		mpSystem->draw(mBufferManager.getBuffer(mBackgroundFile));

		mLevelManager.draw(mpSystem, mCurrentLevel);

		if (mWhiteTurn)
		{
			mWhitePieces.drawAll(mpSystem, mWhitePieces, mBlackPieces);
			mBlackPieces.drawAll(mpSystem, mBlackPieces, mWhitePieces);
		}
		else
		{
			mBlackPieces.drawAll(mpSystem, mBlackPieces, mWhitePieces);
			mWhitePieces.drawAll(mpSystem, mWhitePieces, mBlackPieces);
		}

		mFlashs.draw(mpSystem);

		mpHud->display();
	}
}

void Game::saveGame()
{
	ofstream fout;

	fout.open(SAVE_FILE, ios::out);

	if (!fout.fail())
	{
		fout.clear();

		fout << "WhiteTurn= " << mWhiteTurn << endl;
		fout << "Difficulty= " << (int)mGameSpeed << endl;
		fout << "Time= " << mElapsedTime << endl << endl;

		fout << "White\n" << "{\n";

		mWhitePieces.save(fout);

		fout << "Black\n" << "{\n";

		mBlackPieces.save(fout);
	}
	else
	{
		cout << "SAVE FILE FAILED TO OPEN!!\n";
	}

	fout.close();
}

void Game::loadGame()
{
	ifstream fin;
	string tmp;
	int difficulty;

	fin.open(SAVE_FILE, ios::in);

	if (!fin.fail())
	{
		fin >> tmp >> mWhiteTurn;

		fin >> tmp >> difficulty;

		if (difficulty == 0)
			mGameSpeed = Speed::SLOW_SPEED;

		if (difficulty == 1)
			mGameSpeed = Speed::MEDIUM_SPEED;

		if (difficulty == 2)
			mGameSpeed = Speed::FAST_SPEED;

		fin >> tmp >> mElapsedTime;

		//read white and following {
		fin >> tmp >> tmp;

		mWhitePieces.loadStartW(fin);

		//read black and following {
		fin >> tmp >> tmp;

		mBlackPieces.loadStartB(fin);

	}
	else
	{
		cout << "SAVE FILE FAILED TO OPEN\n";
	}

	fin.close();
}

void Game::hudEvents(float elapsedTime)
{
	mElapsedTime -= elapsedTime / mTimeScale;
	mpEventSystem->fireEvent(TimeEvent(mElapsedTime));

	mFps = mTimeScale / elapsedTime;
	mpEventSystem->fireEvent(FpsEvent(mFps));

	if (mWhiteTurn)
		mpEventSystem->fireEvent(TurnEvent(mWhiteText));
	else
		mpEventSystem->fireEvent(TurnEvent(mBlackText));
}

void Game::endCurrentTurn()
{
	playSound(1);
	if (mWhiteTurn)
	{
		mWhitePieces.unselect();
		mWhiteTurn = false;
	}
	else
	{
		mBlackPieces.unselect();
		mWhiteTurn = true;
	}

	if(mGameSpeed == Speed::SLOW_SPEED)
		mElapsedTime = mSlowSpeed;
	else if(mGameSpeed == Speed::MEDIUM_SPEED)
		mElapsedTime = mDefaultSpeed;
	else if(mGameSpeed == Speed::FAST_SPEED)
		mElapsedTime = mFastSpeed;
}

void Game::handleEvent(const Event& event)
{
	if (event.getType() == GAMEPLAY_EVENT)
	{
		const GameplayEvent& gameplayEvent = static_cast<const GameplayEvent&>(event);

		if (gameplayEvent.getAction() == (int)GamePlayEventTypes::LOSE)
		{
			mContinueGame = false;
		}
	}
	
	if (event.getType() == INPUT_EVENT)
	{
		const InputEvent& inputEvent = static_cast<const InputEvent&>(event);

		if (inputEvent.getKeyCode() == (int)KeyCode::ESCAPE)
		{
			if (mMenuState == MenuState::PLAY_GAME)
				saveGame();

			mMenuState = MenuState::EXIT;
		}
	}

	if (event.getType() == MY_MOUSE_EVENT)
	{
		const MyMouseEvent& myMouseEvent = static_cast<const MyMouseEvent&>(event);

		if (mMenuState == MenuState::MAIN_MENU)
		{
			if (mMenuManager.checkMainMenuCollision(myMouseEvent.getMousePos()) == MenuState::PLAY_GAME)
			{
				mMenuState = MenuState::PLAY_GAME;
				mContinueGame = true;
				mWhitePieces.resetStartW();
				mBlackPieces.resetStartB();
			}
			else if (mMenuManager.checkMainMenuCollision(myMouseEvent.getMousePos()) == MenuState::LOAD_SAVE)
			{
				mMenuState = MenuState::PLAY_GAME;
				mContinueGame = true;
				loadGame();
				mWhitePieces.unselect();
				mBlackPieces.unselect();
			}
			else if (mMenuManager.checkMainMenuCollision(myMouseEvent.getMousePos()) == MenuState::OPTIONS_MENU)
			{
				mMenuState = MenuState::OPTIONS_MENU;
			}
			else if (mMenuManager.checkMainMenuCollision(myMouseEvent.getMousePos()) == MenuState::EXIT)
			{
				mMenuState = MenuState::EXIT;
			}
		}
		else if (mMenuState == MenuState::OPTIONS_MENU)
		{
			mMenuManager.checkOptionsMenuCollision(myMouseEvent.getMousePos(), 1);
			mMenuManager.checkOptionsMenuCollision(myMouseEvent.getMousePos(), 2);
			mMenuManager.checkOptionsMenuCollision(myMouseEvent.getMousePos(), 3);

			if (mMenuManager.checkOptionsMenuCollision(myMouseEvent.getMousePos(), 0) == MenuState::MAIN_MENU)
			{
				mMenuState = MenuState::MAIN_MENU;
			}
			else if (mMenuManager.checkOptionsMenuCollision(myMouseEvent.getMousePos(), 4) == MenuState::TOGGLE_SOUND)
			{
				mSounds.changeCanPlay(!mSounds.getCanPlay());

				if(mSounds.getCanPlay())
					mSounds.playSound(3, -1);
				else
					mSounds.stopSound();
			}
			else if (mMenuManager.checkOptionsMenuCollision(myMouseEvent.getMousePos(), 5) == MenuState::CHANGE_SPEED)
			{
				if(mGameSpeed == Speed::SLOW_SPEED)
				{
					mGameSpeed = Speed::MEDIUM_SPEED;
					mElapsedTime = mDefaultSpeed;
				}
				else if(mGameSpeed == Speed::MEDIUM_SPEED)
				{
					mGameSpeed = Speed::FAST_SPEED;
					mElapsedTime = mFastSpeed;
				}
				else if(mGameSpeed == Speed::FAST_SPEED)
				{
					mGameSpeed = Speed::SLOW_SPEED;
					mElapsedTime = mSlowSpeed;
				}
			}
		}

		if (mContinueGame == true && myMouseEvent.getMouseCode() == (int)MouseButton::LEFT)
		{
			if (mWhiteTurn)
			{
				if (mWhitePieces.checkSelection(myMouseEvent.getMousePos(), mWhitePieces, mBlackPieces))
					mSounds.playSound(2);//Select sound
			}
			else
			{
				if(mBlackPieces.checkSelection(myMouseEvent.getMousePos(), mBlackPieces, mWhitePieces))
					mSounds.playSound(2);//Select sound
			}
		}

		if (myMouseEvent.getMouseCode() == (int)MouseButton::RIGHT)
		{
			
		}

		if (myMouseEvent.getMouseCode() == (int)MouseButton::MIDDLE)
		{
			
		}
	}
}