#pragma once

#include "Event.h"
#include "InputEvent.h"
#include "Collider.h"

enum class Direction;
enum class CollisionType;

enum GameEventType
{
    EVENT_GAME_CLOSE = MouseEventType::NUM_MOUSE_EVENT_TYPES,
    EVENT_GAME_START,
    EVENT_GAME_OVER,
    EVENT_GAME_WON,
    EVENT_GAME_LEVEL_LOADED,
    EVENT_SNAKE_CHANGE_DIRECTION,
    EVENT_SNAKE_GROW,
    EVENT_SNAKE_MOVE,
    EVENT_SNAKE_SPEED,
    EVENT_GAME_POINTS,
    NUM_GAME_EVENT_TYPES
};

class CloseGameEvent : public Event
{
public:
    CloseGameEvent();
    virtual ~CloseGameEvent() {};
};

class GameStartEvent : public Event
{
public:
    GameStartEvent();
    virtual ~GameStartEvent() {};
};

class GameOverEvent : public Event
{
public:
    GameOverEvent();
    virtual ~GameOverEvent() {};
};

class GameWonEvent : public Event
{
public:
    GameWonEvent();
    virtual ~GameWonEvent() {};
};

class GameLevelLoaded : public Event
{
public:
    GameLevelLoaded();
    virtual ~GameLevelLoaded() {};
};

class ChangeDirectionEvent : public Event
{
public:
    ChangeDirectionEvent(Direction direction);
    virtual ~ChangeDirectionEvent() {};

    Direction getDirection() const { return mDirection; }

private:
    Direction mDirection;
};

class GrowEvent : public Event
{
public:
    GrowEvent(int growAmount);
    virtual ~GrowEvent() {};

    int getGrowAmount() const { return mGrowAmount; }

private:
    int mGrowAmount;
};

class PointsEvent : public Event
{
public:
    PointsEvent(int pointsAmount);
    virtual ~PointsEvent() {};

    int getPointsAmount() const { return mPointsAmount; }

private:
    int mPointsAmount;
};

class SpeedEvent : public Event
{
public:
    SpeedEvent(float deltaTime);
    virtual ~SpeedEvent() {};

    float getDeltaTime() const { return mDeltaTime; }

private:
    float mDeltaTime;
};

class MoveEvent : public Event
{
public:
    MoveEvent(const Vector2D& newPos);
    virtual ~MoveEvent() {};

    Vector2D getNewPos() const { return mNewPos; }

private:
    Vector2D mNewPos;
};