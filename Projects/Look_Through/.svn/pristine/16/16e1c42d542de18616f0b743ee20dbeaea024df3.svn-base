#pragma once

#include <Trackable.h>
#include <Vector2D.h>
#include <allegro5/allegro.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>
#include "GraphicsBuffer.h"
#include "Sprite.h"
#include "Font.h"
#include "Color.h"

enum class TextAlignment
{
    left = ALLEGRO_ALIGN_LEFT,
    right = ALLEGRO_ALIGN_RIGHT,
    center = ALLEGRO_ALIGN_CENTER,
};

class GraphicsSystem : public Trackable
{
public:
    /* Constuctors */ 
    GraphicsSystem(int width, int height);

    GraphicsSystem() = delete;
    GraphicsSystem(GraphicsSystem&) = delete;

    ~GraphicsSystem();

    /* Accessors */
    GraphicsBuffer* getBackBuffer() const { return mpBackBuffer; };
    int getWidth() const { return mWidth; }
    int getHeight() const { return mHeight; }
    bool isInitialized() const { return mIsInitialized; }

    /* Memeber Functions */
    void flip() const;

    void draw(const Vector2D& loc, const Sprite& sprite, float scale = 1.0f);
    void draw(const GraphicsBuffer& buffer, const Vector2D& loc, const Sprite& sprite, float scale = 1.0f);
    void drawText(const Vector2D& loc, const Font& font, const Color& color, const TextAlignment alignment, const std::string& text);
    void drawText(const GraphicsBuffer& buffer, const Vector2D& loc, const Font& font, const Color& color, const TextAlignment alignment, const std::string& text);
    void clearToColor(const Color& color);
    void clearToColor(const GraphicsBuffer& buffer, const Color& color);
    void saveBuffer(const GraphicsBuffer& bufferToSave, const std::string& path) const;

    void init();

private:
    void cleanUp();

    ALLEGRO_DISPLAY* mpDisplay;
    GraphicsBuffer* mpBackBuffer;
    int mWidth;
    int mHeight;

    bool mIsInitialized;
};
