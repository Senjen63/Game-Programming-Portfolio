#include "Animation.h"

Animation::Animation(std::vector<Sprite> sprites, float frameRate, bool loops) :
    mSprites(sprites),
    mFrameRate(frameRate), 
    mLoops(loops)
{}

Animation::Animation(const GraphicsBuffer* pSpriteSheetBuffer, int spriteWidth, int spriteHeight, float frameRate, bool loops)
    : mLoops(loops), mFrameRate(frameRate)
{
    mSprites = Sprite::slice(pSpriteSheetBuffer, spriteWidth, spriteHeight);
}

void Animation::update(double deltaTime)
{
    // Scale to to be amount of frames past: 
    // multiply it by 1/1000 to go from ms to sec then 
    // multiply it by the framerate to get from seconds to number of frames 
    mFramesPast += deltaTime * 0.001 * mFrameRate;
}

const Sprite& Animation::getCurrentSprite() const
{
    // Return last sprite when done and not looping 
    if (!mLoops && (int)mFramesPast >= (int)mSprites.size())
        return mSprites[mSprites.size() - 1];

    // modulus to wrap when it exceeds the number of frames 
    return mSprites[(int)mFramesPast % mSprites.size()];
}
