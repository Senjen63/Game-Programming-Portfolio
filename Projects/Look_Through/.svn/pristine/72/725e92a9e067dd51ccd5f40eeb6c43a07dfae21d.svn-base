#include "include/EntityManager.hpp"

EntityManager::EntityManager()
{
    mpComponentManager = std::make_shared< ComponentManager >();
}

Entity EntityManager::createEntity( const std::vector< Component * > & components )
{
    ComponentMask mask = 0;
    for ( auto & comp : components )
    {
        mask |= mpComponentManager->getMask( std::type_index( typeid( *comp ) ) );
    }

    if ( !mArchetypes.contains( mask ) )
    {
        mArchetypes[ mask ] = std::make_shared< Archetype >( mask );
    }

    mEntityMasks[ mLastEntity ] = mask;
    mArchetypes[ mask ]->addEntity( mLastEntity, components );
    return mLastEntity++;
}

void EntityManager::deleteEntity( const Entity entity )
{
    if ( !mEntityMasks.contains( entity ) ) return;

    const auto & arch = mArchetypes[ mEntityMasks[ entity ] ];
    arch->mEntities.erase( entity );

    if ( arch->mEntities.empty() )
    {
        mArchetypes.erase( mEntityMasks[ entity ] );
    }

    mEntityMasks.erase( entity );
}

std::vector< std::shared_ptr< Component > > & EntityManager::getComponentsFromEntity( const Entity entity )
{
    return mArchetypes[ mEntityMasks[ entity ] ]->getComponentsFromEntity( entity );
}

void EntityManager::createEntityQuery( const std::shared_ptr< EntityQuery > & query )
{
    query->entities.clear();

    ComponentMask withAllQ = 0, withAnyQ = 0, withNoneQ = 0;

    for ( const auto & c : query->mWithAll )
    {
        withAllQ |= mpComponentManager->getMask( c );
    }
    for ( const auto & c : query->mWithAny )
    {
        withAnyQ |= mpComponentManager->getMask( c );
    }
    for ( const auto & c : query->mWithNone )
    {
        withNoneQ |= mpComponentManager->getMask( c );
    }
    for ( auto & [ entInd, arch ] : mArchetypes )
    {
        if ( ( withNoneQ & entInd ) != 0 )
        {
            continue;
        }

        if ( withAnyQ != 0 && ( withAnyQ & entInd ) == 0 )
        {
            continue;
        }

        if ( ( withAllQ & entInd ) == withAllQ )
        {
            for ( auto & [ entity, index ] : arch->mEntities )
            {
                query->entities.push_back( entity );
            }
        }
    }
}

void EntityManager::addComponentToEntity( const Entity entity, Component * component )
{
    if ( !mEntityMasks.contains( entity ) ) return;

    auto comps = mArchetypes[ mEntityMasks[ entity ] ]->getComponentsFromEntity( entity );
    comps.emplace_back( component );
    //finish this
}
