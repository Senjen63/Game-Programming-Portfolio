#pragma once

#include <PerformanceTracker.h>
#include <Timer.h>
#include <Trackable.h>
#include <assert.h>
#include <fstream>

#include "GraphicsSystem.h"
#include "InputSystem.h"
#include "Animation.h"
#include "Unit.h"
#include "UnitManager.h"
#include "GraphicsBufferManager.h"
#include "Color.h"

#include "Event.h"
#include "EventSystem.h"
#include "EventListener.h"
#include "GameEvent.h"

#include "LevelManager.h"
#include "SnakeManager.h"
#include "FoodManager.h"
#include "HUD.h"

const std::string START_FILE = "text\\startup.txt";
const int ONE = 1;
const int TWO = 2;
const int THREE = 3;

const std::string GREEN_GB = "green";
const std::string WORM_GB = "worm";
const std::string WALL_GB = "wall";
const std::string HUD_GB = "hud";
const std::string FOOD_GB = "food";
const std::string PWRUP_GB = "pwrup";
const std::string PWRDWN_GB = "pwrdwn";

const int ORIGIN_X = 0;
const int ORIGIN_Y = 0;

static class Game : public EventListener
{
	public:
		static void createInstance() { mpGameInstance = new Game(); };
		static Game* getInstance() { assert(mpGameInstance != nullptr); return mpGameInstance; };
		static void destroyInstance() { delete mpGameInstance; mpGameInstance = nullptr; };

		void init();
		void cleanup();
		void doLoop();
		void loadFile();

		virtual void handleEvent(const Event& theEvent);

	private:
		Game();
		~Game();

		static Game* mpGameInstance;

		bool mShouldContinue = true;
		bool mStartGame = false;
		bool mLostGame = false;
		bool mWinGame = false;
		bool mPlayAgain = false;
		bool mMovingUp = false;
		bool mMovingDown = false;
		bool mMovingRight = false;
		bool mMovingLeft = false;

		Timer mElapsedTime;

		// managers
		GraphicsBufferManager* mpGraphicsBufferManager;
		//UnitManager* mpUnitManager;
		SnakeManager mSnakeManager;

		GraphicsSystem* mpGraphics;
		InputSystem* mpInput;

		EventSystem* mpEventSystem;

		HUD* mpHUD;
		LevelManager* mLevelManager;
		FoodManager mFoodManager;

		// create Animations
		Animation mSnakeSprite;
		Animation mWallSprite;
		Animation mFoodAnim;
		Animation mPwrUpAnim;
		Animation mPwrDwnAnim;

		// files
		std::string mPictures;
		// sprites and buffers
		std::string mKey, mBackground, mWorm, mWall, mFood;
		// display size
		int mHeight, mWidth;
		int mScore = 0;
		int mCurrentLevel = 1;
		Vector2D mInitLocation = Vector2D(256, 352);
		int mSpawnDown = 0;
		int mSpawnUp = 0;
};