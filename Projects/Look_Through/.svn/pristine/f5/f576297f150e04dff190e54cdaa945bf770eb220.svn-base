#include "InputSystem.h"

/// <summary>
/// Constructor for InputSystem.
/// </summary>
InputSystem::InputSystem()
{
    mpQueue = nullptr;
    memset( mKeys, 0, sizeof mKeys );
}

/// <summary>
/// Placeholder destructor.
/// </summary>
InputSystem::~InputSystem()
{
    mpQueue = nullptr;
}

/// <summary>
/// Cleans up the event queue from memory.
/// </summary>
void InputSystem::cleanup()
{
    al_destroy_event_queue( mpQueue );
    mpQueue = nullptr;
}

/// <summary>
/// Gives the state of the key given in KeyState format.
/// </summary>
/// <param name="key">: Key on keyboard.</param>
/// <returns>KeyState of the given key.</returns>
KeyState::KeyClick InputSystem::getKeyState( Key key )
{
    if ( mKeys[ static_cast< int >(key) ] )
    {
        mKeys[ static_cast< int >(key) ] = static_cast< unsigned char >(KeyState::RELEASED);
        return KeyState::PRESSED;
    }
    return KeyState::RELEASED;
}

/// <summary>
/// Gets current mouse state.
/// </summary>
/// <returns>MouseState of the current mouse state.</returns>
MouseState InputSystem::getMouseState()
{
    if ( mMouseState.mClickType == MouseState::BOTH )
    {
        mMouseState.mClickType = MouseState::LEFT_CLICK;
    }
    MouseState newState( mMouseState );
    mMouseState.mClickType = MouseState::NONE;
    return newState;
}

/// <summary>
/// Initializes keyboard, mouse, and events.
/// </summary>
void InputSystem::init()
{
    assert( al_install_keyboard() );
    assert( al_install_mouse() );

    mpQueue = al_create_event_queue();
    assert( mpQueue );

    al_register_event_source( mpQueue, al_get_keyboard_event_source() );
    al_register_event_source( mpQueue, al_get_mouse_event_source() );
}

/// <summary>
/// Grab all recent events that have occurred.
/// </summary>
void InputSystem::pollInputs()
{
    while ( al_get_next_event( mpQueue, &mEvent ) )
    {
        switch ( mEvent.type )
        {
        case ALLEGRO_EVENT_KEY_DOWN:
            {
                mKeys[ mEvent.keyboard.keycode ] = static_cast< unsigned char >(KeyState::PRESSED);
                EventAven event;
                event.mType = EventType::Input;
                event.mInput.mKeyState.mKey = static_cast< Key >(mEvent.keyboard.keycode);
                event.mInput.mKeyState.mClickType = KeyState::PRESSED;
                EventSystemAven::getInstance().invokeEvent( event );
                break;
            }
        case ALLEGRO_EVENT_KEY_UP:
            {
                mKeys[ mEvent.keyboard.keycode ] = static_cast< unsigned char >(KeyState::RELEASED);
                EventAven event;
                event.mType = EventType::Input;
                event.mInput.mKeyState.mKey = static_cast< Key >(mEvent.keyboard.keycode);
                event.mInput.mKeyState.mClickType = KeyState::RELEASED;
                EventSystemAven::getInstance().invokeEvent( event );
                break;
            }
        case ALLEGRO_EVENT_MOUSE_AXES:
            {
                mMouseState.mMousePosition.setX( static_cast< float >(mEvent.mouse.x) );
                mMouseState.mMousePosition.setY( static_cast< float >(mEvent.mouse.y) );

                EventAven event;
                event.mType = EventType::Input;
                event.mInput.mMouseState = mMouseState;
                EventSystemAven::getInstance().invokeEvent( event );
            }
            break;
        case ALLEGRO_EVENT_MOUSE_BUTTON_DOWN:
            {
                mMouseState.mClickType = static_cast< MouseState::MouseClick >(mEvent.mouse.button);
                EventAven event;
                event.mType = EventType::Input;
                event.mInput.mMouseState = mMouseState;
                EventSystemAven::getInstance().invokeEvent( event );
            }
            break;
        case ALLEGRO_EVENT_MOUSE_BUTTON_UP:
            {
                mMouseState.mClickType = MouseState::NONE;
                EventAven event;
                event.mType = EventType::Input;
                event.mInput.mMouseState = mMouseState;
                EventSystemAven::getInstance().invokeEvent( event );
            }
            break;
        default:
            break;
        }
    }
}
