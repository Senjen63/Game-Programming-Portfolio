#include "GraphicsBuffer.h"

/// <summary>
/// Creates a GraphicsBuffer instance using a width and height.
/// </summary>
/// <param name="width">: Width of display.</param>
/// <param name="height">: Height of display.</param>
GraphicsBuffer::GraphicsBuffer( int width, int height )
{
	mpBitmap = al_create_bitmap( width, height );
	assert( mpBitmap );
}

/// <summary>
/// Creates a GraphicsBuffer instance using a bitmap file.
/// </summary>
/// <param name="filename">: Path to a bitmap file.</param>
GraphicsBuffer::GraphicsBuffer( const char * filename )
{
	mpBitmap = al_load_bitmap( filename );
	assert( mpBitmap );
}

/// <summary>
/// Simple destructor, does not destroy bitmap.
/// </summary>
GraphicsBuffer::~GraphicsBuffer()
{
	mpBitmap = nullptr;
}

/// <summary>
/// Clears stored bitmap from memory.
/// </summary>
void GraphicsBuffer::cleanup()
{
	if( mpBitmap )
	{
		al_destroy_bitmap( mpBitmap );
		mpBitmap = nullptr;
	}
}

/// <returns>
/// int of buffer height promising no changes.
/// </returns>
int GraphicsBuffer::getHeight() const
{
	return al_get_bitmap_height( mpBitmap );
}

/// <returns>
/// int of buffer width promising no changes.
/// </returns>
int GraphicsBuffer::getWidth() const
{
	return al_get_bitmap_width( mpBitmap );
}

/// <summary>
/// Implicit private operator for getting the current ALLEGRO_BITMAP pointer.
/// </summary>
GraphicsBuffer::operator ALLEGRO_BITMAP * ( ) const
{
	return mpBitmap;
}
