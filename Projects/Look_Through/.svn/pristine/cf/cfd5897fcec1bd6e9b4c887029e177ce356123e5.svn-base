/*
 *  Author: Joseph Romanowski 
 *  Class: GPR-250-01
 *  Assignment: Assignment 1 
 *  Certification of Authenticity: 
 *      I certify that this assignment is entirely my own work. 
 */

#include <iostream>
#include <random>
#include <time.h>
#include <PerformanceTracker.h>
#include <Timer.h>
#include <MemoryTracker.h>
#include "GraphicsSystem.h"

using namespace std;

int main()
{
    PerformanceTracker* pPerformanceTracker = new PerformanceTracker;
    Timer timer;

    const string ASSET_PATH = "..\\..\\common\\assets\\";
    const string STEPS_FILENAME = "steps.png";
    const string SMURF_SPRITES_FILENAME = "smurf_sprites.png";
    const string QUIMBY_FILENAME = "Mayor_Quimby.png";
    const string COUR_FILENAME = "cour.ttf";
    const int FONT_SIZE = 48;

    const int NUM_SMURFS = 16;
    const int SMURF_SIZE = 60;

    const int WIDTH = 800;
    const int HEIGHT = 600;

    const float HALF = 0.5f;
    const float ONE_SIXTH = 0.1667f;
    const float TWO_THIRDS = 0.6667f;

    // Create a 800x600 window and init all the allegro stuff 
    GraphicsSystem* sys = new GraphicsSystem(WIDTH, HEIGHT);
    sys->init();

    // Load stuff in 
    GraphicsBuffer* pStepsBuffer = new GraphicsBuffer(ASSET_PATH + STEPS_FILENAME);
    GraphicsBuffer* pSmurfBuffer = new GraphicsBuffer(ASSET_PATH + SMURF_SPRITES_FILENAME);
    GraphicsBuffer* pQuimbyBuffer = new GraphicsBuffer(ASSET_PATH + QUIMBY_FILENAME);
    GraphicsBuffer* pRedBuffer = new GraphicsBuffer(WIDTH, HEIGHT);

    Font* pCour = new Font(ASSET_PATH + COUR_FILENAME, FONT_SIZE);

    // Draw red onto the redBuffer then draw quimby 
    Sprite* pQuimbySprite = new Sprite(pQuimbyBuffer);

    sys->clearToColor(*pRedBuffer, COLOR_RED);
    sys->draw(*pRedBuffer, Vector2D(), *pQuimbySprite);
    sys->drawText(*pRedBuffer, Vector2D(0, 500), *pCour, COLOR_BLACK, TextAlignment::left, "Curse you Papa Smurf!");
    sys->saveBuffer(*pRedBuffer, "redBuffer.png");

    // Draw onto the back buffer 
    sys->draw(Vector2D(), Sprite(pStepsBuffer), HALF);
    // Get center of the screen relative to the buffer 
    Vector2D* pos = new Vector2D(WIDTH * ONE_SIXTH, HEIGHT * ONE_SIXTH);
    sys->draw(*pos, Sprite(pRedBuffer), TWO_THIRDS);
    delete pos;

    // Get all the smurfs 
    Sprite* pSmurfs = Sprite::slice(pSmurfBuffer, SMURF_SIZE, SMURF_SIZE, NUM_SMURFS);

    // Generate Smurf positions and Draw 
    std::srand(time(NULL)); // Set random seed 

    for (int i = 0; i < NUM_SMURFS; i++)
    {
        int x = rand() % (WIDTH - SMURF_SIZE);
        int y = rand() % (HEIGHT - SMURF_SIZE);

        sys->draw(Vector2D(x, y), *(pSmurfs + i), 1);
    }

    // Save the buffers 
    sys->saveBuffer(*pRedBuffer, "redbuffer.png");
    sys->saveBuffer(*(sys->getBackBuffer()), "backbuffer.png");

    // Show the back buffer 
    sys->flip();

    timer.sleep(5000.0);

    // Deleting Time >:) 
    delete pStepsBuffer;
    delete pSmurfBuffer;
    delete pQuimbyBuffer;
    delete pRedBuffer;
    delete pQuimbySprite;
    delete pCour;
    delete[] pSmurfs;

    delete sys;

    delete pPerformanceTracker;
    MemoryTracker::getInstance()->reportAllocations(std::cout);
    system("pause");
}
