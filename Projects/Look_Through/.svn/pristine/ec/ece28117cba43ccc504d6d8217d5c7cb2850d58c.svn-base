#include "Snake.h"

#include "GraphicsSystem.h"

Snake::Snake()
{
    mpHead = nullptr;
    mDirection = Up;
    mChildren = 0;
}

Snake::Snake( const int parts, const Color & color )
{
    mpHead = new SnakePart( parts, color );
    mDirection = Up;

    mChildren = parts;
}

Snake::~Snake()
{
    delete mpHead;
    mpHead = nullptr;
}

void Snake::addChild()
{
    mpHead->addChild();
    mChildren++;
}

void Snake::draw( const int squareSize) const
{
    auto tmp = mpHead;
    while(tmp != nullptr)
    {
        GraphicsSystem::draw(tmp->getPosition() * static_cast< float >(squareSize), tmp->getPosition() * static_cast< float >(squareSize) + Vector2D(squareSize, squareSize), tmp->getColor());
        tmp = tmp->getChild();
    }
}

Direction Snake::getDirection() const
{
    return mDirection;
}

Vector2D Snake::getPosition() const
{
    return mpHead->getPosition();
}

void Snake::move( const int width, const int height) const
{
    Vector2D newPos( 0, 0 );
    switch ( mDirection )
    {
    case Up: newPos.setY( -1 );
        break;
    case Right: newPos.setX( 1 );
        break;
    case Down: newPos.setY( 1 );
        break;
    case Left: newPos.setX( -1 );
        break;
    }

    if((mpHead->getPosition() + newPos).getX() >= static_cast< float >(width))
    {
        mpHead->setPosition( mpHead->getPosition() + Vector2D(-width + 1, 0) );
        return;
    }

    if((mpHead->getPosition() + newPos).getY() >= static_cast< float >(height))
    {
        mpHead->setPosition( mpHead->getPosition() + Vector2D(0, -height + 1) );
        return;
    }

    if((mpHead->getPosition() + newPos).getX() < 0)
    {
        mpHead->setPosition( mpHead->getPosition() + Vector2D(width - 1, 0) );
        return;
    }

    if((mpHead->getPosition() + newPos).getY() < 0)
    {
        mpHead->setPosition( mpHead->getPosition() + Vector2D(0, height - 1) );
        return;
    }
    
    mpHead->setPosition( mpHead->getPosition() + newPos );
}

void Snake::setDirection( const Direction dir )
{
    switch(dir)
    {
    case Up:
        if(mDirection == Down) return;
        break;
    case Right:
        if(mDirection == Left) return;
        break;
    case Down:
        if(mDirection == Up) return;
        break;
    case Left:
        if(mDirection == Right) return;
        break;
    }
    mDirection = dir;
}

SnakePart * Snake::getChild() const
{
    return mpHead->getChild();
}
