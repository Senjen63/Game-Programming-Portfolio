#pragma once

#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

#include <iostream>
#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include "Sprite.h"
#include "Font.h"
#include "Color.h"

using namespace std;

class GraphicsSystem : public Trackable
{
private:
	ALLEGRO_DISPLAY* mpDisplay;
public:
	GraphicsSystem();
	GraphicsSystem(int width, int height);
	~GraphicsSystem();

	bool Init(int width, int height);
	void Cleanup();

	int getHeight();
	int getWidth();
	ALLEGRO_DISPLAY* getBackBuffer();
	ALLEGRO_BITMAP* getBitMap();

	void Flip();

	void Draw(GraphicsBuffer* pBuffer);
	void Draw(int x, int y, Sprite* pSprite, float scale = 1.0);
	void Draw(int x, int y, Sprite* pSprite, int displayWidth, int displayHeight);
	void Draw(GraphicsBuffer* pTarget, GraphicsBuffer* pBuffer, int x, int y, float scale);
	void Draw(GraphicsBuffer* pBuffer, int x, int y, float scale = 1.0);
	void Draw(GraphicsBuffer* pTarget, int x, int y, Sprite* pSprite, float scale = 1.0);

	void WriteText(float x, float y, Font* pFont, Color color, string text);
	void WriteText(GraphicsBuffer* pTarget, float x, float y, Font* pFont, Color color, string text);

	void SaveBuffer(ALLEGRO_BITMAP* pSave, string fileName);

};