/*
Author: David Silverman
Class: GPR-250-01
Assignment: Assignment 3
Certification of Authenticity:
I certify that this assignment is entirely my own work.
 */


#pragma once
#include "inputsystem.h"
#include "game.h"
#include "move.h"
#include "escape.h"
//#include 

using namespace std;

/* Pre:  Nothing
*  Post:  An Input System
*  Purpose:  Create an input system
*********************************************************/
InputSystem::InputSystem()
{
	
}

/* Pre:  The input system
*  Post:  Nothing
*  Purpose:  Destroy the input system
*********************************************************/
InputSystem::~InputSystem()
{

}

/* Pre:  Nothing
*  Post:  Nothing
*  Purpose:  Initialize the input system
*********************************************************/
void InputSystem::Init()
{
	al_install_keyboard();
	al_install_mouse();
	mpQueue = al_create_event_queue();
	al_register_event_source(mpQueue, al_get_keyboard_event_source());
	al_register_event_source(mpQueue, al_get_mouse_event_source());
	

}

/* Pre:  The system
*  Post:  Nothing
*  Purpose:  Cleanup the system for deletion
*********************************************************/
void InputSystem::Cleanup()
{
	al_uninstall_mouse();
	al_uninstall_keyboard();
	al_destroy_event_queue(mpQueue);
}

/* Pre:  Nothing
*  Post:  A keycode
*  Purpose:  Get a key pressed
*********************************************************/
void InputSystem::getKeyState()
{
	ALLEGRO_KEYBOARD_STATE mState;
	al_get_keyboard_state(&mState);
	EventSystem* pEventSystem = EventSystem::getInstance();
	
	while (!al_is_event_queue_empty(mpQueue))
	{
		ALLEGRO_EVENT evnt;
		al_get_next_event(mpQueue, &evnt);
		if (evnt.type == ALLEGRO_EVENT_KEY_DOWN)
		{
			pEventSystem->fireEvent(Move(evnt.keyboard.keycode));
		}
		
	}
}

/* Pre:  Nothing
*  Post:  A mouse button
*  Purpose:  Get mouse clicked
*********************************************************/
bool InputSystem::getLeftMouseState()
{
	ALLEGRO_MOUSE_STATE mMouseState;
	al_get_mouse_state(&mMouseState);
	if (mMouseState.buttons & 1)
	{
		return true;
	}
	else
	{
		return false;
	}
}

/* Pre:  Nothing
*  Post:  A mouse button
*  Purpose:  Get mouse clicked
*********************************************************/
bool InputSystem::getRightMouseState()
{
	ALLEGRO_MOUSE_STATE mMouseState;
	al_get_mouse_state(&mMouseState);
	if (mMouseState.buttons & 2)
	{
		return true;
	}
	else
	{
		return false;
	}
}

/* Pre:  Nothing
*  Post:  A position
*  Purpose:  Get the unit position
*********************************************************/
Vector2D InputSystem::getPosition()
{
	ALLEGRO_MOUSE_STATE mMouseState;
	al_get_mouse_state(&mMouseState);
	mPos = Vector2D(mMouseState.x, mMouseState.y);
	return mPos;
}

ALLEGRO_EVENT_QUEUE* InputSystem::getQueue()
{
	return mpQueue;
}

bool InputSystem::getUp()
{
	return mUp;
}

bool InputSystem::getDown()
{
	return mDown;
}

bool InputSystem::getLeft()
{
	return mLeft;
}

bool InputSystem::getRight()
{
	return mRight;
}

bool InputSystem::getEscape()
{
	return mEscape;
}