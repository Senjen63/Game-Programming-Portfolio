#pragma once

#include <SFML/Window.hpp>
#include <Trackable.h>
#include <assert.h>

#include "GraphicsBuffer.h"
#include "Sprite.h"
#include "Vector2D.h"
#include "Font.h"
#include "Color.h"

class GraphicsSystem : public Trackable
{
	friend class InputSystem;

private:
	sf::RenderWindow* mpDisplay;
	GraphicsBuffer* mpBackBuffer;

	void draw(sf::RenderTexture* bitmap, Vector2D pos, Sprite sprite, Vector2D scale);
	void writeText(sf::RenderTexture* bitmap, Vector2D pos, Font* font, Color color, std::string text);

public:
	GraphicsSystem();
	~GraphicsSystem();

	int init(int windowWidth, int windowHeight); // Returns 0 if successful
	void cleanup();

	GraphicsBuffer* getBackBuffer() { return mpBackBuffer; }
	Vector2D getWindowSize() { return Vector2D((int) mpDisplay->getSize().x, (int) mpDisplay->getSize().y); }
	Vector2D getWindowPos() { return Vector2D((int)mpDisplay->getPosition().x, (int)mpDisplay->getPosition().y); }

	void flip(); // Show drawn GraphicsBuffers on screen

	void draw(Vector2D pos, Sprite sprite, Vector2D scale = Vector2D(1, 1)); // Draws to backbuffer
	void draw(GraphicsBuffer* graphicsBuffer, Vector2D pos, Sprite sprite, Vector2D scale = Vector2D(1, 1));

	void writeText(Vector2D pos, Font* font, Color color, std::string text); // Draws to backbuffer
	void writeText(GraphicsBuffer* graphicsBuffer, Vector2D pos, Font* font, Color color, std::string text);

	static void saveBuffer(GraphicsBuffer* graphicsBuffer, std::string fileName);
};