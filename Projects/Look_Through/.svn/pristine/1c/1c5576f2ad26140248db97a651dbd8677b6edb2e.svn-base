#include "Unit.h"


Unit::Unit(const UnitParameters params)
{
	mPosition = params.startPos;
	mAnimations = params.animations;
	mColLayer = params.colLayer;

	mpCurrentAnimation = nullptr;

	if (params.startAnimName != "")
	{
		setCurrentAnimation(params.startAnimName);
	}
}


Unit::~Unit()
{
	for (auto i = mComponents.begin(); i != mComponents.end(); i++)
	{
		delete i->second;
	}
}


void Unit::addAnimation(std::string animName, Animation& newAnim)
{
	mAnimations[animName] = newAnim;
}


Animation& Unit::getAnimation(std::string animName)
{
	assert(mAnimations.find(animName) != mAnimations.end());
	return mAnimations[animName];
}


void Unit::setCurrentAnimation(std::string animName)
{
	assert(mAnimations.find(animName) != mAnimations.end());
	mpCurrentAnimation = &mAnimations[animName];
	mCurrentAnimationName = animName;
}


void Unit::addComponent(std::string compName, Component& comp)
{
	assert(mComponents.find(compName) == mComponents.end());

	mComponents[compName] = &comp;
	mComponents[compName]->setAttachedUnit(this);
}


void Unit::removeComponent(std::string compName)
{
	assert(mComponents.find(compName) != mComponents.end());

	mComponents[compName]->removeFromUnit();
	mComponents.erase(compName);
}


Component& Unit::getComponent(std::string compName)
{
	assert(mComponents.find(compName) != mComponents.end());

	return *mComponents[compName];
}


void Unit::doUpdate(float dt)
{
	mpCurrentAnimation->update(dt);
	update(dt);

	for (auto i = mComponents.begin(); i != mComponents.end(); i++)
	{
		i->second->update(dt);
	}
}


void Unit::doDraw(GraphicsSystem* gSys)
{
	if (mpCurrentAnimation != nullptr)
	{
		gSys->draw(mPosition, mpCurrentAnimation->getCurrentFrame());
	}

	draw(gSys);

	for (auto i = mComponents.begin(); i != mComponents.end(); i++)
	{
		i->second->draw(gSys);
	}
}
