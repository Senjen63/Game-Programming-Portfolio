#include "InputSystem.h"

#include "Game.h"
#include "GameEvents.h"

InputSystem::~InputSystem()
{
    cleanUp();
}

void InputSystem::update()
{
    while (SDL_PollEvent(&theEvent))
    {
        switch (theEvent.type)
        {
        /* ---===========================--- */
        /* ---===== KEYBORAD EVENTS =====--- */
        /* ---===========================--- */
        case SDL_KEYDOWN:
        {
            if (theEvent.key.repeat == 0)
            {
                EventSystem::getInstance()->fireEvent(KeyboardEvent(KeyEventType::KEY_DOWN, (KeyCode)theEvent.key.keysym.sym));
            }
            break;
        }
        case SDL_KEYUP:
        {
            EventSystem::getInstance()->fireEvent(KeyboardEvent(KeyEventType::KEY_UP, (KeyCode)theEvent.key.keysym.sym));
            break;
        }
        /* ---========================--- */
        /* ---===== MOUSE EVENTS =====--- */
        /* ---========================--- */
        case SDL_MOUSEBUTTONDOWN:
        {
            EventSystem::getInstance()->fireEvent(
                MouseEvent(MouseEventType::MOUSE_BUTTON_DOWN, Vector2D(theEvent.button.x, theEvent.button.y), (MouseButton)theEvent.button.button));
            break;
        }
        case SDL_MOUSEBUTTONUP:
        {
            EventSystem::getInstance()->fireEvent(
                MouseEvent(MouseEventType::MOUSE_BUTTON_UP, Vector2D(theEvent.button.x, theEvent.button.y), (MouseButton)theEvent.button.button));
            break;
        }
        case SDL_MOUSEMOTION:
        {
            EventSystem::getInstance()->fireEvent(
                MouseEvent(MouseEventType::MOUSE_MOVE, Vector2D(theEvent.motion.x, theEvent.motion.y), Vector2D(theEvent.motion.xrel, theEvent.motion.yrel)));
            break;
        }
        /* ---========================--- */
        /* ---===== OTHER EVENTS =====--- */
        /* ---========================--- */
        case SDL_QUIT:
        {
            // Quit via the red X on the window 
            EventSystem::getInstance()->fireEvent(GameEvent(GameEventType::GAME_CLOSE));
            break;
        }
        }
    }
}
