#pragma once
/*
note by and for tommy so i remember how this works

components function like scripts in Unity attached to the object (Entity) 
Each frame, all scripts/components run their Update functions, so that is what happens here
So Collision is like the hitbox, and checks to see if there are any colliders
*/



#include <EventListener.h>
#include "Entity.h"

/*
enum ComponentType 
{
	COLLISION = 0, ENTITY
	
};
*/

class Component : public EventListener
{
	friend class Entity;

public:
	Component() {};
	Component(std::string type) : mType(type) {}
	virtual ~Component() {};

	virtual	void init() = 0;
	virtual void cleanUp() = 0;
	virtual void Update(double deltaTime) = 0;
	virtual void handleEvent(const Event& theEvent) = 0;

	std::string getType() const { return mType; }
	bool const getInitted() { return isInitted; }
	bool const getEnabled() { return isEnabled; }
	void toggleEnabled() { isEnabled = !isEnabled; }

	Entity* getParentEntity() const { return mpParentEntity; }

private:
	std::string mType;
	bool isInitted = false;
	bool isEnabled = true;

protected:
	Entity* mpParentEntity = nullptr;
};

