#include "LevelManager.h"

#include <EventSystem.h>

LevelManager::~LevelManager()
{
    unloadActiveLevel();
}

void LevelManager::reserveLevels(unsigned int capacity)
{
    mLevels.reserve(capacity);
}

void LevelManager::addLevel(const std::string& filePath)
{
    //unsigned int currCap = mLevels.capacity();

    mLevels.emplace_back(filePath);

    //// If the levels vector changes capacity 
    //// then all the mFoodManager.pParentLevels will be wrong 
    //if (currCap != mLevels.capacity())
    //{
    //    for (Level& l : mLevels)
    //        l.updateFoodManagerRef();
    //}
}

void LevelManager::loadLevel(int index)
{
    unloadActiveLevel();

    mLevels[index].load();
    mActiveLevel = mLevels.begin() + index;

    mLevelIsLoaded = true;
}

void LevelManager::loadNextLevel()
{
    assert(mLevelIsLoaded);

    mActiveLevel->cleanUp();
    mActiveLevel++;
    if (mActiveLevel == mLevels.end())
    {
        EventSystem::getInstance()->fireEvent(GameWonEvent());
        mLevelIsLoaded = false;
        return;
    }

    mActiveLevel->load();
}

void LevelManager::unloadActiveLevel()
{
    if (mLevelIsLoaded)
    {
        mActiveLevel->cleanUp();
        mActiveLevel = mLevels.end();
    }

    mLevelIsLoaded = false;
}

void LevelManager::update(double deltaTime)
{
    if (!mLevelIsLoaded)
        return;

    mActiveLevel->update(deltaTime);

    if (mActiveLevel->getIsDone())
    {
        loadNextLevel();
    }
}
