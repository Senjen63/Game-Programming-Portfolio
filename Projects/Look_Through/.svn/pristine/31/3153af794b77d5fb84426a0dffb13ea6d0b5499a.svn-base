#pragma once

#include <Trackable.h>
#include <vector>
#include "Animation.h"
#include "Unit.h"
#include "GraphicsSystem.h"
#include <Vector2D.h>
#include <time.h>
#include <unordered_map>
#include <fstream>

#include "Event.h"
#include "EventListener.h"
#include "EventSystem.h"
#include "FoodEvent.h"
#include "LevelManager.h"
#include "Level.h"

typedef std::string FoodKey;

enum class FoodCode
{
	FOOD = 1,
	PWRUP = 2,
	PWRDWN = 3
};

class FoodManager : public Trackable
{
public:
	FoodManager();
	~FoodManager();

	void init();
	void cleanup();

	void createAndAddUnit(const FoodKey& key, Animation anim);
	void destroyUnit(const FoodKey& key);

	void update(double dt);
	void draw(GraphicsSystem* graphSys);
	void randomLoc(const FoodKey& key, int currentLevel, LevelManager* levelMan);

	void collisionWithFood(Unit* snakeHead);

	Unit* getUnit(const FoodKey& key);

private:
	std::unordered_map<FoodKey, Unit*> mMap;

	EventSystem* mpEventSystem;
};