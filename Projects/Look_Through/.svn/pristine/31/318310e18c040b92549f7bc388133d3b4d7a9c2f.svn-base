#pragma once

#include <string>
#include <unordered_map>
#include <fstream>
#include <random>

#include "Vector2D.h"
#include "Trackable.h"
#include "UnitParameters.h"
#include "Game.h"
#include "ScoreChangeEvent.h"
#include "EventListener.h"
#include "Conversion.h"

class Game;

class LevelManager : public EventListener
{
	const float ANIM_SPEED = 1.0f;

	// Imported level data
	float mStartMillisecondMoveDelay = -1;
	int mStartNumSegments = -1;

	int mGoalLength = -1;
	int mNumPointsForFood = -1;
	int mNumPointsForScoreUpPowerUp = -1;

	float mPowerUpSpawnFrequency = -1; // In seconds
	float mSpeedUpPowerUpChance = -1;
	float mSpeedDownPowerUpChance = -1;
	float mScoreModPowerUpChance = -1;

	float mSpeedUpPowerUpMagnitude = -1;
	float mSpeedDownPowerUpMagnitude = -1;

	
	// Object creation data
	UnitParameters mSnakeHeadParams;
	UnitParameters mWallParams;
	UnitParameters mFruitParams;
	UnitParameters mSpeedUpPowerUpParams;
	UnitParameters mSpeedDownPowerUpParams;
	UnitParameters mScoreUpPowerUpParams;


	int mScore = 0;
	float mTimeSinceLastPowerUpSpawn = 0;
	float mTimeInLevel = 0;
	int mFruitCollected = 0;

	bool mGameStarted = false;

public:
	const static int CELL_SIZE;

	LevelManager() {}
	~LevelManager() { EventSystem::getInstance()->removeListenerFromAllEvents(this); }

	void init();

	void loadLevelFromFile(std::string levelDataFullPath);
	void startGame();

	void update(float dt);

	void placeWalls(std::ifstream &wallLayout);
	void spawnSnake();
	void spawnFruit();
	void spawnSpeedUpPowerUp();
	void spawnSpeedDownPowerUp();
	void spawnScoreUpPowerUp();

	void moveUnitToAvailableSpace(Unit* unit);

	void handleEvent(const Event& theEvent) override;

	int getScore() { return mScore; }
	float getTimeInLevel() { return mTimeInLevel; }
};

