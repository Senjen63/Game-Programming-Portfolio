#pragma once

#include "Sprite.h"
#include "Buffer.h"

#include <iostream>
#include <cassert>
#include <string>
#include <vector>

//Animation Class:

class Animation
{
public:
	//Constructor/Destructor
	Animation();
	Animation(float speed, GraphicsBuffer* gBuff, bool loop);
	~Animation();

	//Accessor/Mutator
	Sprite getCurrentSprite() {	return spriteSheet[	currentSprite	];	} //returns current sprite
	void addSprite(Sprite newSprite) { spriteSheet.push_back(newSprite); }; //add sprite to the animation

	//Member functions
	void update();
	void increaseSpeed(); //speed up animation
	void decreaseSpeed(); //slow down animation

private:
	float frameRate = 60.0f; //time between frames
	float timeLeft = 60.0f; //time left
	int numSprites;
	int currentSprite;
	bool isLooping; //is looping?
	std::vector<Sprite> spriteSheet; //vector to hold al sprites in animation
};
