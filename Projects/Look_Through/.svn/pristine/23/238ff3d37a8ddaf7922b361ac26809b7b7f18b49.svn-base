#pragma once

#include <PerformanceTracker.h>
#include <Timer.h>
#include <Trackable.h>
#include "GraphicsBufferManager.h"
#include "GraphicsSystem.h"
#include "GraphicsBuffer.h"
#include "InputSystem.h"
#include "Animation.h"
#include "UnitManager.h"
#include "Unit.h"
using namespace std;

const int DISP_WIDTH = 800;
const int DISP_HEIGHT = 600;

const string ASSET_PATH = "..\\..\\common\\assets\\";
const string BACKGROUND_FILENAME = "woods.png";
const string DEAN_FILENAME = "dean_sprites.png";
const string SMURFS_FILENAME = "smurf_sprites.png";
const string WOOD = "Wood";
const string DEAN = "Dean";
const string SMURF = "Smurf";

const int ORIGIN_X = 0;
const int ORIGIN_Y = 0;
const int NEXT_UNIT = 1;

//static
//static function implementation: is it like a singleton but not?
//manager and singleton base code in deanlib
//canvas 
static class Game : public Trackable
{
private:

	static Game* mpGameInst;
	Game(int width,int height);

	bool mHoldDown = false;

	GraphicsSystem* mpGraphics;
	InputSystem* mpInput;

	//possibly make pointers
	// put in buffer manager
	GraphicsBufferManager mpgBufferManager;
	// put in unit manager
	UnitManager mpUnitManager;

	// put in unit manager
	Animation mSmurfAnimation;
	Animation mDeanAnimation;

	Game();
	~Game();

	public:

		static void createInstance();
		static Game* getInstance();
		static void destroyInstance();

		//need static functions
		 void init();
		 void cleanup();
		 void doLoop();

};

//extern Game* gpGame;