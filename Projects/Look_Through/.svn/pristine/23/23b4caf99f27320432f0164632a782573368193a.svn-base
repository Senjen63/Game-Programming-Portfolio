#include "Level.h"
#include "Game.h"
#include "SnakePlayer.h"
#include "Sprite.h"
#include "Animation.h"
#include "Color.h"
#include "GraphicsBuffer.h"
#include "GraphicsBufferManager.h"
#include "GraphicsSystem.h"
#include "Unit.h"
#include "UnitManager.h"
#include <stdlib.h>
#include <time.h>
#include <fstream>

Level::Level(std::string filename)
{
	Game* pGame = Game::getGameInstance();

	int x = 0;
	int y = 0;

	ifstream input(filename);

	if (input.good())
	{
		string key;

		while (!input.eof())
		{
			input >> key;

			if (key == "player_speed:")
			{
				input >> this->mPlayerSpeed;
			}
			else if (key == "starting_segments:")
			{
				input >> this->mStartingSegments;
			}
			else if (key == "segments_to_win:")
			{
				input >> this->mSegmentsToWin;
			}
			else if (key == "food_point_value:")
			{
				input >> this->mFoodPointValue;
			}
			else if (key == "bonus_point_value:")
			{
				input >> this->mBonusPointValue;
			}
			else if (key == "bonus_powerup_frequency:")
			{
				input >> this->mBonusPointsPowerUpFrequency;
			}
			else if (key == "speedup_powerup_frequency:")
			{
				input >> this->mSpeedUpPowerUpFrequency;
			}
			else if (key == "slowdown_powerup_frequency:")
			{
				input >> this->mSlowDownPowerUpFrequency;
			}
			else if (key == "player_growth:")
			{
				input >> this->mPlayerGrowth;
			}
			else if (key == "powerup_tick_time:")
			{
				input >> this->mPowerUpTick;
			}
			else if (key == "player_spawn_point:")
			{
				input >> x >> y;
				this->mPlayerSpawnPoint = Vector2D(x, y);
			}
			else if (key == "wall_locations:")
			{
				const int TOTAL_GRID_TILES = pGame->LEVEL_GRID_WIDTH * pGame->LEVEL_GRID_HEIGHT;

				int wall = 0;

				for (int i = 0; i < TOTAL_GRID_TILES; i++)
				{
					input >> wall;
					mWallLocations.push_back(wall);
				}
			}
		}
	}

	input.close();

	initWalls();
}

void Level::initWalls()
{
	Game* pGame = Game::getGameInstance();

	int x = 0;
	int y = 0;

	int index = 0;

	for (int h = 1; h <= pGame->LEVEL_GRID_HEIGHT; h++)
	{
		for (int w = 1; w <= pGame->LEVEL_GRID_WIDTH; w++)
		{
			if (mWallLocations[index] == 1)
			{
				mWallCoordinates.push_back(Vector2D(x, y));
			}
			else
			{
				mEmptyCoordinates.push_back(Vector2D(x, y));
			}

			x += pGame->TILE_SIZE;
			index++;
		}

		x = 0;
		y += pGame->TILE_SIZE;
	}
}