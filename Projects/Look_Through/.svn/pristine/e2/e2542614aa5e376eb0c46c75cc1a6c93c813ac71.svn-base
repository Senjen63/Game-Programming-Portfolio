#include "GraphicsBuffer.h"

GraphicsBuffer::GraphicsBuffer( string filePath, Vector2D sections)
{
    mOwnsBuffer = false;
    if (al_filename_exists(filePath.c_str()))
    {
        mpBuffer = al_load_bitmap(filePath.c_str());
    }
    else
    {
        cout << endl << "File Does Not Exist: " << filePath << endl << endl;
        mpBuffer = nullptr;
    }
    mSections = sections;
}
GraphicsBuffer::GraphicsBuffer( ALLEGRO_BITMAP* pTarget)
{
    mOwnsBuffer = false;
    mpBuffer = pTarget;
}
GraphicsBuffer::GraphicsBuffer(GraphicsBuffer* pTarget)
{
    mOwnsBuffer = false;
    mpBuffer = pTarget->mpBuffer;
    mSections = pTarget->getSections();
}
GraphicsBuffer::GraphicsBuffer( Color color, int width, int height )
{
    mOwnsBuffer = false;
    mpBuffer = al_create_bitmap( width, height );

    //clears new buffer to color
    ALLEGRO_BITMAP* oldBitmap = al_get_target_bitmap();

    al_set_target_bitmap( mpBuffer );

    al_clear_to_color( al_map_rgba( color.getR(), color.getG(), color.getB(), color.getA() ) );

    al_set_target_bitmap( oldBitmap );
}
GraphicsBuffer::~GraphicsBuffer()
{
    if ( mOwnsBuffer )
    {
        al_destroy_bitmap( mpBuffer );
    }
}
int GraphicsBuffer::getWidth()
{
    return al_get_bitmap_width( mpBuffer );
}
int GraphicsBuffer::getHeight()
{
    return al_get_bitmap_height( mpBuffer );
}
Vector2D GraphicsBuffer::getSections()
{
    return mSections;
}
void GraphicsBuffer::setSections(Vector2D sections)
{
    mSections = sections;
}
bool GraphicsBuffer::isBitmapNull()
{
    return (mpBuffer == nullptr);
}
void GraphicsBuffer::clearToColor(Color color)
{
    ALLEGRO_BITMAP* oldBitmap = al_get_target_bitmap();

    al_set_target_bitmap(mpBuffer);

    al_clear_to_color(al_map_rgb(color.getR(), color.getG(), color.getB()));

    al_set_target_bitmap(oldBitmap);
}