#include "Level.h"

Level::Level()
{
    string mCurrentDifficulty = "";
    float mPlayerSpeed = 0;
    float mTimeLimitEasy = 0;
    float mTimeLimitNormal = 0;
    float mTimeLimitHard = 0;
    float mArrowFrequnecyEasy = 0;
    float mArrowFrequnecyNormal = 0;
    float mArrowFrequnecyHard = 0;
    int mCollectibleWorth = 0;
}


//Level::Level(float snakeSpeed, int startSegmentNum, int endSegmentNum, int foodPoints, float powerUpBaseFrequency, float powerUpRandomRange, float bonusChance, float fastChance, float slowChance)
//{
//    mSnakeSpeed = snakeSpeed;
//    mStartSegmentNum = startSegmentNum;
//    mEndSegmentNum = endSegmentNum;
//    mFoodPoints = foodPoints;
//    mPowerUpBaseFrequency = powerUpBaseFrequency;
//    mPowerUpRandomRange = powerUpRandomRange;
//    mBonusChance = bonusChance;
//    mFastChance = fastChance;
//    mSlowChance = slowChance;
//}

Level::Level(float playerSpeed, float timeLimit, float arrowFreq, int collectibleWorth)
{
    string mCurrentDifficulty = "";
    float mPlayerSpeed = playerSpeed;
    float mTimeLimitEasy = timeLimit;
    float mTimeLimitNormal = timeLimit;
    float mTimeLimitHard = timeLimit;
    float mArrowFrequnecyEasy = arrowFreq;
    float mArrowFrequnecyNormal = arrowFreq;
    float mArrowFrequnecyHard = arrowFreq;
    int mCollectibleWorth = collectibleWorth;
}


Level::~Level()
{

}

void Level::addWallPosition(Vector2D pos)
{
    mWallPositions.push_back(pos);
}

void Level::addSpikePosition(Vector2D pos)
{
    mSpikePositions.push_back(pos);
}

void Level::addArrowPosition(Vector2D pos)
{
    mArrowPositions.push_back(pos);
}

void Level::addCollectiblePosition(Vector2D pos)
{
    mCollectiblePositions.push_back(pos);
}


void Level::printLevelInfo()
{
    for (int i = 0; i < mWallPositions.size(); i++)
    {
        cout << "Wall Position " << i << ": (" << mWallPositions[i].getX() << ", " << mWallPositions[i].getY() << ")" << endl;
    }
    cout << endl;
    
    for (int i = 0; i < mSpikePositions.size(); i++)
    {
        cout << "Spike Position " << i << ": (" << mSpikePositions[i].getX() << ", " << mSpikePositions[i].getY() << ")" << endl;
    }
    cout << endl;

    for (int i = 0; i < mArrowPositions.size(); i++)
    {
        cout << "Arrow Position " << i << ": (" << mArrowPositions[i].getX() << ", " << mArrowPositions[i].getY() << ")" << endl;
    }
    cout << endl;

    for (int i = 0; i < mCollectiblePositions.size(); i++)
    {
        cout << "Collectible Position " << i << ": (" << mCollectiblePositions[i].getX() << ", " << mCollectiblePositions[i].getY() << ")" << endl;
    }
    cout << endl;
    
    cout << "Door Position " << ": (" << mDoorPos.getX() << ", " << mDoorPos.getY() << ")" << endl;
    cout << "Spawn Position " << ": (" << mSpawnPos.getX() << ", " << mSpawnPos.getY() << ")" << endl;

    cout << "Player Speed: " << mPlayerSpeed << endl;
    cout << "Collectible Value: " << mCollectibleWorth << endl;

    /*cout << "Difficulties: " << endl;
    for (int i = 0; i < mDifficulties.size(); i++)
    {
        cout << i + 1 << ". " << mDifficulties[i] << endl;
    }
    cout << endl;

    cout << "Current Difficulty: " << mCurrentDifficulty << endl;*/

    cout << "Easy Time Limit: " << mTimeLimitEasy << endl;
    cout << "Normal Time Limit: " << mTimeLimitNormal << endl;
    cout << "Hard Time Limit: " << mTimeLimitHard << endl;

    cout << "Easy Arrow Frequency: " << mArrowFrequencyEasy << endl;
    cout << "Normal Arrow Frequency: " << mArrowFrequencyNormal << endl;
    cout << "Hard Arrow Frequency: " << mArrowFrequencyHard << endl;

   /* cout << "Snake Speed: " << mSnakeSpeed << endl;
    cout << "Start Segment Number: " << mStartSegmentNum << endl;
    cout << "End Segment Number: " << mEndSegmentNum << endl;
    cout << "Food Points: " << mFoodPoints << endl;
    cout << "Power Up Base Frequency: " << mPowerUpBaseFrequency << endl;
    cout << "Power Up Random Range: " << mPowerUpRandomRange << endl;
    cout << "Bonus Chance: " << mBonusChance << endl;
    cout << "Fast Chance: " << mFastChance << endl;
    cout << "Slow Chance: " << mSlowChance << endl;*/
}