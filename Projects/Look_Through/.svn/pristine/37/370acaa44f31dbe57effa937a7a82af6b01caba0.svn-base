/*
Author: David Silverman
Class: GPR-250-01
Assignment: Assignment 3
Certification of Authenticity:
I certify that this assignment is entirely my own work.
 */

#pragma once
#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>
#include <Trackable.h>
#include <PerformanceTracker.h>
#include <Vector2D.h>
#include <iostream>
#include <fstream>
#include <cassert>
#include "animation.h"
#include "unit.h"
#include "graphicssystem.h"
#include "inputsystem.h"
#include "graphicsbuffermanager.h"
#include "unitmanager.h"
#include "snakemanager.h"
#include "level.h";
#include "levelmanager.h";
#include "foodmanager.h";
#include "wallmanager.h"
#include "hud.h"
#include "color.h"
#include "powerupmanager.h"
#include "EventListener.h"
#include <EventSystem.h>
#include <string.h>

using namespace std;

class EventSystem;

class Game : public EventListener
{
		friend class Unit;
		friend class Level;

		const string SELF_PATH = "..\\..\\silverman.david\\assets\\";
		static Game* mpsGame;
		PerformanceTracker* mpPerformanceTracker;
		const string INIT_TRACKER_NAME = "init";
		const string DRAW_TRACKER_NAME = "draw";
		const string WAIT_TRACKER_NAME = "wait";
		const int FIRST = 0;
		const int LEVEL_ONE = 1;
		const int BABY_SNAKE = 2;
		const int SMURFS = 4;
		const int FEED = 400;
		const string DATA = "data.txt";
		const Vector2D ORIGIN = Vector2D(0, 0);
		const Vector2D FPS_POSITION = Vector2D(10, 10);
		const Vector2D SCORE_POSITION = Vector2D(400, 10);
		const Vector2D TEXT_POSITION = Vector2D(200, 100);
		const float FONT_SIZE = 20;
		const int RED = 30;
		const int GREEN = 30;
		const int BLUE = 30;

		const int STAIRS_WIDTH = 1000;
		int mLevelWidth1;
		int mLevelWidth2;
		int mLevelWidth3;

		const int STAIRS_HEIGHT = 1000;
		int mLevelHeight1;
		int mLevelHeight2;
		int mLevelHeight3;

		const int DISPLAY_WIDTH = 1000;
		int mDPWidth1;
		int mDPWidth2;
		int mDPWidth3;

		const int DISPLAY_HEIGHT = 1000;
		int mDPHeight1;
		int mDPHeight2;
		int mDPHeight3;

		const int SMARF = 100;

		const float RATE = 0.03f;
		int mLvlPoints1;
		int mLvlPoints2;
		int mLvlPoints3;

		float mSpeed1;
	    float mSpeed2;
		float mSpeed3;

		int mRequiredScore1;
		int mRequiredScore2;
		int mRequiredScore3;

		float mRate1;
		float mRate2;
		float mRate3;

		string mTitle1;
		string mTitle2;
		string mTitle3;

		int mColumns1;
		int mColumns2;
		int mColumns3;

		int mRows1;
		int mRows2;
		int mRows3;

		int mScore1;
		int mScore2;
		int mScore3;

		Vector2D mScale1;
		Vector2D mScale2;
		Vector2D mScale3;

		vector<Vector2D> mLWalls1;
		vector<Vector2D> mLWalls2;
		vector<Vector2D> mLWalls3;

		Vector2D mDisplaySize1;
		Vector2D mDisplaySize2;
		Vector2D mDisplaySize3;

		const string SMURF_FILENAME = "Snake-1.png.png";
		const string DEAN_FILENAME = "Snake-2.png.png";
		const string PLAY = "Press Space to start";
		const string HERE = "Level";
		const string PLACE = ": ";
		const string RESTART = "Press Enter to restart";
		string mHeadFilename = "Snake-1.png.png";
		string mBodyFilename = "Snake-2.png.png";
	    string mTailFilename = "Snake-1.png.png";
		string mFoodFilename = "Food.png";
		string mPowerFilename = "PowerUp.png";
		string mWallFilename = "Wall.png";
		string mFontFilename = "cour.ttf";

		const string BACKGROUND_FILENAME = "Level1.png";
		string mBackgroundFilename1;
		string mBackgroundFilename2;
		string mBackgroundFilename3;

		int* mpLevelNum;
		int* mpScore;
		float* mpFPS;

		const Vector2D TOP_LEFT = Vector2D(0, 0);
		const float SIXTY_FRAMES = 16.67f;
		const float FULL = 1.0f;
		const float HALF = 0.5f;
		const float QUART = 0.25f;
		const int SPRITE_HEIGHT = 4;
		float mFrameRate;
		int mDeanHeight;
		int mTailHeight;
		int mFoodHeight;
		int mPowerHeight;
		int mWallHeight;
		const int SPRITE_WIDTH = 4;
		int mDeanWidth;
		int mTailWidth;
		int mFoodWidth;
		int mPowerWidth;
		int mWallWidth;
		bool up;
		bool down;
		bool left;
		bool right;

		HUD mHud;
		bool* mpCollided;
		GraphicsSystem* mpGraphics;
		InputSystem* mpInput;
		GraphicsBufferManager* mpGBuffers;
		SnakeManager* mpUnits;
		FoodManager* mpFood;
		PowerUpManager* mpPower;
		WallManager* mpWall;
		LevelManager mLevMan;
		EventSystem* mpEvents;
		Animation* mpSmurfAnimation;
		Animation* mpDeanAnimation;
		Animation* mpTailAnimation;
		Animation* mpFoodAnimation;
		Animation* mpPowerAnimation;
		Animation* mpWallAnimation;
		Sprite* mpBackground;
		Sprite* mpBackground2;
		Sprite* mpBackground3;
		Level* mpCurrentLevel;
		Level* mpFirstLevel;
		Level* mpSecondLevel;
		Level* mpThirdLevel;
		bool mIsSecondAnimation;
		bool* mpContinue;
		bool mPaused;
		float mRate;
		HeadDirection mDirection;
		bool mRunning;
		bool mHit;
		EventSystem* mpEventSystem;
		vector<Vector2D> Tester;
		Font* mpScript;
		bool mPlaying;

		Game();
		~Game();
	public:
		void Init();
		void Cleanup();
		void doLoop();
		void setSmurfAnimation(Animation animation);
		void setDeanAnimation(Animation animation);
		static Game* getInstance();
		static void createInstance();
		static void destroyInstance();
		void loadData(string fileName);
		//static SnakeManager* getSnake();
		//static InputSystem* getISystem();
		//static FoodManager* getFood();
		//static PowerUpManager* getPower();
		void setDirections(HeadDirection head);
		void setContinue(bool cont);
		bool getCollision();
		void setCollision(bool coll);
		void setScore(int score);
		void setFPS(float frPeSe);
		int getScore();
		float getFPS();
		void removeFood();
		void removePowerup();
		void placeNewFood();
		void placeNewPower();
		void addScore(int toAdd);
		int foodScore();
		int neededScore();
		bool nextLevel();
		void toNextLevel();
		void resetSize();
		void setLength(int newLength);
		void grow();
		void setUpLevel(string lvl, vector<Vector2D> vec);
		Sprite displayCurrent();
		void handleEvent(const Event& theEvent);
		void eventTrigger(const Event& theEvent);
};
