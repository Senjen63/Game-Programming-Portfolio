
#include "InputSystem.h"

InputSystem::InputSystem()
{

}

void InputSystem::update()
{
	SDL_PumpEvents();

	EventSystem* pEventSystem = EventSystem::getInstance();

	const Uint8* keyboardState = SDL_GetKeyboardState(NULL);

	if (keyboardState[SDL_SCANCODE_W])
	{
		pEventSystem->fireEvent(InputEvent(W_PRESSED));
	}

	if (keyboardState[SDL_SCANCODE_A])
	{
		pEventSystem->fireEvent(InputEvent(A_PRESSED));
	}

	if (keyboardState[SDL_SCANCODE_S])
	{
		pEventSystem->fireEvent(InputEvent(S_PRESSED));
	}

	if (keyboardState[SDL_SCANCODE_D])
	{
		pEventSystem->fireEvent(InputEvent(D_PRESSED));
	}

	if (keyboardState[SDL_SCANCODE_ESCAPE])
	{
		pEventSystem->fireEvent(InputEvent(ESCAPE_PRESSED));
	}

	if (keyboardState[SDL_SCANCODE_SPACE])
	{
		pEventSystem->fireEvent(InputEvent(SPACE_PRESSED));
	}

	int x;
	int y;
	const Uint32 mouseState = SDL_GetMouseState(&x, &y);

	if ((mouseState && SDL_BUTTON_LMASK) != 0)
	{
		pEventSystem->fireEvent(MouseEvent(x, y, LEFT_PRESSED));
	}

	else if ((mouseState && SDL_BUTTON_RMASK) != 0)
	{
		pEventSystem->fireEvent(MouseEvent(x, y, RIGHT_PRESSED));
	}

	else if ((mouseState) != 0)
	{
		//pEventSystem->fireEvent(MouseEvent(x, y, NONE_PRESSED));
	}
}
