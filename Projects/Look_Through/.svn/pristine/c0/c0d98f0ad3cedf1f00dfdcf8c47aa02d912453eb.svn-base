#include "EndScreen.h"
#include <fstream>
#include "Font.h"
#include "Color.h"
#include "GraphicsBufferManager.h"
#include "GraphicsBuffer.h"
#include "GraphicsSystem.h"
#include "Game.h"
#include "LanguageManager.h"
#include "OptionsManager.h"

EndScreen::EndScreen()
{
	Game* pGame = Game::getInstance();

	int r, g, b, a;

	string fontFileName;
	int fontTitleSize{}, fontOtherSize{};

	ifstream input("../GalahadAssets/data/" + DATA_FILENAME);
	if (input.good())
	{
		string key;

		while (!input.eof())
		{
			input >> key;
			if (key == "text_color")
			{
				input >> r >> g >> b >> a;
				this->mpTextColor = new Color(r, g, b, a);
			}
			else if (key == "background_color")
			{
				input >> r >> g >> b >> a;
				this->mpBackgroundColor = new Color(r, g, b, a);
			}
			else if (key == "font_filename")
			{
				input >> fontFileName;
			}
			else if (key == "title_font_size")
			{
				input >> fontTitleSize;
			}
			else if (key == "other_font_size")
			{
				input >> fontOtherSize;
			}
			else if (key == "x_loc")
			{
				input >> mCor;
			}
			else if (key == "title_loc")
			{
				input >> mCor1;
			}
			else if (key == "play_loc")
			{
				input >> mCor2;
			}
			else if (key == "option_loc")
			{
				input >> mCor3;
			}
			else if (key == "quit_loc")
			{
				input >> mCor4;
			}
			else if (key == "load_game_loc")
			{
				input >> mCor5;
			}
			else if (key == "x")
			{
				input >> mX;
			}
			else if (key == "y")
			{
				input >> mY;
			}
		}

		this->mpFontTitle = new Font(fontTitleSize, fontFileName);
		this->mpFontOther = new Font(fontOtherSize, fontFileName);

		pGame->getGraphicsBufferManager()->createAndAddGraphicsBuffer("background_end", mX, mY);

		pGame->getGraphicsSystem()->setColor(pGame->getGraphicsBufferManager()->getGraphicsBuffer("background_end"), mpBackgroundColor);
	}

	this->mInOptions = false;
}

EndScreen::~EndScreen()
{
	delete mpTextColor;
	delete mpBackgroundColor;
	delete mpFontTitle;
	delete mpFontOther;
}

void EndScreen::draw()
{
	Game* pGame = Game::getInstance();

	pGame->getGraphicsSystem()->draw(&Vector2D(mCor, mCor1), &Sprite(pGame->getGraphicsBufferManager()->getGraphicsBuffer("background_end")->getWidth(), pGame->getGraphicsBufferManager()->getGraphicsBuffer("background_start")->getHeight(), &Vector2D(mCor, mCor), pGame->getGraphicsBufferManager()->getGraphicsBuffer("background_end")));

	pGame->getGraphicsSystem()->writeText(&Vector2D(mCor, mCor2), mpFontTitle, mpTextColor, pGame->getLanguageManager()->getText("game_over"), true);

	switch (mSelectedMenuOption)
	{
	case RESTART:
		drawOptions(pGame, true, false, false);
		break;
	case RETURN:
		drawOptions(pGame, false, true, false);
		break;
	case QUIT:
		drawOptions(pGame, false, false, true);
		break;
	}
}

void EndScreen::drawOptions(Game* pGame, bool rstart, bool retu, bool ex)
{
	pGame->getGraphicsSystem()->writeText(&Vector2D(mCor, mCor3), mpFontOther, mpTextColor, pGame->getLanguageManager()->getText("restart"), true, rstart);

	pGame->getGraphicsSystem()->writeText(&Vector2D(mCor, mCor4), mpFontOther, mpTextColor, pGame->getLanguageManager()->getText("back_text"), true, retu);

	pGame->getGraphicsSystem()->writeText(&Vector2D(mCor, mCor5), mpFontOther, mpTextColor, pGame->getLanguageManager()->getText("quit_text"), true, ex);
}

void EndScreen::nextMenuOption(string direction)
{
	if (mSelectedMenuOption == QUIT && direction == "down")
	{
		mSelectedMenuOption = RESTART;
		return;
	}
	else if (mSelectedMenuOption == RESTART && direction == "up")
	{
		mSelectedMenuOption = QUIT;
		return;
	}
	else if (direction == "up")
	{
		mSelectedMenuOption--;
	}
	else if (direction == "down")
	{
		mSelectedMenuOption++;
	}
}