/*
Author: David Silverman
Class: GPR-250-01
Assignment: Assignment 3
Certification of Authenticity:
I certify that this assignment is entirely my own work.
 */


#pragma once
#include "unitmanager.h"


using namespace std;

/* Pre:  Nothing
*  Post:  A unit manager
*  Purpose:  Create the unit manager
*********************************************************/
UnitManager::UnitManager()
{

}

/* Pre:  Two animations
*  Post:  A unit manager
*  Purpose:  Create the unit manager
*********************************************************/
UnitManager::UnitManager(Animation* smurfAnimation, Animation* deanAnimation)
{
	mpSmurfAnimation = smurfAnimation;
	mpDeanAnimation = deanAnimation;
}

/* Pre:  The unit manager
*  Post:  Nothing
*  Purpose:  Destroy the unit manager
*********************************************************/
UnitManager::~UnitManager()
{
	Cleanup();
}

/* Pre:  The mouse's coordinates
*  Post:  A bool
*  Purpose:  Sees if the mouse is hovering over a sprite
*********************************************************/
bool UnitManager::inBounds(Unit* dUnit, Vector2D loc)
{
	if ((loc.getX() >= dUnit->mLoc.getX() && loc.getX() <= dUnit->mLoc.getX() + dUnit->getAnimationWidth()) && (loc.getY() >= dUnit->mLoc.getY() && loc.getY() <= dUnit->mLoc.getY() + dUnit->getAnimationHeight()))
	{
		return true;
	}
	else
	{
		return false;
	}
}

/* Pre:  Nothing
*  Post:  The manager is cleaned up
*  Purpose:  Cleanup the unit manager
*********************************************************/
void UnitManager::Cleanup()
{
	Clear();
}

/* Pre:  Nothing
*  Post:  A game
*  Purpose:  Create the game
*********************************************************/
void UnitManager::AddNewUnit()
{
	Unit* pUnit = new Unit();
	pUnit->setAnimation(mpSmurfAnimation);
	mpUnits.push_back(pUnit);
}

/* Pre:  A vector 2d
*  Post:  A unit
*  Purpose:  Add a unit
*********************************************************/
void UnitManager::AddNewUnit(Vector2D loc)
{
	Unit* pUnit = new Unit(*mpSmurfAnimation, *mpDeanAnimation, loc);
	assert(pUnit);
	mpUnits.push_back(pUnit);
}

/* Pre:  Nothing
*  Post:  Nothing
*  Purpose:  Destroy the last unit
*********************************************************/
void UnitManager::DestroyUnit()
{
	int unit = mpUnits.size() - 1;
	Unit* pUnit = mpUnits[unit];
	delete pUnit;
	mpUnits.erase(mpUnits.begin() + unit);
}

/* Pre:  Nothing
*  Post:  An integer
*  Purpose:  Destroy a unit
*********************************************************/
void UnitManager::DestroyUnit(int del)
{
	if (del < 0 || del >= mpUnits.size())
	{
		return;
	}
	else
	{
		Unit* pUnit = mpUnits[del];
		delete pUnit;
		mpUnits.erase(mpUnits.begin() + del);
	}
}

/* Pre:  A unit pointer
*  Post:  Nothing
*  Purpose:  Destroy a unit
*********************************************************/
void UnitManager::DestroyUnit(Unit* dUnit)
{
	for (int i = 0; i < mpUnits.size(); i++)
	{
		Unit* pUnit = mpUnits[i];
		if (pUnit == dUnit)
		{
			delete pUnit;
			mpUnits.erase(mpUnits.begin() + i);
			break;
		}
	}
}

/* Pre:  Nothing
*  Post:  A unit
*  Purpose:  Get the first unit
*********************************************************/
Unit* UnitManager::getUnit()
{
	return mpUnits[0];
}

/* Pre:  An integer
*  Post:  A unit
*  Purpose:  Destroy a unit
*********************************************************/
Unit* UnitManager::getUnit(int get)
{
	if (get < 0 || get >= mpUnits.size())
	{
		return nullptr;
	}
	else
	{
		return mpUnits[get];
	}
}

/* Pre:  Nothing
*  Post:  Nothing
*  Purpose:  Switch the last unit's animation
*********************************************************/
void UnitManager::switchLast()
{
	if (mpUnits[mpUnits.size() - 1]->mpAnimation == mpSmurfAnimation)
	{
		float rate = mpUnits[mpUnits.size() - 1]->getUnitCurrentSpeed();
		mpUnits[mpUnits.size() - 1]->switchAnimation();
		mpUnits[mpUnits.size() - 1]->setUnitCurrentSpeed(rate);
	}
	else
	{
		float rate = mpUnits[mpUnits.size() - 1]->getUnitCurrentSpeed();
		mpUnits[mpUnits.size() - 1]->switchAnimation();
		mpUnits[mpUnits.size() - 1]->setUnitCurrentSpeed(rate);
	}
}

/* Pre:  A double
*  Post:  Nothing
*  Purpose:  Update all units
*********************************************************/
void UnitManager::updateAll(double dt)
{
	for (int i = 0; i < mpUnits.size(); i++)
	{
		mpUnits[i]->update(dt);
	}
}

/* Pre:  Nothing
*  Post:  Nothing
*  Purpose:  Draw all units
*********************************************************/
void UnitManager::drawAll()
{
	for (int i = 0; i < mpUnits.size(); i++)
	{
		mpUnits[i]->draw();
	}
}

/* Pre:  A graphics buffer
*  Post:  Nothing
*  Purpose:  Draw all units to a graphics buffer
*********************************************************/
void UnitManager::drawAll(GraphicsBuffer* buffer)
{
	for (int i = 0; i < mpUnits.size(); i++)
	{
		mpUnits[i]->draw(buffer);
	}

}

/* Pre:  A bool and a float
*  Post:  Nothing
*  Purpose:  Set the manager speed
*********************************************************/
void UnitManager::setManagerSpeed(bool increase, float rate)
{
	mSystemSpeed = mpUnits[0]->getUnitCurrentSpeed();
	for (int i = 0; i < mpUnits.size(); i++)
	{
		mpUnits[i]->setUnitCurrentSpeed(increase, rate);
	}
}

/* Pre:  A vector 2d
*  Post:  Nothing
*  Purpose:  Delete a unit
*********************************************************/
void UnitManager::deleteUnit(Vector2D pos)
{
	for (int i = 0; i  < mpUnits.size(); i++)
	{
		Unit* pUnit = mpUnits[i];
		if (inBounds(pUnit, pos))
		{
			delete pUnit;
			mpUnits.erase(mpUnits.begin() + i);
			break;
		}
	}
}

/* Pre:  Nothing
*  Post:  Nothing
*  Purpose:  Clear the manager
*********************************************************/
void UnitManager::Clear()
{
	for (std::vector<Unit*>::iterator pUnit = mpUnits.begin(); pUnit != mpUnits.end(); ++pUnit)
	{
		Unit* dUnit = *pUnit;
		delete dUnit;
	}
	mpUnits.clear();
}

/* Pre:  Two animations
*  Post:  Nothing
*  Purpose:  Set the animations of the game
*********************************************************/
void UnitManager::setAnimations(Animation* smurfAnimation, Animation* deanAnimation)
{
	mpSmurfAnimation = smurfAnimation;
	mpDeanAnimation = deanAnimation;
}