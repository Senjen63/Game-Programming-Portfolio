#pragma once

#include <unordered_map>
#include <vector>

#include "Sprite.h"
#include "Animation.h"

class Animation;

class AnimationManager : public Trackable
{
	std::unordered_map<std::string, std::vector<Sprite>*> mAnimationFrames;
	std::unordered_map<std::string, Animation*> mAnimations;

public:
	AnimationManager() {}
	~AnimationManager() { cleanup(); }

	std::vector<Sprite>* getAnimationFrames(const std::string& animationFramesName);

	void addAnimationFrames(const std::string& animationFramesName, std::vector<Sprite>& frames);
	void removeAnimationFrames(const std::string& animationFramesName);

	void insertFrames(const std::string& animationFramesName, Sprite& newFrame, int frameIndex);
	void insertFramesAtBeginning(const std::string& animationFramesName, Sprite& newFrame);
	void insertFramesAtEnd(const std::string& animationFramesName, Sprite& newFrame);

	void insertFrames(const std::string& animationFramesName, std::vector<Sprite>& newFrame, int frameIndex);
	void insertFramesAtBeginning(const std::string& animationFramesName, std::vector<Sprite>& newFrame);
	void insertFramesAtEnd(const std::string& animationFramesName, std::vector<Sprite>& newFrame);

	void removeFrames(const std::string& animationFramesName, int startIndexInclusive, int endIndexExclusive);

	Animation* getAnimation(std::string name) { return mAnimations[name]; }
	Animation* addAnimation(std::string name, std::string framesName, float fps, bool shouldLoop = false);

	void cleanup();

	std::vector<Sprite>* createSpriteVectorCopy(std::vector<Sprite>& sv);
};

