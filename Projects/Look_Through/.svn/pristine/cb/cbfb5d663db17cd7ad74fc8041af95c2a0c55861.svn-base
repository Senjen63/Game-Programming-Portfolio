#include "UnitManager.h"
#include <iostream>

UnitManager::UnitManager()
{
	mUnitCount = 0;
}

UnitManager::~UnitManager()
{
	cleanUp();
}

void UnitManager::cleanUp()
{
	for (int i = 0; i < mUnitCount; i++)
	{
		delete mpUnitVector[i];
	}
	mUnitCount = 0;
	mpUnitVector.clear();
}

void UnitManager::makeUnit()
{
	Unit* pUnit = new Unit();
	mpUnitVector.push_back(pUnit);
	mUnitCount++;
}
void UnitManager::setUnitPos(Vector2D& position)
{
	mpUnitVector[mUnitCount - 1]->setPosition(position);
}
void UnitManager::clearUnit(Unit* pUnit)
{
	for (int i = 0; i < mUnitCount; i++)
	{
		Unit* pTempUnit = mpUnitVector[i];

		if (pUnit == pTempUnit)
		{
			delete pTempUnit;
			mpUnitVector.erase(mpUnitVector.begin() + i);
			mUnitCount--;
			break;
		}
	}
}
void UnitManager::clearUnitsinArea(Vector2D mousePos)
{
	Vector2D tempPos;
	float distance;

	for (int i = 0; i < mUnitCount; i++)
	{
		Unit* pTempUnit = mpUnitVector[i];
		
		distance = tempPos.getDistanceBetween(Vector2D(pTempUnit->getLocation().getX() - (pTempUnit->getSprite()->getWidth() / 2), pTempUnit->getLocation().getY() - (pTempUnit->getSprite()->getHeight() / 2)), mousePos);

		if (distance <= (pTempUnit->getSprite()->getWidth() / 2))
		{
			clearUnit(pTempUnit);
		}
	}

}
void UnitManager::UpdateAll()
{
	for (auto i : mpUnitVector)
	{
		Unit* pUnit = i;
		pUnit->Update();
	}

}
void UnitManager::updateTiming(float change)
{

	for (auto i : mpUnitVector)
	{
		Unit* pUnit = i;
		pUnit->changeFrameRate(change);
	}

}
void UnitManager::DrawAll(GraphicsSystem* pSys)
{
	int j = 0;
	for (auto i : mpUnitVector)
	{
		Unit* pUnit = i;
		pUnit->Draw(pSys, pUnit->getSprite()->getLocation(), getPosition(j).getX(), getPosition(j).getY());
		j++;
	}
}

void UnitManager::stopOrStart()
{
	for (auto i : mpUnitVector)
	{
		Unit* pUnit = i;
		pUnit->setPaused();
	}
}
int UnitManager::getUnitCount()
{
	return mUnitCount;
}

Unit* UnitManager::getUnit()
{
	if (mpUnitVector.size() > 0)
	{
		return mpUnitVector[0];
	}
	else
	{
		return nullptr;
	}

}

Unit* UnitManager::getUnit(int index)
{
	if (index <= mUnitCount)
		return mpUnitVector[index];
	else
		return NULL;
}

Unit* UnitManager::getRecentUnit()
{
	return mpUnitVector[mUnitCount];
}

Vector2D UnitManager::getPosition(int index)
{
	return mpUnitVector[index]->getLocation();
}

void UnitManager::swapLast()
{
	mpUnitVector[mUnitCount - 1]->swapAnim();
}