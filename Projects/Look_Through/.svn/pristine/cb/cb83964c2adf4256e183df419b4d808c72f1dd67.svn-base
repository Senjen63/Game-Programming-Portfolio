/***
* Author: Quincy Gomes-Cedeno
* Class: GPR-250-02
* Assignment: Assignment 1
* Certification of Authenticity:
* I certify that this assignment is entirely my own work.
**/

#include <iostream>
#include <cassert>
#include <string>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>
#include <time.h>

#include "GraphicsSystem.h"

using namespace std;

int main()
{
	srand(time(NULL));

	int randomWidth;
	int randomHeight;

	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;

	//trackers
	const string INIT_TRACKER_NAME = "init";
	const string DRAW_TRACKER_NAME = "draw";
	const string WAIT_TRACKER_NAME = "wait";
	
	//files
	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string BACKGROUND_FILENAME = "steps.png";
	const string QUIMBY_FILENAME = "mayor_quimby.png";
	const string SMURF_FILENAME = "smurf_sprites.png";
	const string FONT_FILENAME = "cour.ttf";
	const string BACKBUFFER_FILENAME = "backbuffer.jpg";
	const string RED_FILENAME = "redbuffer.jpg";

	//font
	const int FONT_SIZE = 50;

	//timer
	const double SLEEP_TIME = 5.0;

	//color
	const Color red = Color(255, 0, 0, 255);
	const Color black = Color(0, 0, 0, 255);

	//Display
	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;
	const int SMURF_AMOUNT_MULTIPLE = 4;
	const float RED_BOARDER_SCALE = .66;
	const string DISP_TEXT = "Curse You Papa Smurf!";

	//locations
	float redHeight;
	float redWidth;

	bool initialized = true;
	GraphicsSystem* gSystem = nullptr;
	gSystem = new GraphicsSystem();

	if (!gSystem->initialize(DISP_WIDTH, DISP_HEIGHT))
	{
		initialized = false;
	}

	if (initialized)
	{
		Font* pFont = new Font(FONT_SIZE, (ASSET_PATH + FONT_FILENAME));
		assert(pFont);

		GraphicsBuffer* pSteps = new GraphicsBuffer((ASSET_PATH + BACKGROUND_FILENAME).c_str());
		assert(pSteps);

		redHeight = DISP_HEIGHT * RED_BOARDER_SCALE;
		redWidth = DISP_WIDTH * RED_BOARDER_SCALE;

		GraphicsBuffer* pRedBuffer = new GraphicsBuffer(red, DISP_WIDTH, DISP_HEIGHT);
		assert(pRedBuffer);
		GraphicsBuffer* pQuimby = new GraphicsBuffer((ASSET_PATH + QUIMBY_FILENAME).c_str());
		assert(pQuimby);
		GraphicsBuffer* pSmurf = new GraphicsBuffer((ASSET_PATH + SMURF_FILENAME).c_str());
		assert(pSmurf);

		//draw quimby with red background
		Sprite quimby(pQuimby, pQuimby->getHeight(), pQuimby->getWidth(), Vector2D(0, 0));
		gSystem->draw(pRedBuffer, 0, 0, quimby, 1);
		gSystem->writeText(pRedBuffer, 320, 6, pFont, black, DISP_TEXT);

		//draw steps background
		gSystem->drawBackground(pSteps);
		//draw redbuffer 2/3rds of screen
		gSystem->draw(pRedBuffer, DISP_WIDTH, DISP_HEIGHT, RED_BOARDER_SCALE);

		int i = 0;
		int j = 0;

		//do while, while to allow 16 smurfs to appear in different x and y positions
		do 
		{
			while (j < SMURF_AMOUNT_MULTIPLE)
			{
				randomWidth = rand() % gSystem->getWidth();
				randomHeight = rand() % gSystem->getHeight();

				Vector2D sourceLocation = Vector2D(60 * i, 60 * j);
				Sprite smurf(pSmurf, (pSmurf->getHeight() / 4), 
					(pSmurf->getWidth() / 4), sourceLocation);

				//randomly draw smurfs to display
				gSystem->draw(randomWidth, randomHeight, smurf, 1);

				j++;
			}
			j = 0;
			i++;

		}while(i < SMURF_AMOUNT_MULTIPLE);

		//save the buffer to assignment1
		gSystem->saveBuffer(gSystem->getBackBuffer(), BACKBUFFER_FILENAME);
		gSystem->saveBuffer(pRedBuffer, RED_FILENAME);

		gSystem->flip();

		Timer timer;
		//wait 5 seconds
		timer.sleep(5000.0);

		pPerformanceTracker->stopTracking("loop");
		pPerformanceTracker->clearTracker("loop");

		//desctruction of code
		delete pFont;
		delete pRedBuffer;
		delete pSmurf;
		delete pQuimby;
		delete pSteps;

		gSystem->cleanUp();
		delete gSystem;
		gSystem = nullptr;

		delete pPerformanceTracker;
	}

	MemoryTracker::getInstance()->reportAllocations(cout);
	system("pause");
	return 0;
}