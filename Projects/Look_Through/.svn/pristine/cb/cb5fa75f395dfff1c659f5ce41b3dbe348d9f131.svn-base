#include "HUD.h"
#include "Game.h"
#include "GraphicsBufferManager.h"
#include "GraphicsBuffer.h"
#include "GraphicsSystem.h"
#include "LevelManager.h"
#include "Vector2D.h"
#include "Font.h"
#include "Color.h"
#include "Sprite.h"
#include <EventSystem.h>
#include "GameEvent.h"
#include <fstream>
#include <algorithm>
#include "Vector2D.h"

HUD::HUD()
{
	int red = 0;
	int green = 0;
	int blue = 0;
	int a = 0;

	int x = 0;
	int y = 0;

	ifstream input("./data_files/hud.txt");
	if (input.good())
	{
		string key;

		while (!input.eof())
		{
			input >> key;
			if (key == "text_color")
			{
				input >> red >> green >> blue >> a;
				this->mpTextColor = new Color(red, green, blue, a);
			}
			else if (key == "font")
			{
				input >> this->mFontFileName;
			}
			else if (key == "font_size")
			{
				input >> this->mFontSize;
			}
			else if (key == "text_alignment")
			{
				input >> this->mTextAlignment;
			}
			else if (key == "instruction_text")
			{
				input >> this->mInstructionText;
				replace(mInstructionText.begin(), mInstructionText.end(), '_', ' '); //https://stackoverflow.com/questions/2896600/how-to-replace-all-occurrences-of-a-character-in-string
			}
			else if (key == "level_text")
			{
				input >> this->mLevelText;
			}
			else if (key == "score_text")
			{
				input >> this->mScoreText;
			}
			else if (key == "time_text")
			{
				input >> this->mTimeText;
			}
			else if (key == "fps_text")
			{
				input >> this->mFpsText;
			}
			else if (key == "instruction_location")
			{
				input >> x >> y;
				this->mInstructionLocation = Vector2D(x, y);
			}
			else if (key == "game_info_location")
			{
				input >> x >> y;
				this->mGameInfoLocation = Vector2D(x, y);
			}
		}
	}
	input.close();

	mpFont = new Font(mFontSize, mFontFileName);
}

HUD::~HUD()
{
	delete mpFont;
	delete mpTextColor;
}

void HUD::drawHud(double dt)
{
	Game* pGame = Game::getInstance();

	const int CURRENT_LEVEL = pGame->getLevelManager()->getCurrentLevel();
	const int CURRENT_SCORE = pGame->getCurrentScore();
	const float FPS = double(1000) / dt;
	
	if (pGame->getIsTimeRun())
	{
		pGame->addTime(dt);
	}

	int time = pGame->getTime() / 1000;

	string hudText = mLevelText + " " + to_string(CURRENT_LEVEL) + " " + mScoreText + " " + to_string(CURRENT_SCORE) + " " + mFpsText + " " + to_string(FPS) + " " + mTimeText + " " + to_string(time);

	Game::getInstance()->getGraphicsSystem()->writeText(mGameInfoLocation, mpFont, mpTextColor, hudText, mTextAlignment);
	Game::getInstance()->getGraphicsSystem()->writeText(mInstructionLocation, mpFont, mpTextColor, mInstructionText, mTextAlignment);
}
