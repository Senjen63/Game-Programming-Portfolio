#pragma once

#include <Trackable.h>
#include <vector>
#include "Sprite.h"

class Animation : public Trackable
{
public:
    Animation(const std::vector<Sprite>&sprites, float frameRate, bool loops = true);
    /// <summary>
    /// Uses Sprite::slice() to create sprite vector. When numSprites, sheetWidth, or sheetHeight are -1 then the function will fingure it out for you. 
    /// </summary>
    Animation(GraphicsBuffer* pSpriteSheetBuffer, float frameRate, int spriteWidth, int spriteHeight, int numSprites = -1,
        int sheetWidth = -1, int sheetHeight = -1, Vector2D sheetStart = Vector2D(), bool loops = true);
    Animation(Sprite sprite);
    ~Animation() {};

    void update(double deltaTime);
    void setFrameRate(float frameRate) { mFrameRate = frameRate; }
    void addFrameRate(float deltaFrameRate) { if (mFrameRate + deltaFrameRate >= 0) { mFrameRate += deltaFrameRate; } }

    float getFrameRate() const { return mFrameRate; }
    double getFramesPast() const { return mFramesPast; }
    Vector2D getMaxSize() const;

    void setTimingInfo(const Animation & other) { mFrameRate = other.mFrameRate; mFramesPast = other.mFramesPast; }

    const Sprite& getCurrentSprite() const;

private:
    std::vector<Sprite> mSprites;
    bool mLoops = false;

    float mFrameRate = 0;
    double mFramesPast = 0;
};
