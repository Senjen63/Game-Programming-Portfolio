#pragma once
#include <vector>
#include <iostream>
#include <PerformanceTracker.h>
#include <cmath>
#include "GraphicsSystem.h"
#include "Vector2D.h"
#include "Player.h"
#include "Obstacle.h"
#include <EventSystem.h>
#include "EventListener.h"
#include "Button.h"
#include "UIEvent.h"
using namespace std;
class Unit;
const int ROCKET_COLUMNS = 2;
const int ROCKET_ROWS = 2;
const int ROCKET_FRAMES = 4;

class UnitManager : public Trackable
{
private:
	vector<Unit*> mpUnits;
	int mNumUnits = 0;
	Unit* mpPlayer = NULL;
	EventSystem* mpEventSystem;
	//saved values, taken from game
	//this would be a lot easier if I still had my constant values, but I have to read from a file now. 
	int mDisplayWidth = 0;
	int mDisplayHeight = 0;
	int mObstacleWidth = 0;
	int mObstacleHeight = 0;
	int mGateWidth = 0;
	int mGateHeight = 0;
	float mObstacleSpeed = 0;
	string mWallBuffer = "";
	int mObstaclesSpawned = 0;
	bool mCleaning;
public:
	UnitManager();
	~UnitManager();
	void CleanUp();
	void SpawnObstacle();
	void SetValues(int dw, int dh, int obstacleW, int obstacleH, int gateW, int gateH, string wallBuff);
	void SetObstacleSpeed(float obsSpeed);
	void CreateUnit();
	void CreateUnit(GraphicsBuffer* pBuffer);
	void CreateUnit(bool isWall, GraphicsBuffer* pBuffer);
	void CreateUnit(GraphicsBuffer* pBuffer, Vector2D position, int w, int h, UIEvent::UIEventType eventType);
	void CreatePlayer(GraphicsBuffer* pBuffer, int playerPos, float animTime, float playerSpeed, int pw, int ph);

	void SetUnitPos(Vector2D& position);
	Vector2D GetPosition(int index);
	void DestroyUnit(Unit* pUnit);
	void DestroyUnits(Vector2D mousePos);
	void Update(float elapsedTime);
	void UpdateUI(Vector2D mousePosition);
	void UpdateTime(float amount);
	int GetNumUnits();
	Unit* GetUnit();
	Unit* GetUnit(int index);
	Unit* GetLastUnit();
	Player* GetPlayer();
	void DoAnimation();
	void Draw(GraphicsSystem* pGraphicsSystem);
	void SetLastUnit();
	void HandleCollisions();
	void LoadObstacle(Vector2D obstaclePosition);
	Vector2D GetObstaclePosition(int numObstacle);
};