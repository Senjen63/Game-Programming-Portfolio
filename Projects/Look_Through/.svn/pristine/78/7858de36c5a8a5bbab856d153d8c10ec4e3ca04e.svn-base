#include "Game.h"

Game* gpGame = new Game();
Game::Game()
{
	mpSystem = new GraphicsSystem();
	mInputSystem.init();

	/*mpSmurfAnimation = nullptr;
	mpDeanAnimation = nullptr;

	mpWoods = nullptr;
	mpSmurfs = nullptr;
	mpDean = nullptr;

	mpSystem = nullptr;

	mpObject = nullptr;*/
}

Game::~Game()
{
	cleanup();
}

void Game::init()
{
	mpSystem->init(DISPLAY_HEIGHT, DISPLAY_WIDTH);

	mpWoods = new GraphicsBuffer(ASSET_PATH + BACKGROUND_FILENAME);
	mpSmurfs = new GraphicsBuffer(ASSET_PATH + SMURF_FILENAME);
	mpDean= new GraphicsBuffer(ASSET_PATH + DEAN_FILENAME);

	mpSmurfAnimation = new Animation(mpSmurfs, FRAMES_PER_SECOND, START_TIME, true);
	mpDeanAnimation = new Animation(mpDean, FRAMES_PER_SECOND, START_TIME, true);

	mpObject = new Unit(mpSmurfAnimation, mpDeanAnimation, Vector2D());
}

void Game::cleanup()
{
	mpSystem->cleanUp();

	delete mpWoods;
	delete mpSmurfs;
	delete mpDean;

	delete mpSmurfAnimation;
	delete mpDeanAnimation;

	delete mpObject;

	//delete mpSystem;
}

void Game::doLoop()
{
	bool keepGoing = true;
	float timeAmount = .005;

	PerformanceTracker* pPerformanceTracker = new PerformanceTracker();
	
	Timer timer;
	float animationTime = 0;

	Vector2D mousePos = Vector2D((DISPLAY_WIDTH / 2) + (SPRITE_WIDTH / 2), (DISPLAY_HEIGHT / 2) + (SPRITE_HEIGHT / 2));

	while (keepGoing)
	{
		pPerformanceTracker->clearTracker("loop");
		pPerformanceTracker->startTracking("loop");
		timer.start();
		animationTime += timer.getElapsedTime();

		if (animationTime > mpObject->getTime())
		{
			mpObject->update();
			animationTime = 0;
		}
		
		mpSystem->draw(mpWoods, Vector2D(), .5);
		mpSystem->draw(mpObject->draw()->getLocation(), mpObject->draw(), mousePos.getX() + (SPRITE_WIDTH / 2), mousePos.getY() + (SPRITE_HEIGHT / 2));
		mpSystem->flip();

		if (mInputSystem.getMouseState())
		{
			mousePos = mInputSystem.getMousePosition();
		}

		if (mInputSystem.getKeyState(ALLEGRO_KEY_F))
		{
			mpObject->setTime(-timeAmount);
		}
		else if (mInputSystem.getKeyState(ALLEGRO_KEY_S))
		{
			mpObject->setTime(timeAmount);
		}
		else if (mInputSystem.getKeyState(ALLEGRO_KEY_ENTER))
		{
			mpObject->setAnimation();
		}
		else if (mInputSystem.getKeyState(ALLEGRO_KEY_ESCAPE))
		{
			keepGoing = false;
		}

		timer.sleepUntilElapsed(SLEEP_TIME);
		pPerformanceTracker->stopTracking("loop");
		cout << "Frame took:" << pPerformanceTracker->getElapsedTime("loop") << endl;
	}
	
	delete pPerformanceTracker;
}