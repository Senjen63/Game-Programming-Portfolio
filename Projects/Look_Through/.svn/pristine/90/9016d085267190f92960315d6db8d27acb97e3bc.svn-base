#pragma once
#include <iostream>
#include "graphicssystem.h"

using namespace std;

GraphicsSystem::GraphicsSystem()
{
	
}

GraphicsSystem::~GraphicsSystem()
{
	disp = nullptr;
}

void GraphicsSystem::Init()
{
	disp = al_create_display(WINDOW_WIDTH, WINDOW_HEIGHT);
	assert(disp);
}

void GraphicsSystem::Cleanup()
{
	ALLEGRO_BITMAP* back = al_get_backbuffer(disp);
	al_destroy_bitmap(back);
	al_destroy_display(disp);
}

int GraphicsSystem::getHeight()
{
	return al_get_display_height(disp);
}

int GraphicsSystem::getWidth()
{
	return al_get_display_width(disp);
}

ALLEGRO_BITMAP* GraphicsSystem::getBackBuffer()
{
	return al_get_backbuffer(disp);
}

void GraphicsSystem::setHeight(int hi)
{
	al_resize_display(disp, getWidth(), hi);
}

void GraphicsSystem::setWidth(int wi)
{
	al_resize_display(disp, wi, getHeight());
}

void GraphicsSystem::Flip()
{
	al_flip_display();
}

void GraphicsSystem::Draw(Vector2D loc, Sprite spri)
{
	al_set_target_bitmap(al_get_backbuffer(disp));
	al_draw_bitmap(spri.getSprite()->getBuffer(), loc.getX(), loc.getY(), 0);
}

void GraphicsSystem::Draw(Vector2D loc, Sprite spri, float scale)
{
	al_set_target_bitmap(al_get_backbuffer(disp));
	al_draw_scaled_bitmap(spri.getSprite()->getBuffer(), spri.loc.getX(), spri.loc.getY(), spri.getWidth(), spri.getHeight(), loc.getX(), loc.getY(),
		al_get_bitmap_width(spri.getSprite()->getBuffer()) * scale, al_get_bitmap_height(spri.getSprite()->getBuffer()) * scale, 0);
}

void GraphicsSystem::Draw(GraphicsBuffer* gBuff, Vector2D loc, Sprite spri)
{
	al_set_target_bitmap(gBuff->getBuffer());
	al_draw_bitmap(spri.getSprite()->getBuffer(), loc.getX(), loc.getY(), 0);
}

void GraphicsSystem::Draw(GraphicsBuffer* gBuff, Vector2D loc, Sprite spri, float scale)
{
	al_set_target_bitmap(gBuff->getBuffer());
	al_draw_scaled_bitmap(spri.getSprite()->getBuffer(), spri.loc.getX(), spri.loc.getY(), spri.getWidth(), spri.getHeight(), loc.getX(), loc.getY(),
		al_get_bitmap_width(spri.getSprite()->getBuffer()) * scale, al_get_bitmap_height(spri.getSprite()->getBuffer()) * scale, 0);
}

void GraphicsSystem::WriteText(Vector2D loc, Font font, Color color, string text)
{
	al_set_target_bitmap(al_get_backbuffer(disp));
	al_draw_text(font.getFont(), color.getColor(), loc.getX(), loc.getY(), 0, text.c_str());
}

void GraphicsSystem::WriteText(GraphicsBuffer* gBuff, Vector2D loc, Font font, Color color, string text)
{
	al_set_target_bitmap(gBuff->getBuffer());
	al_draw_text(font.getFont(), color.getColor(), loc.getX(), loc.getY(), ALLEGRO_ALIGN_LEFT, text.c_str());
	//cout <<  << endl;
}

void GraphicsSystem::SaveBuffer(GraphicsBuffer* gBuff, string fileName)
{
	al_save_bitmap(fileName.c_str(), gBuff->getBuffer());
}