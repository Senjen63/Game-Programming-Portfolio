#include "HUD.h"

HUD::HUD()
{
	mpGraphicsSystem = nullptr;
	mpFont = nullptr;
	mpScoreBuffer = nullptr;
	mpFPSBuffer = nullptr;
	mpTimeBuffer = nullptr;
	mFPS = 0.0;
	mTime = 0.0;
	mScore = 0;
}

HUD::HUD(GraphicsSystem* pSystem, Font* pFont)
{
	mpGraphicsSystem = pSystem;
	mpFont = pFont;

	mpScoreBuffer = nullptr;
	mpFPSBuffer = nullptr;
	mpTimeBuffer = nullptr;
	mFPS = 0.0;
	mTime = 0.0;
	mScore = 0;
}

HUD::~HUD()
{
	cleanup();
}

void HUD::init()
{
	mpScoreBuffer = new GraphicsBuffer(HUD_BUFFER_WIDTH,HUD_BUFFER_HEIGHT);
	mpFPSBuffer = new GraphicsBuffer(HUD_BUFFER_WIDTH, HUD_BUFFER_HEIGHT);
	mpTimeBuffer = new GraphicsBuffer(HUD_BUFFER_WIDTH, HUD_BUFFER_HEIGHT);
}

void HUD::cleanup()
{
	delete mpScoreBuffer;
	delete mpFPSBuffer;
	delete mpTimeBuffer;
}

void HUD::display()
{
	mpGraphicsSystem->writeText(Vector2D(), mpFont, mWhite, "FPS: " + to_string(mFPS));
	mpGraphicsSystem->draw(mpFPSBuffer, Vector2D(0, 0), 1);
	mpGraphicsSystem->writeText(Vector2D(HUD_BUFFER_WIDTH,0), mpFont, mWhite, "Score: " + to_string(mScore));
	mpGraphicsSystem->draw(mpScoreBuffer, Vector2D((mpGraphicsSystem->getWidth() - mpScoreBuffer->getWidth()) / 2, 0), 1);
	mpGraphicsSystem->writeText(Vector2D(2*HUD_BUFFER_WIDTH,0), mpFont, mWhite, "Time: " + to_string(mTime));
	mpGraphicsSystem->draw(mpTimeBuffer, Vector2D(mpGraphicsSystem->getWidth() - mpTimeBuffer->getWidth(), 0), 1);
}

void HUD::setFPS(float FPS)
{
	mFPS = FPS;
}

float HUD::getFPS()
{
	return mFPS;
}

void HUD::setTime(float time)
{
	mTime += time;
}

float HUD::getTime()
{
	return mTime;
}

void HUD::setScore(int score)
{
	mScore = score;
}

int HUD::getScore()
{
	return mScore;
}