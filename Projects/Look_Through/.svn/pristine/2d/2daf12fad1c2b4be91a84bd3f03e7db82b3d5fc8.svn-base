#include "LevelManager.h"
#include "Game.h"

LevelManager::LevelManager()
{
	
}

LevelManager::~LevelManager()
{
	cleanUp();
}

void LevelManager::init(int numLevels)
{
	mNumLevels = numLevels;
	mpLevels = new Level[mNumLevels];
}

void LevelManager::cleanUp()
{	
	delete[] mpLevels;
	mpLevels = nullptr;

	mNumLevels = 0;
}

void LevelManager::createSideWalls(int level)
{
	//int t = 0, y = 0, u = 0;

	////make vertical walls
	//for (t = 0; mpLevels[level].mLevel.getNumUnits() < ((DISP_HEIGHT / Game::getInstance()->getSpriteHeight()) * 2); t += 2)
	//{
	//	//mpLevels[level].mLevel.createAndAddUnit(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWallFile()));
	//	//mpLevels[level].mLevel.setUnitPos(t, Vector2D(DISP_WIDTH, ((t / 2) * Game::getInstance()->getSpriteHeight()) + Game::getInstance()->getSpriteHeight()));

	//	//mpLevels[level].mLevel.createAndAddUnit(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWallFile()));
	//	//mpLevels[level].mLevel.setUnitPos(t + 1, Vector2D(Game::getInstance()->getSpriteWidth(), ((t / 2) * Game::getInstance()->getSpriteHeight()) + Game::getInstance()->getSpriteHeight()));
	//}

	////make horizontal walls
	//for (y = mpLevels[level].mLevel.getNumUnits(); y < ((DISP_WIDTH / Game::getInstance()->getSpriteWidth()) * 2) + t - 4; y += 2)
	//{
	//	//mpLevels[level].mLevel.createAndAddUnit(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWallFile()));
	//	//mpLevels[level].mLevel.setUnitPos(y, Vector2D(((u / 2) * Game::getInstance()->getSpriteWidth()) + 2 * Game::getInstance()->getSpriteWidth(), Game::getInstance()->getSpriteHeight()));

	//	//mpLevels[level].mLevel.createAndAddUnit(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWallFile()));
	//	//mpLevels[level].mLevel.setUnitPos(y + 1, Vector2D(((u / 2) * Game::getInstance()->getSpriteWidth()) + 2 * Game::getInstance()->getSpriteWidth(), DISP_HEIGHT));

	//	u += 2;
	//}
}

void LevelManager::createInnerWall(int level, Vector2D location)
{
	//mpLevels[level].mLevel.createAndAddUnit(Game::getInstance()->getGraphicsBuffer(Game::getInstance()->getWallFile()), location);
}

void LevelManager::loadLevelData(int level, int length, int speedSpawn, int slowSpawn, int scoreSpawn, int scorePoints, int startingLength)
{
	mpLevels[level].mLength = length;
	mpLevels[level].mSpeedSpawn = speedSpawn;
	mpLevels[level].mSlowSpawn = slowSpawn;
	mpLevels[level].mScoreSpawn = scoreSpawn;
	mpLevels[level].mScorePoints = scorePoints;
	mpLevels[level].mStartingLength = startingLength;
}

bool LevelManager::detectUnits(int level, Vector2D location)
{
	return mpLevels[level].mLevel.detectUnits(location);
}

void LevelManager::draw(GraphicsSystem* pGraphicsSystem, int index)
{
	mpLevels[index].mLevel.draw(pGraphicsSystem);
}

int LevelManager::getNumLevels()
{
	return mNumLevels;
}

int LevelManager::getLevelLength(int level)
{
	return mpLevels[level].mLength;
}

int LevelManager::getSpeedSpawn(int level)
{
	return mpLevels[level].mSpeedSpawn;
}

int LevelManager::getSlowSpawn(int level)
{
	return mpLevels[level].mSlowSpawn;
}

int LevelManager::getScoreSpawn(int level)
{
	return mpLevels[level].mScoreSpawn;
}

int LevelManager::getScorePoints(int level)
{
	return mpLevels[level].mScorePoints;
}

int LevelManager::getStartingLength(int level)
{
	return mpLevels[level].mStartingLength;
}
