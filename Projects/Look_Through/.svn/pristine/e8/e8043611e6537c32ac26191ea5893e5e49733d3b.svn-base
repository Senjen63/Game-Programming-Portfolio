#pragma once

#include <Trackable.h>
#include <vector>
#include "AudioSnippet.h"

enum class SoundType
{
    INVALID = -1,
    TANK_SHOOT,
    TANK_DESTROY,
    MUSIC,
    MAX_SOUND_TYPES
};

class AudioManager : public Trackable
{
public:
    AudioManager(const std::string& nameFilePath);
    ~AudioManager() {};

    void init();
    void cleanUp() {};

    void play(SoundType type);

    bool getMuteEffects() const { return mMuteEffects; }
    bool getMuteMusic() const { return mMuteMusic; }

    void setMuteEffects(bool muted);
    void setMuteMusic(bool muted);

    friend std::istream& operator>>(std::istream& istream, AudioManager& audioManager);

private:
    std::vector<AudioSnippet> mSounds;
    int mMusicChannel = -1;

    const std::string mNameFilePath;

    bool mMuteEffects = false;
    bool mMuteMusic = false;
};
