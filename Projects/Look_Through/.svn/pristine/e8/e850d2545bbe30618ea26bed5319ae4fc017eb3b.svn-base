#include <vector>

#include "Game.h"
#include "GraphicsSystem.h"
#include "InputSystem.h"
#include "GraphicsBuffer.h"
#include "Sprite.h"
#include "Vector2D.h"
#include "Animation.h"
#include "Unit.h"
#include "Timer.h"
#include <PerformanceTracker.h>

using namespace std;

Game* gpGame = nullptr;

Game::Game() 
{
	this->mpGraphicsSystem = nullptr;
	this->mpInputSystem = nullptr;
	this->mpWoodsBuffer = nullptr;
	this->mpDeanBuffer = nullptr;
	this->mpSmurfBuffer = nullptr;
	this->mpGameTimer = nullptr;
	this->mpSmurfAnimation = nullptr;
	this->mpDeanAnimation = nullptr;
	this->mpPerformanceTracker = nullptr;
	this->mpWoodsSprite = nullptr;
	this->mpUnit = nullptr;
	this->mGameContinue = true;
	this->mGamePauseTime = 16.7;
}

Game::~Game()
{
	cleanUp();
}

void Game::init()
{
	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;
	const int NUM_SPRITES_ROW_COLUMN = 4;
	mCenterLocation = Vector2D(DISP_WIDTH / 2, DISP_HEIGHT / 2);
	mZeroZeroLocation = Vector2D(0, 0);

	const string WOODS_IMAGE_NAME = "Woods.png";
	const string DEAN_IMAGE_NAME = "dean_sprites.png";
	const string SMURF_IMAGE_NAME = "smurf_sprites.png";

	mpGraphicsSystem = new GraphicsSystem;
	mpInputSystem = new InputSystem;

	mpGraphicsSystem->init(DISP_WIDTH, DISP_HEIGHT);

	mpInputSystem->init();

	mpWoodsBuffer = new GraphicsBuffer(WOODS_IMAGE_NAME);

	mpWoodsSprite = new Sprite(mpWoodsBuffer->getBitmapWidth(), mpWoodsBuffer->getBitmapHeight(), mZeroZeroLocation, mpWoodsBuffer);

	mpDeanBuffer = new GraphicsBuffer(DEAN_IMAGE_NAME);
	mpSmurfBuffer = new GraphicsBuffer(SMURF_IMAGE_NAME);

	// create 16 smurf sprites and 16 dean sprites and add to animation
	mpSmurfAnimation = new Animation(true);
	mpDeanAnimation = new Animation(true);

	for (float i = 1; i <= NUM_SPRITES_ROW_COLUMN; i++)
	{
		for (float j = 1; j <= NUM_SPRITES_ROW_COLUMN; j++)
		{
			Vector2D SmurfLocation = Vector2D((mpSmurfBuffer->getBitmapWidth() - (mpSmurfBuffer->getBitmapWidth() * (i / NUM_SPRITES_ROW_COLUMN))), (mpSmurfBuffer->getBitmapHeight() - (mpSmurfBuffer->getBitmapHeight() * (j / NUM_SPRITES_ROW_COLUMN))));
			Sprite SmurfSprite = Sprite(mpSmurfBuffer->getBitmapWidth() / NUM_SPRITES_ROW_COLUMN, mpSmurfBuffer->getBitmapHeight() / NUM_SPRITES_ROW_COLUMN, SmurfLocation, mpSmurfBuffer);
			mpSmurfAnimation->addSprite(SmurfSprite);

			Vector2D DeanLocation = Vector2D((mpDeanBuffer->getBitmapWidth() - (mpDeanBuffer->getBitmapWidth() * (i / NUM_SPRITES_ROW_COLUMN))), (mpDeanBuffer->getBitmapHeight() - (mpDeanBuffer->getBitmapHeight() * (j / NUM_SPRITES_ROW_COLUMN))));
			Sprite DeanSprite = Sprite(mpDeanBuffer->getBitmapWidth() / NUM_SPRITES_ROW_COLUMN, mpDeanBuffer->getBitmapHeight() / NUM_SPRITES_ROW_COLUMN, DeanLocation, mpDeanBuffer);
			mpDeanAnimation->addSprite(DeanSprite);
		}
	}

	mpUnit = new Unit(mCenterLocation);

	mpUnit->setAnimation(mpSmurfAnimation);

	mpGameTimer = new Timer;

	mpPerformanceTracker = new PerformanceTracker;

}

void Game::cleanUp()
{
	delete mpPerformanceTracker;
	delete mpGameTimer;
	delete mpUnit;
	delete mpDeanAnimation;
	delete mpSmurfAnimation;
	delete mpSmurfBuffer;
	delete mpDeanBuffer;
	delete mpWoodsSprite;
	delete mpWoodsBuffer;
	delete mpInputSystem;
	delete mpGraphicsSystem;
	
}

void Game::doLoop()
{
	const float WOODS_IMAGE_SCALE = .5;

	while (mGameContinue)
	{
		mpPerformanceTracker->clearTracker("loop");
		mpPerformanceTracker->startTracking("loop");
		mpGameTimer->start();

		// left mouse button down
		if (mpInputSystem->getMouseState(mpInputSystem->LEFT_MOUSE))
		{
			mpUnit->setLocation(mpInputSystem->getMousePosition());
		} 
		// F key down
		else if (mpInputSystem->getKeyState(mpInputSystem->F_KEY))
		{
			mpUnit->getAnimation()->speedUpAnimation();
		} 
		// S key down
		else if (mpInputSystem->getKeyState(mpInputSystem->S_KEY))
		{
			mpUnit->getAnimation()->slowDownAnimation();
		} 
		// enter key down
		else if (mpInputSystem->getKeyState(mpInputSystem->ENTER_KEY))
		{
			if (mpUnit->getAnimation() == mpSmurfAnimation) 
			{
				mpUnit->setAnimation(mpDeanAnimation);
			}
			else 
			{
				mpUnit->setAnimation(mpSmurfAnimation);
			}
		} 
		// escape key down
		else if (mpInputSystem->getKeyState(mpInputSystem->ESCAPE_KEY))
		{
			mGameContinue = false;
		}

		mpGraphicsSystem->draw(mZeroZeroLocation, *mpWoodsSprite, WOODS_IMAGE_SCALE);

		mpGraphicsSystem->draw(mpUnit->getLocation(), mpUnit->getAnimation()->getCurrentSprite());

		mpGraphicsSystem->flip();

		mpUnit->update(mGamePauseTime);

		mpGameTimer->sleepUntilElapsed(mGamePauseTime);

		mpPerformanceTracker->stopTracking("loop");
		cout << mpPerformanceTracker->getElapsedTime("loop") << endl;
	}
}