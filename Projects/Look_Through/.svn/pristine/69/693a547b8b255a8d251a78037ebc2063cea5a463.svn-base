#include "GraphicsSystem.h"

GraphicsSystem::GraphicsSystem(int width, int height) 
{
	init();

	display = al_create_display(width, height);
	assert(display);

	backBuffer = new GraphicsBuffer(al_get_backbuffer(display));
}

GraphicsSystem::~GraphicsSystem() 
{
	al_destroy_display(display);

	delete backBuffer;
}

bool GraphicsSystem::init() 
{
	if (!al_init())
	{
		cout << "error initting Allegro\n";
		system("pause");
		return 1;
	}
	if (!al_init_image_addon())
	{
		cout << "error - Image Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_font_addon())
	{
		cout << "error - Font Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_ttf_addon())
	{
		cout << "error - TTF Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_primitives_addon())
	{
		cout << "error - primitives Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_install_audio())
	{
		cout << "error - Audio Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_acodec_addon())
	{
		cout << "error - Audio Codec Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_reserve_samples(1))
	{
		cout << "error - samples not reserved\n";
		system("pause");
		return 1;
	}

	return 0;
}

void GraphicsSystem::draw(int x, int y, Sprite spr, float scale) 
{
	al_set_target_bitmap(al_get_backbuffer(display));
	al_draw_scaled_bitmap(spr.getBuffer()->pBitmap, spr.getX(), spr.getY(), spr.getWidth(), spr.getHeight(), x, y, spr.getWidth() * scale, spr.getHeight() * scale, 0);
}

void GraphicsSystem::draw(GraphicsBuffer* target, int x, int y, Sprite spr, float scale) 
{
	al_set_target_bitmap(target->pBitmap);
	al_draw_scaled_bitmap(spr.getBuffer()->pBitmap, spr.getX(), spr.getY(), spr.getWidth(), spr.getHeight(), x, y, spr.getWidth() * scale, spr.getHeight() * scale, 0);
}

void GraphicsSystem::writeText(int x, int y, Font* fnt, Color clr, string text) 
{
	al_set_target_bitmap(al_get_backbuffer(display));
	al_draw_text(fnt->getFont(), clr.getColor(), x, y, ALLEGRO_ALIGN_LEFT, text.c_str());
}

void GraphicsSystem::writeText(GraphicsBuffer* target, int x, int y, Font* fnt, Color clr, string text) 
{
	al_set_target_bitmap(target->pBitmap);
	al_draw_text(fnt->getFont(), clr.getColor(), x, y, ALLEGRO_ALIGN_LEFT, text.c_str());
}

void GraphicsSystem::saveBuffer(GraphicsBuffer* toSave, string filename) 
{
	al_save_bitmap(filename.c_str(), toSave->pBitmap);
}