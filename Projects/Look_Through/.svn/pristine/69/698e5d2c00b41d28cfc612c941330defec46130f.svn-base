#include "GraphicsSystem.h"


GraphicsSystem::GraphicsSystem(int windowWidth, int windowHeight)
{
	mpDisplay = al_create_display(windowWidth, windowHeight);
	assert(mpDisplay);
	mpBackBuffer = new GraphicsBuffer(al_get_backbuffer(mpDisplay));
}


GraphicsSystem::~GraphicsSystem()
{

}


void GraphicsSystem::draw(ALLEGRO_BITMAP* bitmap, Vector2D pos, Sprite sprite, Vector2D scale)
{
	int sourceWidth = al_get_bitmap_width(bitmap);
	int sourceHeight = al_get_bitmap_height(bitmap);

	ALLEGRO_BITMAP* ogBitmap = al_get_target_bitmap();
	al_set_target_bitmap(bitmap);

	al_draw_scaled_bitmap(sprite.getBuffer()->getBitmap(), sprite.getSourcePos().getX(), sprite.getSourcePos().getY(), sprite.getWidth(),
		sprite.getHeight(), pos.getX(), pos.getY(), sprite.getWidth() * scale.getX(), sprite.getHeight() * scale.getY(), 0);

	al_set_target_bitmap(ogBitmap);
}


void GraphicsSystem::writeText(ALLEGRO_BITMAP* bitmap, Vector2D pos, Font* font, Color color, std::string text, int alignment = ALLEGRO_ALIGN_LEFT)
{
	ALLEGRO_BITMAP* ogBitmap = al_get_target_bitmap();
	al_set_target_bitmap(bitmap);

	al_draw_text(*font, colorToAllegroColor(color), pos.getX(), pos.getY(), alignment, text.c_str());

	al_set_target_bitmap(ogBitmap);
}


ALLEGRO_COLOR GraphicsSystem::colorToAllegroColor(Color col)
{
	return al_map_rgba(col.r, col.g, col.b, col.a);
}


Color GraphicsSystem::allegroColorToColor(ALLEGRO_COLOR col)
{
	return Color(col.r, col.g, col.b, col.a);
}


int GraphicsSystem::init()
{
	if (!al_init())
	{
		std::cout << "error initting Allegro\n";
		system("pause");
		return 1;
	}
	if (!al_init_image_addon())
	{
		std::cout << "error - Image Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_font_addon())
	{
		std::cout << "error - Font Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_ttf_addon())
	{
		std::cout << "error - TTF Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_primitives_addon())
	{
		std::cout << "error - primitives Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_install_audio())
	{
		std::cout << "error - Audio Add-on not initted\n";
		system("pause");
		//return 1;
	}
	if (!al_init_acodec_addon())
	{
		std::cout << "error - Audio Codec Add-on not initted\n";
		system("pause");
		//return 1;
	}
	if (!al_reserve_samples(1))
	{
		std::cout << "error - samples not reserved\n";
		system("pause");
		//return 1;
	}

	return 0;
}


void GraphicsSystem::cleanup()
{
	delete mpBackBuffer;
	al_destroy_display(mpDisplay);
}


void GraphicsSystem::flip()
{
	al_flip_display();
}


void GraphicsSystem::draw(Vector2D pos, Sprite sprite, Vector2D scale)
{
	draw(mpBackBuffer, pos, sprite, scale);
}


void GraphicsSystem::draw(GraphicsBuffer* graphicsBuffer, Vector2D pos, Sprite sprite, Vector2D scale)
{
	draw(graphicsBuffer->mpBitmap, pos, sprite, scale);

}


void GraphicsSystem::writeText(Vector2D pos, Font* font, Color color, std::string text, int alignment)
{
	writeText(al_get_backbuffer(mpDisplay), pos, font, color, text, alignment);
}


void GraphicsSystem::writeText(GraphicsBuffer* graphicsBuffer, Vector2D pos, Font* font, Color color, std::string text, int alignment)
{
	writeText(graphicsBuffer->getBitmap(), pos, font, color, text, alignment);
}


void GraphicsSystem::saveBuffer(GraphicsBuffer* graphicsBuffer, std::string fileName)
{
	al_save_bitmap(fileName.c_str(), graphicsBuffer->getBitmap());
}
