/*
Author: Max Cohen
Class: GPR-250 <Section 01>
Assignment: Assignment 1
Certification of Authenticity:
I certify that this assignment is entirely my own work.
*/

#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

#include <iostream>
#include <cassert>
#include <string>
#include <random>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>

#include "GraphicsBuffer.h"
#include "GraphicsSystem.h"
#include "Font.h"
#include "Sprite.h"
#include "Color.h"

using namespace std;

int main()
{
	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;

	const string INIT_TRACKER_NAME = "init";
	const string DRAW_TRACKER_NAME = "draw";
	const string WAIT_TRACKER_NAME = "wait";

	//initialize random number generator
	srand(time(NULL));

	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;

	GraphicsSystem* mainDisplay = new GraphicsSystem(DISP_WIDTH, DISP_HEIGHT);

	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string BACKGROUND_FILENAME = "steps.png";
	const string QUIMBY_FILENAME = "mayor_quimby.png";
	const string SMURF_FILENAME = "smurf_sprites.png";
	const string FONT_FILENAME = "cour.ttf";
	const int FONT_SIZE = 48;
	const double SLEEP_TIME = 5.0;
	const float SCALE_FACTOR = 0.67f;

	const int SMURF_ROWS = 4;
	const int SMURF_COLS = 4;
	const int SMURF_SIZE = 60;

	Font* cour_font = new Font(ASSET_PATH + FONT_FILENAME, FONT_SIZE);
	const Color RED = Color(255, 0, 0);
	const Color BLACK = Color(0, 0, 0);

	GraphicsBuffer* background = new GraphicsBuffer(ASSET_PATH + BACKGROUND_FILENAME);
	GraphicsBuffer* quimby = new GraphicsBuffer(ASSET_PATH + QUIMBY_FILENAME);
	GraphicsBuffer* smurfs = new GraphicsBuffer(ASSET_PATH + SMURF_FILENAME);
	GraphicsBuffer* memMap = new GraphicsBuffer(800, 600);
	memMap->setColor(RED);

	Sprite quimbySpr = Sprite(quimby, 0, 0);
	Sprite bgroundSpr = Sprite(background, 0, 0);
	Sprite redSpr = Sprite(memMap, 0, 0);
	Sprite smurfSpr[16];

	bool keepRunning = true;
	Timer timer;

	//draw stuff
	mainDisplay->draw(memMap, 0, 0, quimbySpr);
	mainDisplay->writeText(memMap, 20, 500, cour_font, BLACK, "Curse you Papa Smurf!");

	mainDisplay->draw(0, 0, bgroundSpr);
	mainDisplay->draw(133, 100, redSpr, SCALE_FACTOR);

	int randX, randY;

	for (int i = 0; i <	SMURF_ROWS; i++) 
	{
		for (int j = 0; j < SMURF_COLS; j++) 
		{
		randX = rand() % (DISP_WIDTH - SMURF_SIZE);
		randY = rand() % (DISP_HEIGHT - SMURF_SIZE);

		smurfSpr[i] = Sprite(smurfs, i * SMURF_SIZE, j * SMURF_SIZE, SMURF_SIZE, SMURF_SIZE);
		mainDisplay->draw(randX, randY, smurfSpr[i]);
		}
	}

	//save backbuffer + red
	mainDisplay->saveBuffer(mainDisplay->getBackBuffer(),"backbuffer.png");
	mainDisplay->saveBuffer(memMap, "redbuffer.png");

	//show what you have drawn
	mainDisplay->flip();

	timer.sleep(5000.0);

	pPerformanceTracker->stopTracking("loop");
	//cout << "Frame Took:" << pPerformanceTracker->getElapsedTime("loop") << " ms" << endl;

	pPerformanceTracker->clearTracker("loop");

	//delete objects
	delete cour_font;
	delete memMap;
	delete smurfs;
	delete quimby;
	delete background;
	delete mainDisplay;
	delete pPerformanceTracker;

	MemoryTracker::getInstance()->reportAllocations(cout);

	system("pause");
	return 0;
}