#include "Level.h"

Level::Level(string file, Sprite wall)
{
	mFilename = file;
	for (int i = 0; i < 16; i++)
	{
		for (int j = 0; j < 20; j++)
		{
			mWalls[i][j] = 0;
			mWallPos[i][j] = Vector2D(0, 0);
		}

	}
	mSnakeSpeed = 0;
	mStartSegments = 0;
	mWinSize = 0;
	mPointPerFood = 0;
	mNumSpeedUps = 0;
	mNumSlowDowns = 0;
	mNumBonusPoints = 0;
	mCurrentScore = 0;
	mCurrentFPS = 0;
	mCurrentTime = 0;
	mWallSprite = wall;
}

Level::~Level()
{
	clearLevel();
}

void Level::loadLevel()
{
	ifstream fin;
	fin.open(mFilename);
	mNumSpaces = 192;
	if (fin.is_open())
	{
		for (int i = 0; i < 16; i++)
		{
			for (int j = 0; j < 20; j++)
			{
				fin >> mWalls[i][j];
			}

		}
		fin >> mSnakeSpeed;
		fin >> mStartSegments;
		fin >> mWinSize;
		fin >> mPointPerFood;
		fin >> mNumSpeedUps;
		fin >> mNumSlowDowns;
		fin >> mNumBonusPoints;
	}
}

void Level::drawLevel(GraphicsSystem* display)
{
	int x, y;
	
	for (int i = 0; i < 16; i++)
	{
		for (int j = 0; j < 20; j++)
		{
			x = j * mWallSprite.getSize().getX();
			y = i * mWallSprite.getSize().getY();
			mWallPos[i][j] = Vector2D(x, y);
			if (mWalls[i][j] == 1)
			{
				
				display->draw(x, y, mWallSprite); 
				
			}
		}
	}
}

void Level::clearLevel()
{
	for (int i = 0; i < 16; i++)
	{
		for (int j = 0; j < 20; j++)
		{
			mWalls[i][j] = 0;
			mWallPos[i][j] = Vector2D(0, 0);
		}

	}
	mSnakeSpeed = 0;
	mStartSegments = 0;
	mWinSize = 0;
	mPointPerFood = 0;
	mNumSpeedUps = 0;
	mNumSlowDowns = 0;
	mNumBonusPoints = 0;
	mCurrentScore = 0;
	mCurrentFPS = 0;
	mCurrentTime = 0;
}

int Level::getWin()
{
	return mWinSize;
}

int Level::getSpeed()
{
	return mSnakeSpeed;
}

int Level::getStartSegments()
{
	return mStartSegments;
}


Vector2D Level::getWallPos(int i, int j)
{
	return mWallPos[i][j];
}

float Level::getTime()
{
	return mCurrentTime;
}

float Level::getFPS()
{
	return mCurrentFPS;
}

int Level::getScore()
{
	return mCurrentScore;
}

void Level::setTime(float time)
{
	mCurrentTime = time;
}

void Level::setFPS(float FPS)
{
	mCurrentFPS = FPS;
}

void Level::addScore(int Add)
{
	mCurrentScore += Add;
}

int Level::getSpeedUps()
{
	return mNumSpeedUps;
}

int Level::getSlowDowns()
{
	return mNumSlowDowns;
}

int Level::getBonusPoints()
{
	return mNumBonusPoints;
}

bool Level::isColliding(Vector2D snakePos)
{
	for (int i = 0; i < 16; i++)
	{
		for (int j = 0; j < 20; j++)
		{
			if (mWalls[i][j] == 1)
			{

				if (mWallPos[i][j] == snakePos)
				{
					return true;
				}
			}
		}

	}
	return false;
}