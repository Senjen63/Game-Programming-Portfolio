#pragma once

#include "InputEvents.h"
#include "PlayerInfo.h"

enum GameEventType
{
    GAME_CLOSE = NUM_MOUSE_EVENT_TYPES,
    GAME_START,
    GAME_OVER,
    NUM_GAME_EVENT_TYPES
};

enum PlayerEventType
{
    PLAYER_1_MOVE_START = NUM_GAME_EVENT_TYPES,
    PLAYER_1_MOVE_STOP,
    PLAYER_1_TURN_START,
    PLAYER_1_TURN_STOP,
    PLAYER_1_SHOOT,
    PLAYER_2_MOVE_START,
    PLAYER_2_MOVE_STOP,
    PLAYER_2_TURN_START,
    PLAYER_2_TURN_STOP,
    PLAYER_2_SHOOT,
    PLAYER_HIT,
    NUM_PLAYER_EVENT_TYPES
};

enum class TurnDirection
{
    INVALID = 0,
    RIGHT = 1,
    LEFT = -1,
};

enum class MoveDirection
{
    INVALID = 0,
    FORWARDS = 1,
    BACKWARDS = -1,
};

class GameEvent : public Event
{
public:
    GameEvent(GameEventType type);
    virtual ~GameEvent() {};
};

class PlayerTurnEvent : public Event
{
public:
    PlayerTurnEvent(PlayerEventType type, TurnDirection dir);
    virtual ~PlayerTurnEvent() {};

    TurnDirection getTurnDirection() const { return mDir; }

private:
    TurnDirection mDir;
};

class PlayerMoveEvent : public Event
{
public:
    PlayerMoveEvent(PlayerEventType type, MoveDirection dir);
    virtual ~PlayerMoveEvent() {};

    MoveDirection getDirection() const { return mDir; }

private:
    MoveDirection mDir;
};

class PlayerShootEvent : public Event
{
public:
    PlayerShootEvent(PlayerEventType type);
    virtual ~PlayerShootEvent() {};
};

class PlayerHitEvent : public Event
{
public:
    PlayerHitEvent(PlayerNumber playerNumber);
    virtual ~PlayerHitEvent() {};

    PlayerNumber getPlayerNumber() const { return mPlayerNumber; }

private:
    PlayerNumber mPlayerNumber;
};
