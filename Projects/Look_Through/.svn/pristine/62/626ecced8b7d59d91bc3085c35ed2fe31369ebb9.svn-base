#pragma once
#include "Sprite.h"
#include "Vector2D.h"
#include "AnimationBase.h"
#include <vector>

class Animation : public Trackable
{
public:
	Animation(double speed, AnimationBase* base);
	~Animation();

	void update(double elapsedTime);

	//sprites are stored in a vector that is looped through at a given speed
	Sprite* getCurrentSprite() { return mBase->mSpritesToUse[mCurrentFrame]; }
	int getCurrentFrame() { return mCurrentFrame; }

	//mutators
	void setBase(AnimationBase* newBase) { mBase = newBase; }
	void setSpeed(double newSpeed) { mSpeed = newSpeed; }

	//these update the values of every sprite in the animation at once
	void setPosition(float x, float y) { for (size_t i = 0; i < mBase->mSpritesToUse.size(); i++) { mBase->mSpritesToUse[i]->setPosition(x, y); } }
	void setPosition(Vector2D location) { for (size_t i = 0; i < mBase->mSpritesToUse.size(); i++) { mBase->mSpritesToUse[i]->setPosition(location.getX(), location.getY()); } }
	void setScale(float xScale, float yScale) { for (size_t i = 0; i < mBase->mSpritesToUse.size(); i++) { mBase->mSpritesToUse[i]->setScale(xScale, yScale); } }
	void setColor(Color newCol) { for (size_t i = 0; i < mBase->mSpritesToUse.size(); i++) { mBase->mSpritesToUse[i]->setColor(newCol); } }

	void enable() { mIsRunning = true; }
	void disable() { mIsRunning = false; }
	bool getEnabled() { return mIsRunning; }
	bool getIsFinished() { return mIsFinished; }

private:
	AnimationBase* mBase;

	int mCurrentFrame;
	double mTimeInFrame;
	double mSpeed;

	bool mIsRunning = true;
	bool mIsFinished = false;
};
