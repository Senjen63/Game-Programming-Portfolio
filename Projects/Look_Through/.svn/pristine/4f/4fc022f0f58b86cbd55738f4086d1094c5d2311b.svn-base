#include <iostream>
#include <cassert>
#include <string>
#include <map>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>

#include "UnitManager.h"
#include "Unit.h"

//----------------------------------------Unit Manager----------------------------------------

UnitManager::UnitManager()
{
	Clear();
}

UnitManager::~UnitManager()
{
	Clear();
	std::vector<Unit*>().swap(unitVector); //this swap makes unitVector empty, and temp unitVector is destroyed
}

void UnitManager::UpdateAll()
{
	for (int i = 0; i < unitVector.size(); i++) {
		getUnit(i)->update();
	}
}

void UnitManager::deleteUnit(int unitPos)
{
	delete unitVector[unitPos];
	unitVector.erase(unitVector.begin() + unitPos);
}

void UnitManager::DrawAll()
{
	for (int i = 0; i < unitVector.size(); i++) {
		getUnit(i)->draw();
	}
}