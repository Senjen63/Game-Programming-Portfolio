#include "Animation.h"
#include "Game.h"
#include "UnitManager.h"
#include "Unit.h"


UnitManager::UnitManager()
{
	mNumUnits = 0;
}


UnitManager::~UnitManager()
{
	CleanUp();
}


void UnitManager::CleanUp()
{
	for (int i = 0; i < mNumUnits; i++)
	{
		Unit* pUnit = mpUnits[i];
		delete pUnit;
	}
	mNumUnits = 0;
	mpUnits.clear();
}


void UnitManager::CreateUnit()
{
	//create unit
	Unit* pUnit = new Unit();
	//manage the unit
	mpUnits.push_back(pUnit);
	mNumUnits++;
}


void UnitManager::SetUnitPos(Vector2D& position)
{
	mpUnits[mNumUnits - 1]->SetPosition(position);
}


void UnitManager::DestroyUnit(Unit* pUnitToDestroy)
{
	for (int i = 0; i < mNumUnits; i++)
	{
		Unit* pUnit = mpUnits[i];
		if (pUnit == pUnitToDestroy)
		{
			delete pUnit;
			mpUnits.erase(mpUnits.begin() + i);
			mNumUnits--;
			break;
		}

	}

}


void UnitManager::DestroyUnits(Vector2D mousePos)
{
	Vector2D temp;
	float distance;

	for (int i = 0; i < mNumUnits; i++)
	{
		Unit* pUnit = mpUnits[i];

		distance = temp.getDistanceBetween(pUnit->GetPosition(), mousePos);

		if (distance <= (pUnit->CurrentSprite()->getWidth() / 2))
		{
			DestroyUnit(pUnit);
		}

	}
}


void UnitManager::Update(float elapsedTime)
{
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->Update(elapsedTime);
	}
}


void UnitManager::UpdateTime(float amount)
{
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->SetTime(amount);
	}
}


void UnitManager::DoAnimation()
{
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->TogglePause();
	}
}


void UnitManager::Draw(GraphicsSystem* pGraphicsSystem)
{
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->Draw(pGraphicsSystem);
	}

}


int UnitManager::GetNumUnits()
{
	return mNumUnits;
}


Unit* UnitManager::GetUnit()
{
	if (mpUnits.size() > 0)
		return mpUnits[0];
	else
		return nullptr;
}


Unit* UnitManager::GetUnit(int index)
{
	if (index <= mNumUnits)
		return mpUnits[index];
	else
		return NULL;
}


Unit* UnitManager::GetLastUnit()
{
	return mpUnits[mNumUnits];
}


Vector2D UnitManager::GetPosition(int index)
{
	return mpUnits[index]->GetPosition();
}


void UnitManager::SetLastUnit()
{
	mpUnits[mNumUnits - 1]->SwitchAnimation();
}