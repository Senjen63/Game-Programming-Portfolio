#pragma once
#include "AnimationBase.h"
#include "Sound.h"
#include "Music.h"
#include <unordered_map>

typedef std::string TextureKey;
typedef std::string SpriteKey;
typedef std::string AnimationKey;
typedef std::string SoundKey;

class AssetManager : public Trackable
{
public:
	AssetManager();
	~AssetManager() { cleanup(); }

	void cleanup(); //clears all sprites, animations, sounds

	//creation and deletion
	void createTexture(std::string filename, const TextureKey& key);
	void createSprite(Texture* tex, const SpriteKey& key, int xPos = 0, int yPos = 0, float xScale = 1, float yScale = 1); // new sprite from texture
	void createSprite(Texture* tex, const SpriteKey& key, int x, int y, int width, int height, int xPos = 0, int yPos = 0, float xScale = 1, float yScale = 1); // new sprite from part of texture
	void createAnimation(const AnimationKey& key, bool isLooping = true);
	void createSound(std::string filename, const SoundKey& key);

	void deleteTexture(const TextureKey& key);
	void deleteSprite(const SpriteKey& key);
	void deleteAnimation(const AnimationKey& key);
	void deleteSound(const SoundKey& key);

	//accessors
	Texture* getTexture(const TextureKey& key) const;
	Sprite* getSprite(const SpriteKey& key) const;
	AnimationBase* getAnimation(const AnimationKey& key) const;
	Sound* getSound(const SoundKey& key) const;

private:
	std::unordered_map<TextureKey, Texture*> mTextureMap;
	std::unordered_map<SpriteKey, Sprite*> mSpriteMap;
	std::unordered_map<AnimationKey, AnimationBase*> mAnimationMap;
	std::unordered_map<SoundKey, Sound*> mSoundMap;

	//THIS ONE IS SPECIAL -- OTHER FUNCTIONS DO NOT TOUCH IT (assumes all sounds are unique)
	std::unordered_map<SoundKey, SoundBuffer*> mSoundBufferMap;
};
