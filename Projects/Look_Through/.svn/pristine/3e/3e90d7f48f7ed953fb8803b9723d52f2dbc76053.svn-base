#include "AudioManager.h"

#include <fstream>
#include <string>
#include <cassert>
#include "Game.h"

AudioManager::AudioManager(const std::string& nameFilePath) : 
    mNameFilePath(nameFilePath)
{}

void AudioManager::init()
{
    // Read in file names and create snippets 
    std::ifstream fin;
    fin.open(mNameFilePath);
    assert(fin.good());
    fin >> *this;
    fin.close();
}

void AudioManager::play(SoundType type)
{
    int repeatNum = 0;

    switch (type)
    {
    case SoundType::MUSIC:
        if (mMuteMusic) return;
        repeatNum = -1;
        break;

    case SoundType::TANK_SHOOT:
    case SoundType::TANK_DESTROY:
        if (mMuteEffects) return;
        break;
    }

    int channel = Game::getInstance()->getAudioSystem()->play(mSounds[(int)type], repeatNum);

    if (type == SoundType::MUSIC)
        mMusicChannel = channel;
}

void AudioManager::setMuteEffects(bool muted)
{
    mMuteEffects = muted;
}

void AudioManager::setMuteMusic(bool muted)
{
    // If we are changing from playing to muted 
    if (muted && !mMuteMusic)
    {
        Game::getInstance()->getAudioSystem()->stop(mMusicChannel);
        mMusicChannel = -1;
    }
    else if (!muted && mMuteMusic)
    {
        mMuteMusic = muted;
        play(SoundType::MUSIC);
    }

    mMuteMusic = muted;
}

std::istream& operator>>(std::istream& is, AudioManager& am)
{
    std::string line;
    int volume = -1;
    while (!is.eof())
    {
        is.ignore(1000, ':');
        is.ignore(1, ' '); // There might be an extra space we don't want 
        getline(is, line);
        assert(!line.empty());

        is.ignore(1000, ':');
        is >> volume;
        assert(volume >= 0 && volume < 128); // Needs to fit within an unsigned char 

        am.mSounds.emplace_back(line, (unsigned char)volume);
    }

    return is;
}
