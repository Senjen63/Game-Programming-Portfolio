#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

#include <iostream>
#include <cassert>
#include <string>

#include <Vector2D.h>
#include <Timer.h>

#include "GraphicsSystem.h"
#include "GraphicsBuffer.h"
#include "Color.h"
#include "Sprite.h"
#include "Font.h"

#include <time.h>

using namespace std;

int main()
{
	srand(time(NULL));

	if (!al_init())
	{
		cout << "error initting Allegro\n";
		system("pause");
		return 1;
	}
	if (!al_init_image_addon())
	{
		cout << "error - Image Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_font_addon())
	{
		cout << "error - Font Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_ttf_addon())
	{
		cout << "error - TTF Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_init_primitives_addon())
	{
		cout << "error - primitives Add-on not initted\n";
		system("pause");
		return 1;
	}
	if (!al_install_audio())
	{
		cout << "error - Audio Add-on not initted\n";
		system("pause");
		//return 1;
	}
	if (!al_init_acodec_addon())
	{
		cout << "error - Audio Codec Add-on not initted\n";
		system("pause");
		//return 1;
	}
	if (!al_reserve_samples(1))
	{
		cout << "error - samples not reserved\n";
		system("pause");
		//return 1;
	}


	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;

	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string BACKGROUND_FILENAME = "steps.png";
	const string QUIMBY_FILENAME = "mayor_quimby.png";
	const string SMURF_FILENAME = "smurf_sprites.png";
	const string FONT_FILENAME = "cour.ttf";
	const int FONT_SIZE = 55;
	const double SLEEP_TIME = 5.0;
	const int SMURF_OFFSET = 60;

	Color red = Color(255, 0, 0);
	Color black = Color(0, 0, 0);

	GraphicsSystem* pDisplay = new GraphicsSystem(DISP_HEIGHT, DISP_WIDTH);
	GraphicsBuffer* pSteps = new GraphicsBuffer(ASSET_PATH + BACKGROUND_FILENAME);
	GraphicsBuffer* pSmurf = new GraphicsBuffer(ASSET_PATH + SMURF_FILENAME);
	GraphicsBuffer* pQuimby = new GraphicsBuffer(ASSET_PATH + QUIMBY_FILENAME);
	GraphicsBuffer* pRedBuffer = new GraphicsBuffer(red, DISP_HEIGHT, DISP_WIDTH);

	Font* pFont = new Font((ASSET_PATH + FONT_FILENAME), FONT_SIZE);

	Vector2D textLocation;
	textLocation.setX(133);
	textLocation.setY(100);
	Vector2D zero;
	zero.setX(0);
	zero.setY(0);

	pDisplay->draw(pSteps);
	pDisplay->draw(pRedBuffer, pQuimby, zero, 1);
	pDisplay->writeText(pRedBuffer, zero, pFont, black, "Curse you Papa Smurf!");
	pDisplay->draw(pRedBuffer, textLocation, 0.66666);	
	Vector2D mapPos;

	//double loop to get all parts of the smurf spritesheet. 
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			mapPos.setX(i * SMURF_OFFSET);
			mapPos.setY(j * 60);
			Sprite* pSmurfs = new Sprite(pSmurf, mapPos, SMURF_OFFSET, SMURF_OFFSET);
			pDisplay->draw(mapPos, pSmurfs, rand() % (DISP_WIDTH - SMURF_OFFSET), rand() % (DISP_HEIGHT - SMURF_OFFSET));
			delete pSmurfs;
		}
	}

	pDisplay->saveBuffer(pDisplay->getBitmap(), "BackBuffer.jpg");
	pDisplay->saveBuffer(pRedBuffer->getBitmap(), "FrontBuffer.jpg");

	Timer timer;

	pDisplay->flip();

	timer.sleep(5000.0);
	//delete everything!!
	delete pDisplay;
	delete pSteps;
	delete pSmurf;
	delete pQuimby;
	delete pRedBuffer;
	delete pFont;

	system("pause");
}