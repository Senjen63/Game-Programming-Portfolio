#include "Food.h"

using namespace std;

/// <summary>
/// Makes all the weights in the vector sum to 1 
/// </summary>
void Food::normalizeWieghts(const std::vector<Food*>& foods)
{
    // Get the total weight of the vector 
    float totalWeight = 0;
    for (const Food* food : foods)
    {
        totalWeight += food->getWeight();
    }

    if (totalWeight <= 0)
        throw exception("totalWeight summed to 0 or less! Each food in the vector should have a positive non-zero weight. ");

    // Divide each weight by the total weight so that they will all sum to 1 
    for (Food* food : foods)
    {
        food->mWeight /= totalWeight;
    }
}

/// <summary>
/// Make sure to normalizeWeights first! 
/// </summary>
const Food* Food::pickRandomFood(const std::vector<Food*>& foods)
{
    // Get number between 0 and 1 
    float num = (float)rand() / (float)RAND_MAX;

    // Find which food this random number is for based on weight 
    // Assume all weights in foods sum to 1 
    for (const Food* food : foods)
    {
        if (num < food->getWeight())
            return food;

        num -= food->getWeight();
    }

    return nullptr; // If no foods found, return an empty food 
}

FoodType Food::strToEnum(const std::string& str)
{
    if (str == "EMPTY")
        return FoodType::EMPTY;
    if (str == "GROW")
        return FoodType::GROW;
    if (str == "POINTS")
        return FoodType::POINTS;
    if (str == "SPEED_UP")
        return FoodType::SPEED_UP;
    if (str == "SLOW_DOWN")
        return FoodType::SLOW_DOWN;

    return FoodType::INVALID;
}

Food::Food(FoodType type, float weight, int pointsAmount) :
    mType(type), mWeight(weight), mPointsAmount(pointsAmount)
{
    if (mWeight <= 0)
        throw invalid_argument("weight can not be <= 0! ");
}

GrowFood::GrowFood(float weight, int pointsAmount, int growAmount) :
    Food(FoodType::GROW, weight, pointsAmount), mGrowAmount(growAmount)
{}

PointsFood::PointsFood(float weight, int pointsAmount) : 
    Food(FoodType::POINTS, weight, pointsAmount)
{}

SpeedFood::SpeedFood(float weight, float deltaTime, int pointsAmount) :
    Food(deltaTime < 0 ? FoodType::SPEED_UP : FoodType::SLOW_DOWN, weight, pointsAmount), mDeltaTime(deltaTime)
{}

EmptyFood::EmptyFood(float weight) : 
    Food(FoodType::EMPTY, weight, 0)
{}
