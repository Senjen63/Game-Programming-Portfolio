#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

#include <iostream>
#include <cassert>
#include <string>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>

#include "GraphicsSystem.h"
#include "GraphicsBuffer.h"
#include "Color.h"
#include "Sprite.h"
#include "Font.h"

#include <time.h>

using namespace std;

int main()
{
	srand(time(NULL));
	
	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;

	const string INIT_TRACKER_NAME = "init";
	const string DRAW_TRACKER_NAME = "draw";
	const string WAIT_TRACKER_NAME = "wait";

	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;

	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string BACKGROUND_FILENAME = "steps.png";
	const string QUIMBY_FILENAME = "mayor_quimby.png";
	const string SMURF_FILENAME = "smurf_sprites.png";
	const string FONT_FILENAME = "cour.ttf";
	const int FONT_SIZE = 60;
	const double SLEEP_TIME = 5.0;

	GraphicsSystem* pDisplay = new GraphicsSystem();

	pDisplay->init(DISP_HEIGHT, DISP_WIDTH);

	Color redCol = Color(255, 0, 0);
	Color blackCol = Color(0, 0, 0);

	GraphicsBuffer* pSteps = new GraphicsBuffer(ASSET_PATH + BACKGROUND_FILENAME);
	GraphicsBuffer* pSmurf = new GraphicsBuffer(ASSET_PATH + SMURF_FILENAME);
	GraphicsBuffer* pQuimby = new GraphicsBuffer(ASSET_PATH + QUIMBY_FILENAME);
	GraphicsBuffer* pRedBuffer = new GraphicsBuffer(redCol, DISP_HEIGHT, DISP_WIDTH);

	Font* pFont = new Font((ASSET_PATH + FONT_FILENAME), FONT_SIZE);

	Vector2D textLoc;
	textLoc.setX(133);
	textLoc.setY(100);

	Vector2D zero;
	zero.setX(0);
	zero.setY(0);

	pDisplay->draw(pSteps);
	pDisplay->draw(pRedBuffer, pQuimby, zero, 1);
	pDisplay->writeText(pRedBuffer, zero, pFont, blackCol, "Curse you Papa Smurf!");
	pDisplay->draw(pRedBuffer, textLoc, 0.66666);

	int numSmurfs = 16;
	Vector2D mapPos;

	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			mapPos.setX(i * 60);
			mapPos.setY(j * 60);

			Sprite* pSmurfs = new Sprite(pSmurf, mapPos, 60, 60);
			pDisplay->draw(mapPos, pSmurfs, DISP_WIDTH, DISP_HEIGHT);

			delete pSmurfs;
		}
	}

	pDisplay->saveBuffer(pDisplay->getBitmap(), "backbuffer.jpg");
	pDisplay->saveBuffer(pRedBuffer->getBitmap(), "redbuffer.jpg");

	bool keepRunning = true;
	Timer timer;

	pDisplay->flip();

	timer.sleep(5000.0);

	pPerformanceTracker->stopTracking("loop");
	//cout << "Frame Took:" << pPerformanceTracker->getElapsedTime("loop") << " ms" << endl;

	pPerformanceTracker->clearTracker("loop");
	
	delete pDisplay;
	delete pSteps;
	delete pSmurf;
	delete pQuimby;
	delete pRedBuffer;
	delete pFont;

	delete pPerformanceTracker;
	MemoryTracker::getInstance()->reportAllocations(cout);

	system("pause");

	return 0;
}