/*
Data
• The allegro display

Functions
• Constructor/Destructor
• Init/Cleanup
• Accessors (height, width, back buffer)
• Flip – call the al_flip function to display what is in the Back Buffer

Could be static or non-static functions (up to you):
• Draw (target loc, Sprite, scale  (default to 1.0)  ) - draw to current backbuffer
• Draw(target graphics buffer, target loc, Sprite, scale  (default to 1.0) ) - draw to given

GraphicsBuffer
• WriteText(target loc, Font, Color, text) – write to current backbuffer
• WriteText(target graphics buffer, target loc, Font, Color, text) – write to given GraphicsBuffer
• SaveBuffer(buffer to save, filename) – save the contents of a GraphicsBuffer to a file

*/
#pragma once

#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

#include <iostream>
#include <cassert>
#include <string>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>

#include <Trackable.h>

#include "Font.h"
#include "Color.h"
#include "GraphicsBuffer.h"
#include "Sprite.h"
#include <iostream>
#include <string>
using std::string;

class GraphicsSystem : public Trackable
{
private:
	ALLEGRO_DISPLAY* mpDisplay;
	int mWidth = 800;
	int mHeight = 600;
	GraphicsBuffer* mpBackBuffer;
public:
	GraphicsSystem(int width, int height);
	~GraphicsSystem();
	
	bool Init();
	void Cleanup();
	void Flip();


	//USED FOR STEPS
	//draw for gb, simple
	void draw(GraphicsBuffer* pBuffer);

	//USED FOR RANDOM SMURFS
	//draw for sprite
	void draw(Vector2D location, Sprite* sprite, Vector2D destination);

	//USED FOR RED SQUARE
	//draw for gb
	void draw(GraphicsBuffer* pBuffer, float locationX, float locationY, float xScale, float yScale);

	//USED FOR QUIMBY
	//draw for gb to gb
	void draw(GraphicsBuffer* pTarget, GraphicsBuffer* pBuffer, Vector2D location, float xScale, float yScale);

	//UNUSED
	//draw for gb & sprite (allows for scaling, drawing to a bitmap owned by passed graphics buffer)
	void draw(GraphicsBuffer* pGraphicsBuffer, Vector2D location, Sprite* pSprite, float xScale, float yScale);


	/*target loc, Font, Color, text*/
	void writeText(Vector2D targetLoc, Font* pFont, Color pColor, string printText);
	
	//USED FOR CURSING
	/*target graphics buffer, target loc, Font, Color, text*/
	void writeText(GraphicsBuffer* pTargetBuffer, Vector2D targetLoc, Font* pFont, Color pColor, string printText);
	

	bool SaveBuffer(string filename, ALLEGRO_BITMAP* pSaveBuffer);/*buffer to save, filename*/

	//getters//height, width, back buffer
	int getHeight();
	int getWidth();
	GraphicsBuffer* getBuffer();

};