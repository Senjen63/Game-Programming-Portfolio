#include "Hud.h"

Hud::Hud()
{
	mpGraphicsSystem = nullptr;

	mpEventSystem = nullptr;

	mpFont = nullptr;

	mpScoreBuffer = nullptr;
	mpFPSBuffer = nullptr;
	mpTimeBuffer = nullptr;

	mFPS = 0.0;
	mTime = 0.0;
	mScore = 0;
}

Hud::Hud(GraphicsSystem* pSystem, Font* pFont)
{
	mpGraphicsSystem = pSystem;

	mpEventSystem = nullptr;

	mpFont = pFont;

	mpScoreBuffer = nullptr;
	mpFPSBuffer = nullptr;
	mpTimeBuffer = nullptr;

	mFPS = 0.0;
	mTime = 0.0;
	mScore = 0;
}

Hud::~Hud()
{
	cleanup();
}

void Hud::init()
{
	mpEventSystem = EventSystem::getInstance();
	mpEventSystem->init();

	mpScoreBuffer = new GraphicsBuffer(mBlack, HUD_BUFFER_HEIGHT, HUD_BUFFER_WIDTH);
	mpFPSBuffer = new GraphicsBuffer(mBlack, HUD_BUFFER_HEIGHT, HUD_BUFFER_WIDTH);
	mpTimeBuffer = new GraphicsBuffer(mBlack, HUD_BUFFER_HEIGHT, HUD_BUFFER_WIDTH);

	mpEventSystem->addListener((EventType)FPS_EVENT, this);
	mpEventSystem->addListener((EventType)TIME_EVENT, this);
	mpEventSystem->addListener((EventType)SCORE_EVENT, this);
}

void Hud::cleanup()
{
	mpEventSystem->cleanup();

	delete mpScoreBuffer;
	delete mpFPSBuffer;
	delete mpTimeBuffer;
}

void Hud::handleEvent(const Event& currentEvent)
{
	if (currentEvent.getType() == FPS_EVENT)
	{
		const FpsEvent& fpsEvent = static_cast<const FpsEvent&>(currentEvent);
		mFPS = fpsEvent.getFps();
	}

	if (currentEvent.getType() == SCORE_EVENT)
	{
		const ScoreEvent& scoreEvent = static_cast<const ScoreEvent&>(currentEvent);
		mScore = scoreEvent.getScore();
	}

	if (currentEvent.getType() == TIME_EVENT)
	{
		const TimeEvent& timeEvent = static_cast<const TimeEvent&>(currentEvent);
		mTime = timeEvent.getTime();
	}
}

void Hud::display()
{
	mpFPSBuffer->clearToColor(mBlack);
	mpGraphicsSystem->writeText(mpFPSBuffer, Vector2D(HUD_BUFFER_WIDTH / 2, 0), mpFont, mWhite, "FPS: " + to_string(mFPS));
	mpGraphicsSystem->draw(mpFPSBuffer, Vector2D(0, 0), 1);

	mpScoreBuffer->clearToColor(mBlack);
	mpGraphicsSystem->writeText(mpScoreBuffer, Vector2D(HUD_BUFFER_WIDTH / 2, 0), mpFont, mWhite, "Score: " + to_string(mScore));
	mpGraphicsSystem->draw(mpScoreBuffer, Vector2D((mpGraphicsSystem->getWidth() - mpScoreBuffer->getWidth()) / 2, 0), 1);

	mpTimeBuffer->clearToColor(mBlack);
	mpGraphicsSystem->writeText(mpTimeBuffer, Vector2D(HUD_BUFFER_WIDTH / 2, 0), mpFont, mWhite, "Time: " + to_string(mTime));
	mpGraphicsSystem->draw(mpTimeBuffer, Vector2D(mpGraphicsSystem->getWidth() - mpTimeBuffer->getWidth(), 0), 1);
}
