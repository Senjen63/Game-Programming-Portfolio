#include "Game.h"

Game::Game()
{
	mpDisplay = nullptr;
	mInputSystem.init();

	mpWoods = nullptr;
	mpSmurfs = nullptr;
	mpDean = nullptr;

	mpSmurfsAnim = nullptr;
	mpDeanAnim = nullptr;
	mpUnit = nullptr;
}

Game::~Game()
{
	cleanup();
}

void Game::init(int width, int height)
{
	mpDisplay->init();
	mpDisplay = new GraphicsSystem(width, height);

	mpWoods = new GraphicsBuffer(ASSET_PATH + BACKGROUND_FILENAME);
	mpSmurfs = new GraphicsBuffer(ASSET_PATH + SMURFS_FILENAME);
	mpDean = new GraphicsBuffer(ASSET_PATH + DEAN_FILENAME);

	mpSmurfsAnim = new Animation(mpSmurfs, NUM_FRAMES, STARTING_TIME, true);
	mpDeanAnim = new Animation(mpDean, NUM_FRAMES, STARTING_TIME, true);
	mpUnit = new Unit(Vector2D(0, 0), mpSmurfsAnim, mpDeanAnim);
}

void Game::cleanup()
{
	delete mpWoods;
	delete mpSmurfs;
	delete mpDean;
	delete mpSmurfsAnim;
	delete mpDeanAnim;
	delete mpUnit;
}

void Game::doLoop()
{
	bool keepGoing = true;
	float timing = .0005;

	PerformanceTracker* pTracker = new PerformanceTracker();

	Timer theTime;
	float animTime = 0;

	Vector2D mousePos = Vector2D((DISP_WIDTH / 2) + (SPRITE_WIDTH / 2), (DISP_HEIGHT / 2) + (SPRITE_HEIGHT / 2));

	while (keepGoing)
	{
		//Start loop
		pTracker->clearTracker("loop");
		pTracker->startTracking("loop");
		theTime.start();
		animTime += theTime.getElapsedTime();

		//Update
		if (animTime > mpUnit->getTime())
		{
			mpUnit->update(timing);
			animTime = 0;
		}

		//Draw
		mpDisplay->draw(mpWoods, 0, 0, 0.5, 0.5);
		mpDisplay->draw(mpUnit->getPosition().getX(), mpUnit->getPosition().getY(),
			mpUnit->draw(), 1, 1);
		mpDisplay->flip();

		//Inputs
		if (mInputSystem.getKeyState(ALLEGRO_KEY_ESCAPE))
		{
			keepGoing = false;
		}

		if (mInputSystem.getMouseDown())
		{
			mousePos = mInputSystem.getMousePos();
			mpUnit->setPosition(mousePos.getX(), mousePos.getY());
		}

		if (mInputSystem.getKeyState(ALLEGRO_KEY_S))
		{
			mpUnit->setTime(timing);
		}

		if (mInputSystem.getKeyState(ALLEGRO_KEY_F))
		{
			mpUnit->setTime(-timing);
		}

		if (mInputSystem.getKeyState(ALLEGRO_KEY_ENTER))
		{
			mpUnit->setAnimation();
		}

		//Sleep
		theTime.sleepUntilElapsed(SLEEP_MS);
		pTracker->stopTracking("loop");
		cout << pTracker->getElapsedTime("loop") << endl;
	}
	delete pTracker;
}

Game* gpGame = nullptr;