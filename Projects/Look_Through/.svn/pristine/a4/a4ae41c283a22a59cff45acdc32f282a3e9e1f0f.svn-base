#include "Game.h"
#include <iostream>
using namespace std;

Game* gpGame = nullptr;
Game::Game()
{
	 gpGame;
	 mpgSystem = nullptr;
	 mpInputSystem = nullptr;

	 mpWoodPNG = nullptr;//files
	 mpSmurfPNG = nullptr;
	 mpDeanPNG = nullptr;
	 mpUnit = nullptr;	
}

Game::~Game()
{
	cleanUp();
}

void Game::initialize(int width, int height)
{

	mpgSystem = new GraphicsSystem;
	mpInputSystem = new InputSystem;

	mpgSystem->initialize(width, height);//graphics system initialized first
	mpInputSystem->initialize();

	mpWoodPNG = new GraphicsBuffer((ASSET_PATH + WOOD_FILENAME).c_str());//files
	mpSmurfPNG = new GraphicsBuffer((ASSET_PATH + SMURF_FILENAME).c_str());
	mpDeanPNG = new GraphicsBuffer((ASSET_PATH + DEAN_FILENAME).c_str());

	mpSmurfA =  Animation(mpSmurfPNG, SPRITE_COUNT, INITIAL_SPEED, true);
	mpDeanA =  Animation(mpDeanPNG, SPRITE_COUNT, INITIAL_SPEED, true);
	mpUnit = new Unit(mpSmurfA, mpDeanA);
}

void Game::cleanUp()
{
	mpgSystem->cleanUp();

	delete mpUnit;
	//delete mpSmurfA;
	//delete mpDeanA;
	delete mpWoodPNG;
	delete mpSmurfPNG;
	delete mpDeanPNG;

}

//might be out of order so animation wont play
void Game::doLoop()
{
	bool keepLooping = true;
	double targetTime = 1000 / 60.0;
	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;
	Timer loopTimer;

	float halfOfSpriteW = (S_WIDTH / 2);
	float halfOfSpriteH = (S_HEIGHT / 2);

	//f, s, enter, esp, mouse button

	enum MyKeyCode
	{
		A_KEY = ALLEGRO_KEY_A,
		B_KEY = ALLEGRO_KEY_B
	};

	Vector2D mouseLocation = Vector2D((DISP_WIDTH / 2) + (S_WIDTH / 2), (DISP_HEIGHT / 2) + (S_HEIGHT / 2));
	Vector2D location = Vector2D();
	//Vector2D drawLocation = mpUnit->draw()->getSourceLoc();

	while (keepLooping)
	{
		//need more code dumby
		pPerformanceTracker->clearTracker("loop");
		pPerformanceTracker->startTracking("loop");
		loopTimer.start();
		
		mpUnit->update(targetTime);//gets the animation to switch sprites of type
			
		//find mouse location on buffer
		if (mpInputSystem->mouseDown())
		{
			mouseLocation = mpInputSystem->getMouseLoc();
			mpUnit->setLocation(mouseLocation);
		}

		//Speed Up
		if (mpInputSystem->keyboardState(ALLEGRO_KEY_F))
		{
			mpUnit->setSpeed(-targetTime);
		}

		//Speed Down
		else if (mpInputSystem->keyboardState(ALLEGRO_KEY_S))
		{
			mpUnit->setSpeed(targetTime);
		}
		
		//switch between sprites
		if (mpInputSystem->keyboardState(ALLEGRO_KEY_ENTER))
		{
			mpUnit->setAnimation();
		}

		keepLooping = !(mpInputSystem->keyboardState(ALLEGRO_KEY_ESCAPE));

		//draw Bckground
		mpgSystem->drawBackground(mpWoodPNG); //(mpWoodPNG, 0, 0, 1);
		
		//draw animations
		mpUnit->draw(mpgSystem);

		mpgSystem->flip();

		loopTimer.sleepUntilElapsed(targetTime);
		pPerformanceTracker->stopTracking("loop");
		cout << "FPS: " << pPerformanceTracker->getElapsedTime("loop") << endl;
	}

	delete pPerformanceTracker;
}