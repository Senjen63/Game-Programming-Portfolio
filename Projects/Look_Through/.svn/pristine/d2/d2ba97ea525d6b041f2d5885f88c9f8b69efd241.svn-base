#include "Unit.h"
#include "Game.h"

Unit::Unit()
{
	mpSmurfAnim = nullptr;
	mpDeanAnim = nullptr;
	mX = 0;
	mY = 0;
	mCurrentAnim = 0;
	enabled = true;
}

Unit::Unit(Animation* pSmurf, Animation* pDean, int x, int y)
{
	mpSmurfAnim = pSmurf;
	mpDeanAnim = pDean;
	mX = x;
	mY = y;
	mCurrentAnim = 0;
	enabled = true;
}

Unit::Unit(string smurfKey, string deanKey, Vector2D pos)
{
	mpSmurfAnim = new Animation(Game::getGame()->getBufferManager()->getBuffer(smurfKey), true);
	mpDeanAnim = new Animation(Game::getGame()->getBufferManager()->getBuffer(deanKey), true);
	mX = pos.getX();
	mY = pos.getY();
	mCurrentAnim = 0;
	enabled = true;
}

Unit::~Unit()
{
	delete mpSmurfAnim;
	delete mpDeanAnim;
	mpSmurfAnim = nullptr;
	mpDeanAnim = nullptr;
	mX = 0;
	mY = 0;
	mCurrentAnim = 0;
	enabled = true;
}

float Unit::getTime()
{
	return mpSmurfAnim->getTime();
}

void Unit::update(double dt)
{
	if (enabled)
	{
		mpSmurfAnim->update(dt);
		mpDeanAnim->update(dt);
	}
}

void Unit::draw(GraphicsSystem* display)
{
	if (mCurrentAnim == 0)
	{
		display->draw(mpSmurfAnim->getCurrentSprite()->getX(), mpSmurfAnim->getCurrentSprite()->getY(), mpSmurfAnim->getCurrentSprite(), 
			mX + (SPRITE_WIDTH / 2), mY + (SPRITE_HEIGHT / 2));
	}	
	else
	{
		display->draw(mpDeanAnim->getCurrentSprite()->getX(), mpDeanAnim->getCurrentSprite()->getY(), mpDeanAnim->getCurrentSprite(),
			mX + (SPRITE_WIDTH / 2), mY + (SPRITE_HEIGHT / 2));
	}
}

void Unit::setAnimation()
{
	if (mCurrentAnim == 0)
		mCurrentAnim = 1;
	else
		mCurrentAnim = 0;
}

void Unit::changeTiming(float timerChange)
{
	mpSmurfAnim->changeTimer(timerChange);
	mpDeanAnim->changeTimer(timerChange);
}

void Unit::toggleEnable()
{
	enabled = !enabled;
}

Vector2D Unit::getPos()
{
	Vector2D pos = Vector2D(mX, mY);
	return pos;
}