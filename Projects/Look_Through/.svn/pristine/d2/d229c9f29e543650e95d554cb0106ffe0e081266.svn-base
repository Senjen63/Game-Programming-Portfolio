#include "UnitManager.h"
#include "Game.h"
#include "GraphicsBufferManager.h"

UnitManager::UnitManager()
{
	mNumUnits = 0;

	/*Animation* anim1 = new Animation(Game::startUp()->getGraphicsBuffer(SMURF), FRAMES_PER_SECOND, START_TIME, true);
	Animation* anim2 = new Animation(Game::startUp()->getGraphicsBuffer(DEAN), FRAMES_PER_SECOND, START_TIME, true);*/
}

UnitManager::~UnitManager()
{
	cleanup();
}

void UnitManager::cleanup()
{
	int i;
	for (i = 0; i < mNumUnits; i++)
	{
		delete mpUnits[i];
	}

	mNumUnits = 0;
	mpUnits.clear();
}

void UnitManager::addUnit(Vector2D mousePos)
{
	
	mpUnits.push_back(new Unit(mousePos));
	mNumUnits++;
}

void UnitManager::deleteUnit(Vector2D mPos)
{
	int i;
	Vector2D range;
	for (i = 0; i < mNumUnits; i++)
	{
		if (range.getDistanceBetween(mPos, Vector2D((mpUnits[i]->getPos().getX()) + (mpUnits[i]->getSprite()->getWidth() / 2), (mpUnits[i]->getPos().getY()) + (mpUnits[i]->getSprite()->getHeight() / 2))) <= mpUnits[i]->getSprite()->getWidth() / 2)
		{
			delete mpUnits[i];
			mpUnits.erase(mpUnits.begin() + i);
			mNumUnits--;
			break;
		}
	}
}

void UnitManager::clear()
{
	int i;
	for (i = 0; i < mpUnits.size(); i++)
	{
		delete mpUnits[i];
	}
	
	mpUnits.clear();
}


void UnitManager::updateAll(float time)
{
	int i;
	for (i = 0; i < mpUnits.size(); i++)
	{
		mpUnits[i]->update(time);
	}
}

void UnitManager::updateTime(float time)
{
	int i;
	for (i = 0; i < mpUnits.size(); i++)
	{
		mpUnits[i]->setTime(time);
	}
}

void UnitManager::drawAll(GraphicsSystem* pSystem)
{
	int i;
	for (i = 0; i < mpUnits.size(); i++)
	{
		mpUnits[i]->draw(pSystem);
	}
}

void UnitManager::changeLast()
{
	mpUnits[mNumUnits - 1]->setAnimation();
}

void UnitManager::pauseUnits()
{
	int i;
	for (i = 0; i < mpUnits.size(); i++)
	{
		mpUnits[i]->togglePause();
	}
}