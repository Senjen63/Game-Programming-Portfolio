#pragma once

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <vector>
#include <string>

#include "Unit.h"
#include "GraphicsBufferManager.h"

enum class Direction
{
	LEFT,
	RIGHT,
	UP,
	DOWN
};

const int MOVEMENT_DISTANCE = 50;
const float DEFAULT_SPEED = 5;

class UnitManager : public Trackable
{
private:
	vector<Unit*> mUnitVector;
	Direction mCurrentDir;
	float mCurrentTime, mPowerCurrentTime;
	float mSpeed;
	int mNormalSpeed, mSlowSpeed, mFastSpeed, mPowerUpTime;
	bool canTurn;

	void updateSnakeBody();
	void setDirection(Direction dir, Vector2D& pos);
public:
	UnitManager();
	~UnitManager();
	void clear();
	
	void removeUnit(Unit* destroy);
	void addUnit(Unit* newUnit) { mUnitVector.push_back(newUnit); };
	Unit* getUnit(int index) { return mUnitVector[index]; };
	Unit* getHead() { return mUnitVector[0]; };

	void setDirection(Direction dir) { mCurrentDir = dir; };
	void updateSnake(Direction dir, float time);
	void drawAll(GraphicsSystem* display);

	int getSize() { return mUnitVector.size(); };

	void changeSpeed(int speed) { mSpeed = speed; };

	void setNormalSpeed(int normal) { mNormalSpeed = normal; };
	void setSlowSpeed(int slow)	    { mSlowSpeed = slow;     };
	void setFastSpeed(int fast)	    { mFastSpeed = fast;     };
	void setPowerUpTIme(int time)	{ mPowerUpTime = time;	 };

	int getNormalSpeed() { return mNormalSpeed; };
	int getSlowSpeed()   { return mSlowSpeed;   };
	int getFastSpeed()   { return mFastSpeed;   };
};
