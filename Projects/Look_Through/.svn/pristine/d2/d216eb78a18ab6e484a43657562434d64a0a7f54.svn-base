#include "Menu.h"

Menu::Menu(Font* font)
{
	mpFont = font;
}

Menu::~Menu()
{
}

void Menu::initializeMenuSystemFiles(int num)
{
	std::ifstream input;

	switch (num)
	{
	case 1:
		input.open(ENGLISH);
		break;
	case 2:
		input.open(SPANISH);
		break;
	case 3:
		input.open(FRENCH);
		break;
	default:
		std::cout << "Invalid File Selection: void initializeMenuSystem\n";
		break;
	}

	if (input.good())
	{
		while (!input.eof())
		{
			getline(input, menu);
			getline(input, options);
			getline(input, play);
			getline(input, load);
			getline(input, quit);
			getline(input, backMain);
			getline(input, difficulty);
			getline(input, soundOn);
			getline(input, soundOff);
			getline(input, languages);
			getline(input, backOpt);
			getline(input, easy);
			getline(input, medium);
			getline(input, hard);
			getline(input, english);
			getline(input, spanish);
			getline(input, french);

			//In game
			getline(input, timeElap);
			getline(input, sadFri);
			getline(input, happyFri);
			getline(input, mehFri);
			break;
		}
	}

	input.close();
}

void Menu::displayMainMenu(GraphicsSystem* graphicSystem)
{
	graphicSystem->writeText(midX, (midY-spacing*2), mpFont, mWhite, "___" + menu + "___");
	graphicSystem->writeText(midX, (midY - spacing), mpFont, mWhite, "1. " + play);
	graphicSystem->writeText(midX, (midY + spacing), mpFont, mWhite, "2. " + options);
	graphicSystem->writeText(midX, (midY + spacing * 2), mpFont, mWhite, "3. " + load);
	graphicSystem->writeText(midX, (midY + spacing * 3), mpFont, mWhite, "4. " + quit);
}

void Menu::displayOptions(GraphicsSystem* graphicSystem)
{
	graphicSystem->writeText(midX, (midY - spacing * 2), mpFont, mWhite, "___" + options + "___");
	graphicSystem->writeText(midX, (midY - spacing), mpFont, mWhite, "1. " + backMain);
	graphicSystem->writeText(midX, (midY + spacing), mpFont, mWhite, "2. " + difficulty);

	if (soundSwitch)
	{
		graphicSystem->writeText(midX, (midY + spacing * 2), mpFont, mWhite, "3. " + soundOn);
	}
	else
	{
		graphicSystem->writeText(midX, (midY + spacing * 2), mpFont, mWhite, "3. " + soundOff);
	}
	
	graphicSystem->writeText(midX, (midY + spacing * 3), mpFont, mWhite, "4. " + languages);
}

void Menu::displayDifficulty(GraphicsSystem* graphicSystem)
{
	graphicSystem->writeText(midX, (midY - spacing * 2), mpFont, mWhite, "___" + difficulty + "___");
	graphicSystem->writeText(midX, (midY - spacing), mpFont, mWhite, "1. " + backOpt);
	graphicSystem->writeText(midX, (midY + spacing), mpFont, mWhite, "2. " + easy);
	graphicSystem->writeText(midX, (midY + spacing * 2), mpFont, mWhite, "3. " + medium);
	graphicSystem->writeText(midX, (midY + spacing * 3), mpFont, mWhite, "4. " + hard);
}

void Menu::displayLanguages(GraphicsSystem* graphicSystem)
{
	graphicSystem->writeText(midX, (midY - spacing * 2), mpFont, mWhite, "___" + languages + "___");
	graphicSystem->writeText(midX, (midY - spacing), mpFont, mWhite, "1. " + backOpt);
	graphicSystem->writeText(midX, (midY + spacing), mpFont, mWhite, "2. " + english);
	graphicSystem->writeText(midX, (midY + spacing * 2), mpFont, mWhite, "3. " + spanish);
	graphicSystem->writeText(midX, (midY + spacing * 3), mpFont, mWhite, "4. " + french);
}

void Menu::setSound(bool sound)
{
	if (sound)
	{
		std::cout << "Sound is: " << sound << std::endl;
		soundSwitch = true;
	}
	else
	{
		std::cout << "Sound is: " << sound << std::endl;
		soundSwitch = false;
	}
}

std::string Menu::getLevelHUDLanguage(int choice)
{
	switch (choice)
	{
	case 1:
		return timeElap;
		break;
	case 2:
		return sadFri;
		break;
	case 3:
		return mehFri;
		break;
	case 4:
		return happyFri;
		break;
	case 5:
		return difficulty;
		break;
	case 6:
		return easy;
		break;
	case 7:
		return medium;
		break;
	case 8:
		return hard;
		break;
	default:
		std::cout << "couldn't select language word (Menu.cpp)\n";
		break;
	}
}

