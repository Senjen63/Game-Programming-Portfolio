#pragma once
#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

#include <iostream>
#include <cassert>
#include <string>
#include <Vector2D.h>


#include "sprite.h"
#include "color.h"
#include "font.h"

using namespace std;

class GraphicsSystem //Display Based, Init/Cleanup, height width display, back buffer (is graphics buffer we made), al_flip_display()
{
	//Constructor shouldnt call init, destructor should call cleanup
	//Draw sprite at scale -to given GraphicsBuffer and one to draw to backbuffer
	//Write text (location,font,color,text) to backbuffer of graphics buffer
	//savebuffer to file
public:
	GraphicsSystem();
	GraphicsSystem(int, int);
	~GraphicsSystem();

	bool GraphicsInit();
	void GraphicsCleanup();

	//Accessors
	void flipDisplay();
	int getHeight();
	int getWidth();
	GraphicsBuffer* getBackBuffer();

	void draw(int xPos, int yPos, Sprite sprite, float xScale, float yScale);
	void draw(GraphicsBuffer* pBackBuffer, int xPos, int yPos, float xScale, float yScale);
	void draw(GraphicsBuffer* pBackBuffer, int xPos, int yPos, Sprite sprite, float xScale, float yScale);
	void draw(Vector2D destination, Vector2D source, Sprite sprite, float scale);

	void writeText(int xPos, int yPos, Font* font, Color color, string text);
	void writeText(GraphicsBuffer* pBackBuffer, int xPos, int yPos, Font* font, Color color, string text);

	bool saveBuffer(GraphicsBuffer* pBitmap, string fileName); //Saves bitmap to file

private:
	ALLEGRO_DISPLAY* mpGraphicsDisplay;
	GraphicsBuffer* mpBackBuffer;
};