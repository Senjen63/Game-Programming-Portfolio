#include "InputSystem.h"

InputSystem::~InputSystem()
{
    cleanUp();
}

void InputSystem::init()
{
    if (mIsInitted)
    {
        return;
    }

    if (!al_init())
    {
        throw new std::exception("error initting Allegro\n");
    }
    if (!al_install_keyboard())
    {
        throw new std::exception("error - keyboard not installed\n");
    }
    if (!al_install_mouse())
    {
        throw new std::exception("error - mouse not installed\n");
    }

    // Create Event Queue and Register various sources 
    mpEventQueue = al_create_event_queue();
    al_register_event_source(mpEventQueue, al_get_keyboard_event_source());
    al_register_event_source(mpEventQueue, al_get_mouse_event_source());

    mIsInitted = true;
}

void InputSystem::cleanUp()
{
    if (!mIsInitted)
    {
        return;
    }

    al_unregister_event_source(mpEventQueue, al_get_mouse_event_source());
    al_unregister_event_source(mpEventQueue, al_get_keyboard_event_source());
    al_destroy_event_queue(mpEventQueue);

    mIsInitted = false;
}

void InputSystem::update()
{
    EventSystem* pEventSysInst = EventSystem::getInstance();

    // Run through each event in the queue and dipatch input events accordingly 
    while (!al_event_queue_is_empty(mpEventQueue))
    {
        ALLEGRO_EVENT nextEvent = {};
        al_get_next_event(mpEventQueue, &nextEvent);

        switch (nextEvent.type)
        {
        case ALLEGRO_EVENT_KEY_DOWN:
            pEventSysInst->fireEvent(
                KeyboardEvent(KeyboardEventType::EVENT_KEY_DOWN, (KeyCode)nextEvent.keyboard.keycode));
            break;
        case ALLEGRO_EVENT_KEY_UP:
            pEventSysInst->fireEvent(
                KeyboardEvent(KeyboardEventType::EVENT_KEY_UP, (KeyCode)nextEvent.keyboard.keycode));
            break;

        case ALLEGRO_EVENT_MOUSE_AXES:
            pEventSysInst->fireEvent(
                MouseEvent(MouseEventType::EVENT_MOUSE_MOVE, Vector2D(nextEvent.mouse.x, nextEvent.mouse.y), Vector2D(nextEvent.mouse.dx, nextEvent.mouse.dy)));
            break;
        case ALLEGRO_EVENT_MOUSE_BUTTON_DOWN:
            pEventSysInst->fireEvent(
                MouseEvent(MouseEventType::EVENT_MOUSE_BUTTON_DOWN, Vector2D(nextEvent.mouse.x, nextEvent.mouse.y), (MouseButton)nextEvent.mouse.button));
            break;
        case ALLEGRO_EVENT_MOUSE_BUTTON_UP:
            pEventSysInst->fireEvent(
                MouseEvent(MouseEventType::EVENT_MOUSE_BUTTON_UP, Vector2D(nextEvent.mouse.x, nextEvent.mouse.y), (MouseButton)nextEvent.mouse.button));
            break;

        default:
            break;
        }
    }
}

bool InputSystem::getKeyState(KeyCode keycode)
{
    al_get_keyboard_state(&mKeyBoardState);
    return al_key_down(&mKeyBoardState, (int)keycode);
}

MouseState InputSystem::getMouseState()
{
    al_get_mouse_state(&mMouseState);
    return MouseState(&mMouseState);
}

bool InputSystem::getMouseButtonDown(int mouseButton)
{
    al_get_mouse_state(&mMouseState);
    return al_mouse_button_down(&mMouseState, mouseButton);
}

bool InputSystem::getMouseButtonDown(MouseButton mouseButton)
{
    return getMouseButtonDown((int) mouseButton);
}

Vector2D InputSystem::getMousePosition()
{
    al_get_mouse_state(&mMouseState);
    return Vector2D(mMouseState.x, mMouseState.y);
}

MouseState::MouseState(ALLEGRO_MOUSE_STATE* pMouseState)
{
    mPosition = Vector2D(pMouseState->x, pMouseState->y);
    mScrollPosition = pMouseState->z;
    mButtonsBitfield = pMouseState->buttons;
}
