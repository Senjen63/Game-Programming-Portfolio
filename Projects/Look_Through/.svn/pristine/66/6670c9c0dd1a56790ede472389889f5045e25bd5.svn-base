#include "include/EntityCommandBuffer.hpp"

#include "include/EntityManager.hpp"

void EntityCommandBuffer::addComponent( Entity entity, Component * pComponent )
{
    mComponentsToAdd.emplace_back( entity, pComponent );
}

void EntityCommandBuffer::createEntity( const std::vector< Component * > & components )
{
    mEntitiesToCreate.push_back( components );
}

void EntityCommandBuffer::deleteEntity( const Entity entity )
{
    mEntitiesToDelete.push_back( entity );
}

bool EntityCommandBuffer::doChangeScene()
{
    if( mSwitchScene )
    {
        mSwitchScene = false;
        return true;
    }
    return false;
}

bool EntityCommandBuffer::hasStructuralChanges() const
{
    return !( mEntitiesToDelete.empty() && mComponentsToAdd.empty() && mEntitiesToCreate.empty() );
}

void EntityCommandBuffer::execute()
{
    const auto pEntityManager = mpEntityManager.lock();
    for ( const auto & ent : mEntitiesToCreate )
    {
        pEntityManager->createEntity( ent );
    }
    for ( const auto & ent : mEntitiesToDelete )
    {
        pEntityManager->deleteEntity( ent );
    }
    for ( const auto & [ entity, pComponent ] : mComponentsToAdd )
    {
        pEntityManager->addComponentToEntity( entity, pComponent );
    }

    mEntitiesToCreate.clear();
    mEntitiesToDelete.clear();
    mComponentsToAdd.clear();
}

void EntityCommandBuffer::switchScene()
{
    mSwitchScene = true;
}
