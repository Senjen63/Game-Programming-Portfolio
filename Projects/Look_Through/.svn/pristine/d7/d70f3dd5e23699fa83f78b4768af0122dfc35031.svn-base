#include "DataLoader.h"
#include <fstream>
#include <algorithm>
#include <string>

DataLoader::DataLoader()
{

}

DataLoader::~DataLoader()
{

}

void DataLoader::init()
{
	float inFloat;
	float inFloat2;
	int inInt;
	double inDouble;

	ifstream inputDiff("../GalahadAssets/data/" + GAME_DATA);
	if (inputDiff.good())
	{
		string key;

		while (!inputDiff.eof())
		{
			inputDiff >> key;

			if (key == "left")
			{
				inputDiff >> inInt;

				mIntMap[key] = inInt;
			}
			else if (key == "right")
			{
				inputDiff >> inInt;

				mIntMap[key] = inInt;
			}
			else if (key == "up")
			{
				inputDiff >> inInt;

				mIntMap[key] = inInt;
			}
			else if (key == "down")
			{
				inputDiff >> inInt;

				mIntMap[key] = inInt;
			}
			else if (key == "min_lives")
			{
				inputDiff >> inInt;

				mIntMap[key] = inInt;
			}
			else if (key == "max_lives")
			{
				inputDiff >> inInt;

				mIntMap[key] = inInt;
			}
			else if (key == "filler")
			{
				inputDiff >> inInt;

				mIntMap[key] = inInt;
			}
			else if (key == "start")
			{
				inputDiff >> inFloat >> inFloat2;

				mVectorMap[key] = Vector2D(inFloat, inFloat2);
			}
			else if (key == "origin")
			{
				inputDiff >> inFloat >> inFloat2;

				mVectorMap[key] = Vector2D(inFloat, inFloat2);
			}
			else if (key == "speed")
			{
				inputDiff >> inDouble;

				mDoubleMap[key] = inDouble;
			}
			else if (key == "player_speed")
			{
				inputDiff >> inFloat;

				mFloatMap[key] = inFloat;
			}
			else if (key == "backup")
			{
				inputDiff >> mBackup;
			}
		}
	}
}

float DataLoader::getFloat(const TextKey& key)
{
	auto text = mFloatMap.find(key);

	if (text != mFloatMap.end())
	{
		return text->second;
	}
	else
	{
		return NULL;
	}
}

int DataLoader::getInt(const TextKey& key)
{
	auto text = mIntMap.find(key);

	if (text != mIntMap.end())
	{
		return text->second;
	}
	else
	{
		return NULL;
	}
}

double DataLoader::getDouble(const TextKey& key)
{
	auto text = mDoubleMap.find(key);

	if (text != mDoubleMap.end())
	{
		return text->second;
	}
	else
	{
		return NULL;
	}
}

Vector2D DataLoader::getVector(const TextKey& key)
{
	auto text = mVectorMap.find(key);

	if (text != mVectorMap.end())
	{
		return text->second;
	}
	else
	{
		return Vector2D(mBackup, mBackup);
	}
}