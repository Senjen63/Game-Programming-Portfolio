#pragma once

#include "Trackable.h"
#include "Vector2D.h"
#include "Animation.h"
#include "EventListener.h"
#include "StartScreen.h"
#include "DeathScreen.h"
#include "NextLevelScreen.h"
#include "WinScreen.h"
#include "LevelManager.h"
#include "Walls.h"
#include "PowerUps.h"
#include "HUD.h"
#include <EventSystem.h>
#include <vector>
#include <string>

class Vector2D;
class InputSystem;
class GraphicsSystem;
class GraphicsBufferManager;
class LevelManager;
class Walls;
class Sprite;
class Animation;
class UnitManager;
class SnakePlayer;
class PowerUps;
class HUD;
class Timer;
class PerformanceTracker;

enum GameStates
{
	START_SCREEN = 0,
	DEATH_SCREEN,
	NEXT_LEVEL_SCREEN,
	WIN_SCREEN,
	GAME_LOOP
};

class Game : public EventListener
{
private:
	
	static Game* gpGame;
	GameStates mGameState;

	bool mIsGameContinuing;

	InputSystem* mpInputSystem;
	GraphicsSystem* mpGraphicsSystem;
	GraphicsBufferManager* mpBufferManager;
	UnitManager* mpUnitManager;
	LevelManager* mpLevelManager;
	Walls* mpWalls;
	HUD* mpHUD;
	double mRemainingPowerUpTick = 0;

	StartScreen* mpStartScreen;
	DeathScreen* mpDeathScreen;
	NextLevelScreen* mpNextLevelScreen;
	WinScreen* mpWinScreen;

	SnakePlayer* mpPlayer;
	PowerUps* mpPowerUps;

	Sprite* mpBackgroundSprite;

	int mCurrentScore = 0;
	double mTime = 0;

	Timer* mpTimer;
	PerformanceTracker* mpPerformanceTracker;

	Game();
	~Game();

public:

	const int DISP_WIDTH = 1024;
	const int DISP_HEIGHT = 704;
	const int TILE_SIZE = 32;
	const int LEVEL_GRID_WIDTH = 32;
	const int LEVEL_GRID_HEIGHT = 22;

	const double GAME_TICK = 16.7;
	const double BACKGROUND_SCALE = 1.0f;

	const std::string ASSET_PATH = "..\\..\\roji.merle\\assets\\";
	const std::string BG_SPRITE = "gray_bg.png";
	const std::string BG_KEY = "bg";
	const std::string LOOP = "loop";

	const Vector2D ORIGIN_LOCATION = Vector2D(0, 0);
	const Vector2D CENTER_LOCATION = Vector2D(DISP_WIDTH / 2, DISP_HEIGHT / 2);

	static Game* getGameInstance() { assert(gpGame != nullptr); return gpGame; }
	static void createGameInstance() { gpGame = new Game; }
	static void cleanupGameInstance() { delete gpGame; }

	void init();
	void cleanup();
	void gameLoop();
	void powerUpRespawn();
	void resetPowerUpTick();
	void drawGame();
	void handleEvent(const Event& currentEvent);
	void addTime();

	void resetScore() { mCurrentScore = 0; };

	GameStates getGameState() { return mGameState; };
	GraphicsSystem* getGraphicsSystem() { return mpGraphicsSystem; };
	GraphicsBufferManager* getGraphicsBufferManager() { return mpBufferManager; };
	UnitManager* getUnitManager() { return mpUnitManager; };
	LevelManager* getLevelManager() { return mpLevelManager; };
	HUD* getHUD() { return mpHUD; };

	SnakePlayer* getPlayer() { return mpPlayer; };
	PowerUps* getPowerUps() { return mpPowerUps; };

	int getScore() { return mCurrentScore; };
	double getTime() { return mTime; };
	void resetTime() { mTime = 0; }
};