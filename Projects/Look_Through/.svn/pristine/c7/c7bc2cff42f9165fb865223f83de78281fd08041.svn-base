#include "GraphicsBufferManager.h"

GraphicsBufferManager::~GraphicsBufferManager()
{
    clearAll();
}

GraphicsBuffer* GraphicsBufferManager::getBuffer(const BufferKey& key) const
{
    return mMap.at(key);
}

void GraphicsBufferManager::deleteBuffer(const BufferKey& key)
{
    if (!bufferExists(key))
        return;

    delete mMap[key];
    mMap.erase(key); // Ensure the pointer is erased too 
}

GraphicsBuffer* GraphicsBufferManager::addBuffer(const BufferKey& key, int width, int height, Color color)
{
    if (bufferExists(key))
        return getBuffer(key);

    GraphicsBuffer* temp = new GraphicsBuffer(color, width, height);
    mMap.insert({ key, temp }); // inserts an std::pair 
    return temp;
}

GraphicsBuffer* GraphicsBufferManager::addBuffer(const BufferKey& key, const std::string& pathToAsset)
{
    if (bufferExists(key))
        return nullptr;
    GraphicsBuffer* temp = new GraphicsBuffer(pathToAsset);
    mMap.insert({ key, temp });
    return temp;
}

bool GraphicsBufferManager::bufferExists(const BufferKey& key) const
{
    return mMap.count(key);
}

void GraphicsBufferManager::clearAll()
{
    // Delete each entry 
    for (std::pair<const BufferKey, GraphicsBuffer*>& bufferKeyPair : mMap)
    {
        delete bufferKeyPair.second;
    }

    // Clear the list 
    mMap.clear();
}
