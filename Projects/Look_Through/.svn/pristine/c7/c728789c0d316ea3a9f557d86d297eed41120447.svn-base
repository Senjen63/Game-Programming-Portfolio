/*******************************************************
* Author: Aven Presseisen
* Class: GPR-250-02
* Assignment: Assignment 3
* Certification of Authenticity:
* I certify that this assignment is entirely my own work.
************/

#pragma once

#include <DeanMath.h>
#include <allegro5/display.h>

#include "Color.h"
#include "Font.h"
#include "Sprite.h"

class GraphicsSystem : public Trackable
{
    ALLEGRO_DISPLAY * mpDisplay;
    GraphicsBuffer * mpBackBuffer;

public:
    GraphicsSystem();
    ~GraphicsSystem();

    void cleanup();
    static void clear( const Color & color );
    void clear( const GraphicsBuffer & targetBuffer, const Color & color ) const;
    void createDisplay( int width, int height );
    static void draw( int locX, int locY, const Sprite & sprite, float scale = 1.0f );
    static void draw( int locX, int locY, const GraphicsBuffer & toDrawBuffer, float scale = 1.0f );
    void draw( const GraphicsBuffer & targetBuffer, int locX, int locY, const Sprite & sprite, float scale = 1.0f ) const;
    void draw( const GraphicsBuffer & targetBuffer, int locX, int locY, const GraphicsBuffer & toDrawBuffer, float scale ) const;
    static void draw( const Vector2D & tlStart, const Vector2D & brEnd, const Color & color );
    static void draw( const Vector2D & tlStart, const Vector2D & brEnd, const Color & color, float thickness );
    static void drawEllipse( const Vector2D & point, const Vector2D & size, const Color & color );
    static void drawEllipse( const Vector2D & point, const Vector2D & size, const Color & color, float thickness );
    void draw( const GraphicsBuffer & targetBuffer, const Vector2D & tlStart, const Vector2D & brEnd, const Color & color ) const;
    static void flip();
    [[nodiscard]] GraphicsBuffer * getBackBuffer() const;
    [[nodiscard]] int getHeight() const;
    [[nodiscard]] int getWidth() const;
    static void init();
    static void saveBuffer( const GraphicsBuffer & graphicsBuffer, const char * pFilename );
    static void writeText( int locX, int locY, const Font & font, const Color & color, const char * pText );
    void writeText( const GraphicsBuffer & targetBuffer, int locX, int locY, const Font & font, const Color & color, const char * pText ) const;

    explicit operator GraphicsBuffer *() const;
};
