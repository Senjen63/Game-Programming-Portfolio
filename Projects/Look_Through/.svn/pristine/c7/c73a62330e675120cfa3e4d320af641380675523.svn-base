#include <iostream>
#include <cassert>
#include <string>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>

#include "GraphicsSystem.h"
#include "GraphicsBuffer.h"
#include "Sprite.h"
#include "Font.h"
#include "Color.h"

using namespace std;

int main()
{
	// Initialize random seed
	srand(time(NULL));

	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;

	const string INIT_TRACKER_NAME = "init";
	const string DRAW_TRACKER_NAME = "draw";
	const string WAIT_TRACKER_NAME = "wait";

	// Resolution and Display
	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;
	GraphicsSystem* graphicsSystem = new GraphicsSystem(DISP_WIDTH, DISP_HEIGHT);

	// Asset Path
	const string ASSET_PATH = "..\\..\\common\\assets\\";

	// Assets
	const string BACKGROUND_FILENAME = "steps.png";
	const string QUIMBY_FILENAME = "mayor_quimby.png";
	const string SMURFS_FILENAME = "smurf_sprites.png";

	// Scaling and Positioning
	const float RED_BUFFER_SCALE_X = 0.66;
	const float RED_BUFFER_SCALE_Y = 0.66;
	const float RED_BUFFER_POSITION_X = 150;
	const float RED_BUFFER_POSITION_Y = 100;

	const float SMURFS_PER_ROW = 4;
	const float SMURFS_PER_COLUMN = 4;
	const float SMURF_UNIT_SCALE = 60;

	// Font
	const string FONT_FILENAME = "cour.ttf";
	const int FONT_SIZE = 50;
	const double SLEEP_TIME = 5.0;
	Font* courFont = new Font(ASSET_PATH + FONT_FILENAME, FONT_SIZE);

	// Color
	static Color RED = Color(255, 0, 0, 255);
	static Color BLACK = Color(0, 0, 0, 255);

	bool keepRunning = true;
	Timer timer;

	// GraphicsBuffers
	GraphicsBuffer* stepsBackgroundBuffer = new GraphicsBuffer(ASSET_PATH + BACKGROUND_FILENAME);
	assert(stepsBackgroundBuffer);
	GraphicsBuffer* smurfsBuffer = new GraphicsBuffer(ASSET_PATH + SMURFS_FILENAME);
	assert(smurfsBuffer);
	GraphicsBuffer* mayorQuimbyBuffer = new GraphicsBuffer(ASSET_PATH + QUIMBY_FILENAME);
	assert(mayorQuimbyBuffer);
	GraphicsBuffer* redBuffer = new GraphicsBuffer(DISP_WIDTH, DISP_HEIGHT, 0, 0, DISP_WIDTH, DISP_HEIGHT, RED);
	assert(redBuffer);
	
	Sprite mayorQuimbySprite = Sprite(mayorQuimbyBuffer);

	graphicsSystem->draw(redBuffer, 0, 0, mayorQuimbySprite, 1, 1);
	graphicsSystem->writeText(redBuffer, 0, 0, courFont, BLACK, "Curse you Papa Smurf!");

	graphicsSystem->draw(0, 0, stepsBackgroundBuffer, 1, 1);

	graphicsSystem->draw(RED_BUFFER_POSITION_X, RED_BUFFER_POSITION_Y, redBuffer, RED_BUFFER_SCALE_X, RED_BUFFER_SCALE_Y); // somethings up with the scale

	// Draw smurfs to the backbuffer
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			Sprite randomSmurf = Sprite(smurfsBuffer, SMURF_UNIT_SCALE * i, SMURF_UNIT_SCALE * j, SMURF_UNIT_SCALE, SMURF_UNIT_SCALE);
			float randX = rand() % DISP_WIDTH;
			float randY = rand() % DISP_HEIGHT;

			graphicsSystem->draw(randX, randY, randomSmurf, 1, 1);
		}
	}

	graphicsSystem->saveBuffer(graphicsSystem->getBackBuffer(), "backbuffer.jpg");
	graphicsSystem->saveBuffer(redBuffer, "redbuffer.jpg");

	graphicsSystem->flipBackBuffer();

	timer.sleep(5000.0);

	pPerformanceTracker->stopTracking("loop");
	//cout << "Frame Took:" << pPerformanceTracker->getElapsedTime("loop") << " ms" << endl;

	pPerformanceTracker->clearTracker("loop");

	delete stepsBackgroundBuffer;
	delete smurfsBuffer;
	delete mayorQuimbyBuffer;
	delete redBuffer;
	delete graphicsSystem;
	delete courFont;

	delete pPerformanceTracker;
	MemoryTracker::getInstance()->reportAllocations(cout);

	system("pause");
	return 0;
}