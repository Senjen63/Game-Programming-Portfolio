#pragma once

#include "Trackable.h"

#include "Collider.h"

#include <map>

class CollisionManager : public Trackable
{
    friend class Collider;

public:
    CollisionManager() {};
    ~CollisionManager() {};

    /// <summary> colliderToCheck should be a projection of where the collider WILL be. </summary>
    /// <returns> Returns nullptr on no hit or the first collider found. 
    /// THERE IS NO PARTICUALR ORDER TO WHICH COLLIDER IS FIRST. </returns>
    const Collider* detectCollision(CollisionTag tag, const Collider* colliderToCheck) const;

    /// <summary> Moves the collider, detects collisions, then resets it (The collider ultimatly does not change). </summary> 
    /// <returns> Returns nullptr on no hit or the first collider found. 
    /// THERE IS NO PARTICUALR ORDER TO WHICH COLLIDER IS FIRST. </returns>
    const Collider* testAddPosition(CollisionTag tag, Collider* colliderToCheck, const Vector2D& addPosition) const;

private:
    void addCollider(const Collider* collider);
    void removeCollider(const Collider* colliderToRemove);

    // multimap used so that only colliders with a given tag are compared (rather than checking all collisions) 
    std::multimap<CollisionTag, const Collider*> mCollisionMap;
};
