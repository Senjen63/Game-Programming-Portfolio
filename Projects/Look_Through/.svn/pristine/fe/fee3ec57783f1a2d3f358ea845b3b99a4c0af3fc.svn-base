#pragma once

#include <vector>
#include <Trackable.h>
#include <Vector2D.h>
#include "Animation.h"
#include "GraphicsSystem.h"

class Entity : public Trackable
{
    friend class EntityManager;

public:
    void update(double deltaTime);
    void draw(const GraphicsSystem& sys, float scale = 1.0f) const;

    bool overlapsPosition(const Vector2D& position) const;
    const std::vector<Animation>& getAnimations() const { return mAnimations; }
    Animation& getAnimation() { return mAnimations[mCurrentIndex]; }
    int getAnimationIndex() const { return mCurrentIndex; }

    void setAnimationIndex(int index);
    void setAnimations(const std::vector<Animation>& animations) { mAnimations = animations; }
    void setPosition(const Vector2D& position) { mPosition = position; }

    void addAnimation(Animation animation) { mAnimations.push_back(animation); } // Copies animation (pass by value) 

    void clearAnimations() { mAnimations.clear(); mCurrentIndex = 0; }

private:
    Entity() = default;
    Entity(const Entity&) = default;
    ~Entity() = default;

    Entity(const Vector2D& position, const Animation& pMainAnimation);
    Entity(const Vector2D& position, const std::vector<Animation>& animations, int startingIndex = 0);

    Vector2D mPosition = Vector2D();
    std::vector<Animation> mAnimations;
    int mCurrentIndex = 0;
};
