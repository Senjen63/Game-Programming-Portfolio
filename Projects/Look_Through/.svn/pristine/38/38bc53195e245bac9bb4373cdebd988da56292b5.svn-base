/*
* Author: Ananda Shumock-Bailey
* Class: GPR-250-02
* Assignment: Assignment 1
* Certification of Authenticity:
* I certify that this assignment is entirely my own work.
*/

#include <iostream>
#include <cassert>
#include <string>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include "GraphicsSystem.h"

using namespace std;

int main()
{
	// create constants for files
	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;

	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string BACKGROUND_FILENAME = "steps.png";
	const string QUIMBY_FILENAME = "mayor_quimby.png";
	const string SMURFS_FILENAME = "smurf_sprites.png";
	const string FONT_FILENAME = "cour.ttf";
	const string TEXT = "Curse you Papa Smurf!";
	const int FONT_SIZE = 50;
	const double SLEEP_TIME = 5000.0;
	const string BACKBUFFER = "backbuffer.jpg";
	const string REDBUFFER = "redbuffer.jpg";
	const float REDBUFFER_SCALE = 2.0 / 3.0;
	const int ORIGIN_X = 0;
	const int ORIGIN_Y = 0;
	const int PIXELS = 60;
	const int SMURF_QUARTER = 4;

	// create and initialize a GraphicsSystem object
	GraphicsSystem* graphicsSystem = new GraphicsSystem;
	graphicsSystem->init(DISP_WIDTH, DISP_HEIGHT);

	// create colors that are needed for the program
	Color red(255, 0, 0);
	Color black(0, 0, 0);

	// create 4 GraphicsBuffers - steps.png, smurf_sprites.png, Quimby.png, and a red screen
	GraphicsBuffer* pSteps = new GraphicsBuffer((ASSET_PATH + BACKGROUND_FILENAME).c_str());
	GraphicsBuffer* pQuimby = new GraphicsBuffer((ASSET_PATH + QUIMBY_FILENAME).c_str());
	GraphicsBuffer* pSmurf = new GraphicsBuffer((ASSET_PATH + SMURFS_FILENAME).c_str());
	GraphicsBuffer* pRedScreen = new GraphicsBuffer(DISP_WIDTH, DISP_HEIGHT);

	// set the screen to red
	pRedScreen->setColor(red);

	// create the font needed for the program
	Font* font = new Font((ASSET_PATH + FONT_FILENAME), FONT_SIZE);

	// create sprites to draw to the buffer
	Sprite mayorQuimby(pQuimby, ORIGIN_X, ORIGIN_Y, pQuimby->getHeight(), pQuimby->getWidth());

	// draw quimby on the red buffer
	graphicsSystem->draw(pRedScreen, ORIGIN_X, ORIGIN_Y, mayorQuimby, 1);

	// fill the red buffer with "curse you papa smurf"
	graphicsSystem->writeText(pRedScreen, 320, 5, font, black, TEXT.c_str());

	// draw the steps buffer to the back buffer
	graphicsSystem->draw(pSteps, ORIGIN_X, ORIGIN_Y, 1);

	// draw the red buffer - scaled down by 1/3 centered in the screen
	graphicsSystem->draw(pRedScreen, 133.333, 100, REDBUFFER_SCALE);

	// create 16 sprites - display at random positions
	srand(time(NULL));
	int posX, posY, srcX, srcY;

	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			posX = rand() % 800 + 1;
			posY = rand() % 600 + 1;
			srcX = PIXELS * i;
			srcY = PIXELS * j;

			Sprite smurfsSprites(pSmurf, srcX, srcY, (pSmurf->getHeight() / SMURF_QUARTER), (pSmurf->getWidth() / SMURF_QUARTER));

			graphicsSystem->draw(posX, posY, smurfsSprites, 1);
		}
	}

	// save backbuffer to file
	graphicsSystem->saveBuffer(graphicsSystem->getBackBuffer(), BACKBUFFER.c_str());

	// save redbuffer
	graphicsSystem->saveBuffer(pRedScreen, REDBUFFER.c_str());

	// flip GraphicsSystem
	graphicsSystem->flip();

	// after 5 seconds, close down the application
	Timer timer;
	timer.sleep(SLEEP_TIME);

	// clean up the program
	delete font;
	delete pRedScreen;
	delete pSmurf;
	delete pQuimby;
	delete pSteps;

	graphicsSystem->cleanup();
	delete graphicsSystem;
	graphicsSystem = nullptr;

	MemoryTracker::getInstance()->reportAllocations(cout);

	system("pause");
	return 0;
}