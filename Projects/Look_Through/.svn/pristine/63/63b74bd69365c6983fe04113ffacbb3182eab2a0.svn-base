#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

#include <iostream>
#include <cassert>
#include <string>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>

#include "Color.h"
#include "Font.h"
#include "GraphicsBuffer.h"
#include "GraphicsSystem.h"
#include "Sprite.h"

using namespace std;

int main()
{
	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;

	const string INIT_TRACKER_NAME = "init";
	const string DRAW_TRACKER_NAME = "draw";
	const string WAIT_TRACKER_NAME = "wait";

	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;
	const float RED_SCALE = 0.75;
	const float SMALL_RED_X = DISP_WIDTH / (RED_SCALE * 10);
	const float SMALL_RED_Y = DISP_HEIGHT / (RED_SCALE * 10);

	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string BACKGROUND_FILENAME = "steps.png";
	const string QUIMBY_FILENAME = "mayor_quimby.png";
	const string SMURFS_FILENAME = "smurf_sprites.png";
	const string FONT_FILENAME = "cour.ttf";
	const string MESSAGE = "Curse you Papa Smurf!";
	const int FONT_SIZE = 24;
	const int SMURF_COUNT = 4;
	const double SLEEP_TIME = 5.0;
	Vector2D origin = Vector2D(0, 0);
	const float dX = 1;
	const float dY = 1;

	srand(time(NULL));
	int randX;
	int randY;

	GraphicsSystem* pGSystem = nullptr;

	if (pGSystem->init())
	{
		GraphicsSystem* pGSystem = new GraphicsSystem(DISP_WIDTH, DISP_HEIGHT);
		const Color RED = Color(255, 0, 0);
		const Color BLACK = Color(0, 0, 0);

		GraphicsBuffer* pStepsBg = new GraphicsBuffer((ASSET_PATH + BACKGROUND_FILENAME).c_str());
		GraphicsBuffer* pQuimby = new GraphicsBuffer((ASSET_PATH + QUIMBY_FILENAME).c_str());
		GraphicsBuffer* pSmurfs = new GraphicsBuffer((ASSET_PATH + SMURFS_FILENAME).c_str());
		GraphicsBuffer* pRed = new GraphicsBuffer(RED, DISP_WIDTH, DISP_HEIGHT);
		Font* pFont = new Font((ASSET_PATH + FONT_FILENAME), FONT_SIZE);

		Sprite* pQuimbySprite = new Sprite(pQuimby, origin, Vector2D(pQuimby->getWidth(), pQuimby->getHeight()));
		Sprite* pSmurfSprite = new Sprite(pSmurfs, origin, Vector2D(60, 60));

		pGSystem->draw(pStepsBg, origin.getX(), origin.getY(), 1, 1);
		pGSystem->draw(pRed, pQuimbySprite, origin.getX(), origin.getY(), 1, 1);
		pGSystem->writeText(pRed, origin.getX(), origin.getY(), pFont, BLACK, MESSAGE.c_str());
		pGSystem->draw(pRed, SMALL_RED_X, SMALL_RED_Y, RED_SCALE, RED_SCALE);

		//Draw Smurfs in random positions
		for (int i = 0; i < SMURF_COUNT; i++)
		{
			for (int j = 0; j < SMURF_COUNT; j++)
			{
				randX = rand() % pGSystem->getWidth();
				randY = rand() % pGSystem->getHeight();
				Vector2D smurfPlacement = Vector2D(rand() % DISP_WIDTH, rand() % DISP_HEIGHT);
				pGSystem->draw(randX, randY, pSmurfSprite, 1, 1);
			}
		}

		pGSystem->saveBuffer("backbuffer.jpg", pGSystem->getBackBuffer());
		pGSystem->saveBuffer("redbuffer.jpg", pRed);

		pGSystem->flip();

		bool keepRunning = true;
		Timer timer;

		timer.sleep(10000.0);

		pPerformanceTracker->stopTracking("loop");
		cout << "Frame Took:" << pPerformanceTracker->getElapsedTime("loop") << " ms" << endl;

		pPerformanceTracker->clearTracker("loop");

		delete pGSystem;
		delete pStepsBg;
		delete pQuimby;
		delete pSmurfs;
		delete pRed;
		delete pFont;
	}
	pGSystem = nullptr;

	delete pPerformanceTracker;
	MemoryTracker::getInstance()->reportAllocations(cout);

	system("pause");
	return 0;
}