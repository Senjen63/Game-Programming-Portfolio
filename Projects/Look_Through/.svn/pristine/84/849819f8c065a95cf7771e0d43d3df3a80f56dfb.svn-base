#include "UnitManager.h"

UnitManager::UnitManager()
{

}

UnitManager::~UnitManager()
{

}

void UnitManager::addUnit(Unit* unit)
{
	mUnitList.push_back(unit);
}


void UnitManager::addUnit(Sprite sprite, Square* square)
{
	mUnitList.push_back(new Unit(sprite, square));
}

void UnitManager::clearList()
{
	mUnitList.clear();
}

void UnitManager::deleteUnits(Vector2D deleteLocation, int unitSize)
{
	Vector2D distance;

	for (int i = 0; i < mUnitList.size(); i++)
	{
		if (distance.getDistanceBetween(Vector2D(mUnitList.at(i)->mLocation.getX() + (unitSize/2), mUnitList.at(i)->mLocation.getY() + (unitSize / 2)), deleteLocation) <= (unitSize/2))
		{
			mUnitList.erase(mUnitList.begin() + i);
		}
	}
}

void UnitManager::killUnit(int num)
{
	mUnitList.erase(mUnitList.begin() + num);
}

void UnitManager::drawAll(GraphicsSystem* system)
{
	for (int i = 0; i < mUnitList.size(); i++)
	{
		mUnitList.at(i)->draw(system);
	}
}

void UnitManager::updateAll(float timePassed)
{
	for (int i = 0; i < mUnitList.size(); i++)
	{
		mUnitList.at(i)->update(timePassed);
	}
}

Unit* UnitManager::getUnit(int num)
{
	return mUnitList.at(num);
}

int UnitManager::getAmount()
{
	return mUnitList.size();
}

int UnitManager::getPoolAmount()
{
	return mUnitPool.size();
}
