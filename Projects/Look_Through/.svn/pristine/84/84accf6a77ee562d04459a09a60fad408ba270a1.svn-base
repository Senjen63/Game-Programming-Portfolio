/*
Author: Ryan-Tucker
Class: GPR-250 <Section 01>
Assignment: Assignment 1
Certification of Authenticity:
I certify that this assignment is entirely my own work.
*/

#include <iostream>
#include <cassert>
#include <string>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>
#include "GraphicsSystem.h"
#include "GraphicsBuffer.h"

using namespace std;

int main()
{
	PerformanceTracker* pPerformanceTracker = new PerformanceTracker;

	const string INIT_TRACKER_NAME = "init";
	const string DRAW_TRACKER_NAME = "draw";
	const string WAIT_TRACKER_NAME = "wait";

	const int DISP_WIDTH = 800;
	const int DISP_HEIGHT = 600;

	const string ASSET_PATH = "..\\..\\common\\assets\\";
	const string BACKGROUND_FILENAME = "steps.png";
	const string QUIMBY_FILENAME = "mayor_quimby.png";
	const string SMURF_FILENAME = "smurf_sprites.png";
	const string FONT_FILENAME = "cour.ttf";
	const string RED_FILENAME = "redbuffer.jpg";
	const string DIS_FILENAME = "backbuffer.jpg";
	const int FONT_SIZE = 45;
	const double SLEEP_TIME = 5.0;

	const Vector2D ZERO(0, 0);
	const int smurfRow = 4;
	const int smurfColumn = 4;

	GraphicsSystem* pDisplay = new GraphicsSystem(DISP_WIDTH, DISP_HEIGHT);

	pDisplay->init();//not working

	GraphicsBuffer* pBackground = new GraphicsBuffer(ASSET_PATH, BACKGROUND_FILENAME);

	GraphicsBuffer* pQuimby = new GraphicsBuffer(ASSET_PATH, QUIMBY_FILENAME);

	GraphicsBuffer* pSmurf = new GraphicsBuffer(ASSET_PATH, SMURF_FILENAME);

	Color Red(255, 0, 0);
	Color Black(0, 0, 0);

	Font cour(ASSET_PATH, FONT_FILENAME, FONT_SIZE, 0);

	GraphicsBuffer* memMap = new GraphicsBuffer(Red, DISP_WIDTH, DISP_HEIGHT);

	//Sprite Quimby Drawing

	Vector2D quimbyLoc(pQuimby->getWidth(), pQuimby->getHeight());

	Sprite quimbySprite(pQuimby, ZERO, pQuimby->getWidth(), pQuimby->getHeight());

	pDisplay->draw(memMap, ZERO, ZERO, quimbySprite, 1);

	//Text Drawing
	
	pDisplay->writeText(memMap, ZERO, cour, Black, "Curse you papa smurf!!!");

	Sprite memSprite(memMap, ZERO, memMap->getWidth(), memMap->getHeight());

	pDisplay->draw(pBackground, Vector2D(133, 100), ZERO, memSprite, 0.66666);

	//Smurf drawing

	int randX;
	int randY;

	for (int i = 0; i < smurfRow; i++)
	{
		for (int k = 0; k < smurfColumn; k++)
		{
			randX = rand() % DISP_WIDTH;
			randY = rand() % DISP_HEIGHT;

			Sprite smurfSprite(pSmurf, ZERO, pSmurf->getWidth() / smurfRow, pSmurf->getHeight() / smurfColumn);
			pDisplay->draw(pBackground, Vector2D(randX, randY), Vector2D(pSmurf->getWidth() / smurfRow * i, pSmurf->getHeight() / smurfColumn * k), smurfSprite, 1.0);
		}
	}

	//Background drawing

	Sprite stairSprite(pBackground, ZERO, DISP_WIDTH, DISP_HEIGHT);

	pDisplay->draw(ZERO, ZERO, stairSprite, 1);

	bool keepRunning = true;
	Timer timer;

	pDisplay->flip();

	timer.sleep(5000.0);

	pDisplay->saveBuffer(memMap, RED_FILENAME);
	pDisplay->saveBuffer(pBackground, DIS_FILENAME);

	delete pSmurf;
	delete pQuimby;
	delete pBackground;
	delete memMap;
	delete pDisplay;

	pPerformanceTracker->stopTracking("loop");

	pPerformanceTracker->clearTracker("loop");

	delete pPerformanceTracker;

	MemoryTracker::getInstance()->reportAllocations(cout);

	system("pause");
	return 0;
}