#pragma once
#include <Timer.h>
#include <iostream>
#include <cassert>
#include <string>
#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include "GraphicsSystem.h"
#include "InputSystem.h"
#include "Animation.h"
#include "Unit.h"
#include "UnitManager.h"
#include "GraphicsBufferManager.h"


using namespace std;

const string ASSET_PATH = "..\\..\\common\\assets\\";
const string BACK_FILE = "Woods.png";
const string DEAN_FILE = "dean_sprites.png";
const string SMURF_FILE = "smurf_sprites.png";
const int SMURF_SIZE = 4;
const int SPRITE_NUM = 16;
const int DISP_WIDTH = 800;
const int DISP_HEIGHT = 600;
const int FPS = 16;
const double TIME_TIL_SLEEP = 16.7;



class Game : public Trackable
{
public:
	Game();
	~Game();
	void init();
	void doLoop();
	void clean();


private:

	GraphicsSystem* mpDisplay;
	InputSystem* mControls;
	Animation* mpSmurfs;
	Animation* mpDeans;
	UnitManager* mpUnitList;
	GraphicsBufferManager* mpBuffList;


};

extern Game* gpGame;



/*
extern
//this is for the global game variable

clearTracker, startTracking, stopTracking
// this is for the doLoop function, also use start() and sleepUnitlElapsed() functions from timer in dean lib

al_isntall_mouse and keyboard
//also for doLoop()

void Unit::update(double dt)
{
	mAnimation.update(dt);
}
//unit update function

data within animation.h
	list of sprites make sure this is not dynamically allocated 
	timing info
		timePerFrame
		timeLeft
	current Sprite
	Looping?

	void Animation::update(double dt)
	{
		timeLeft -= dt;
		if(timeLeft <= 0)
		{
			index++
			timeLeft = timePerFrame
		}
	}
*/