#include "GraphicsBufferManager.h"

GraphicsBufferManager::~GraphicsBufferManager()
{
	cleanup();
}

void GraphicsBufferManager::cleanup()
{
	// go through all entries in map and delete
	for (auto iter : mMap)
	{
		GraphicsBuffer* pGraphicsBuffer = iter.second;
		delete pGraphicsBuffer;
	}

	mMap.clear();
}

void GraphicsBufferManager::createAndAddGraphicsBuffer(const GBKey& key, const char* picture)
{
	GraphicsBuffer* pGraphicsBuffer = NULL;

	// figure out if it exists already
	auto iter = mMap.find(key);

	// already in map?
	if (iter == mMap.end())
	{
		// not already there - just create and add it
		pGraphicsBuffer = new GraphicsBuffer(picture);
		mMap[key] = pGraphicsBuffer;
	}
}

void GraphicsBufferManager::destroyGraphicsBuffer(const GBKey& key)
{
	// figure out if it exists already
	auto iter = mMap.find(key);

	// already in map?
	if (iter != mMap.end())
	{
		delete iter->second;
		mMap.erase(iter);
	}
}

GraphicsBuffer* GraphicsBufferManager::getGraphicsBuffer(const GBKey& key) const
{
	auto iter = mMap.find(key);

	if (iter != mMap.end())
		return iter->second;
	else
		return NULL;
}