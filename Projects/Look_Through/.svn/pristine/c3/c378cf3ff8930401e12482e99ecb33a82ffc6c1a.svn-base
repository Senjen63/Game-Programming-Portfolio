#pragma once

#include <Trackable.h>
#include <Timer.h>
#include "Entity.h"

class Bullet : public Trackable
{
    friend class BulletPool;

public:
    Bullet(Entity* pEntity);
    Bullet(const Bullet&) = default;
    ~Bullet();

    void init() { mpEntity->init(); }
    void cleanUp() { if (mpEntity) mpEntity->cleanUp(); }
    void update(double deltaTime) { mpEntity->Update(deltaTime); }

    bool getInUse() const { return mInUse; }
    Entity* getEntity() const { return mpEntity.get(); }
    double getTimeSinceMade() const { return mTimer.getElapsedTime(); }

private:
    void setInUse(bool inUse);

    std::shared_ptr<Entity> mpEntity;
    bool mInUse = false;

    Timer mTimer;
};

const Bullet EMPTY_BULLET(nullptr);
