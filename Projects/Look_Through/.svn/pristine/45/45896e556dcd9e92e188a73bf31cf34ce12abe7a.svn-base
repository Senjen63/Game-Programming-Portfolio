#pragma once
#include <iostream>
#include <cassert>
#include <string>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>

#include "GraphicsSystem.h"
#include "GraphicsBuffer.h"
#include "Unit.h"
#include "Animation.h"
#include "InputSystem.h"

using namespace std;

const string ASSET_PATH = "..\\..\\common\\assets\\";
const string BACKGROUND_PATH = "woods.png";
const string SMURF_PATH = "smurf_sprites.png";
const string DEAN_PATH = "dean_sprites.png";


const int SPRITE_HEIGHT = 60;
const int SPRITE_WIDTH = 60;
const float ANIM_SPEED = 40.0;
const float ANIM_STEP = 4.0;

const int DISP_WIDTH = 800;
const int DISP_HEIGHT = 600;
const float TARGET_FRAMETIME = 1000.0 / 60.0; // 60 FPS

const float DEFAULT_TARGET_TIME = 1000.0 / 60.0; // 60 FPS

const string INIT_TRACKER_NAME = "Init";
const string GRAPHICS_INIT_TRACKER_NAME = "GraphicsSystem Init";
const string INPUT_INIT_TRACKER_NAME = "InputSystem Init";
const string ASSET_LOAD_TRACKER_NAME = "Asset Loading";

const string LOOP_TRACKER_NAME = "Loop";


class Game : public Trackable
{
private:
	GraphicsSystem mDisplay;
	InputSystem mInput;

	GraphicsBuffer* mpBackground;
	GraphicsBuffer* mpSmurfSheet;
	GraphicsBuffer* mpDeanSheet;

	Animation* mpPlayerAnim;
	Unit* mpPlayer;

	float mTargetTime;

	bool mIsActive;

public:
	Game();
	Game(int height, int width, float targetTime);
	~Game();

	bool init();
	void deinit();

	int getHeight();
	int getWidth();

	void doLoop();
};

extern Game* gpGame;
