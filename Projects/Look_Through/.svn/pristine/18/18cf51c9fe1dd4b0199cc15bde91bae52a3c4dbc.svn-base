#pragma once
#include <list>
#include <fstream>

#include "EventListener.h"
#include "CollisionObj.h"
#include "PowerUpManager.h"
#include "LevelManager.h"
#include "WinEvent.h"

// This should store level objects.

// These objects are Units that specifically listen for a snake location event,
// which then handle an event relating to that given position.
// These objects are destroyed and replaced when a new level is loaded.

// This object will also store data relating to:
// - What the current level is
// - The current power up manager and its respective data regarding power-up likelihood, spawn intervals, and score increase
// - Snake info including starting segments, starting position, and how many segments are required until the next level

// This object is also responsible for loading a new level, reading in info from a level file.

class LevelManager// : public EventListener
{
public:
	LevelManager(float cellSize);
	~LevelManager();

	void reloadCurrentLevel();
	void loadNextLevel();
	void clearCurrentLevel();

	void addCollision(std::pair<float, float> position);
	void draw(GraphicsSystem* currentGraphicsSystem);
	void update(float deltaTime);

	SnakeManager* getSnake() { return mpSnakeManager; }
	int getSegmentsToNextLevel() { return mSegmentsToNextLevel; }
	
private:
	const string LEVEL_DIRECTORY = "Assets/";
	int mCurrentLevel = 0;

	std::list<CollisionObj*> mCollisionList;
	float mCellSize;
	GraphicsBuffer* mpCollisionBuffer;
	Animation* mpCollisionAnimation;

	bool mManagersInitialized = false;

	// Snake Info
	SnakeManager* mpSnakeManager;
	std::pair<float, float> mPlayerStartPos;
	int mStartingSegments;
	float mStartingSpeed;
	int mSegmentsToNextLevel;

	// Powerup Manager Info
	PowerUpManager* mpPowerUpManager;
	std::pair<float, float>mDisplaySize;
	float mTimePerUpdate;
	float mScorePerPowerUp;
};