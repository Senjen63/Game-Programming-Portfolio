#pragma once
#include "Animation.h"

#include "GraphicsSystem.h"
#include "MathHelp.h"

#include <Vector2D.h>
#include <vector>

#include <Trackable.h>

class Component;

class Entity
{
public:
	Entity();
	Entity(Animation* anim, Vector2D pos, float scale = 1, bool isEnabled = true);
	~Entity();

	void Draw(GraphicsSystem* pDisplay);

	void init();
	void cleanUp();
	void Update(double deltaTime);

	void addComponent(Component* component);
	Component* getComponent(const std::string& type);

	void addtoAngle(float add);
	void setAngle(float angle) { mRotation = angle; };
	float getAngle() { return mRotation; };

	bool const getInitted() { return isInitted; };

	Vector2D const getForwardVector() { return Vector2D(cos(mRotation * (float)degToRad), sin(mRotation * (float)degToRad)); }; //might be getting trig wrong, will correct later

	Vector2D getPosition() const { return mPosition; }
	void setPosition(const Vector2D& pos) { mPosition = pos; }
	void addPosition(const Vector2D& addPos) { mPosition += addPos; }

	float getScale() const { return mScale; }
	Vector2D getMaxSize() const { return mpAnim->getMaxSize() * mScale; }

	bool getIsEnabled() const { return mIsEnabled; }
	void setIsEnabled(bool enabled) { mIsEnabled = enabled; }

private:
	Animation* mpAnim; 
	Vector2D mPosition;
	std::vector<Component*> mComponent;
	float mRotation = 0;
	bool isInitted;
	float mScale;

	bool mIsEnabled = true;
};




