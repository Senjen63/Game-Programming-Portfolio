#include "Game.h"

#include <fstream>

#include <PerformanceTracker.h>
#include <Timer.h>

#include "GraphicsBufferManager.h"
#include "LevelManager.h"
#include "UnitManager.h"

#include "GraphicsSystem.h"
#include <EventSystem.h>
#include "InputSystem.h"
#include "InputTranslator.h"

#include "ObjectCollisionEvent.h"
#include "SecondPassedEvent.h"
#include "PlayerActionEvent.h"
#include "ScoreChangeEvent.h"
#include "MouseInputEvent.h"
#include "InputEvent.h"
#include "GameEvent.h"

#include "GraphicsBuffer.h"
#include "Animation.h"
#include "Sprite.h"
#include "Level.h"
#include "Font.h"
#include "Unit.h"

Game* Game::mpsGame = nullptr;

Game* Game::getInstance()
{
	return mpsGame;
}
void Game::createInstance()
{
	if (mpsGame == nullptr)
	{
		mpsGame = new Game;
	}	
}
void Game::destroyInstance()
{
	if (mpsGame != nullptr)
	{
		delete mpsGame;
		mpsGame = nullptr;
	}
}

GraphicsBufferManager* Game::getGraphicsBufferManager()
{
	return mpGraphicsBufferManager;
}
UnitManager* Game::getUnitManager()
{
	return mpUnitManager;
}

GraphicsSystem* Game::getGraphicsSystem()
{
	return mpGraphicsSystem;
}
EventSystem* Game::getEventSystem()
{
	return mpEventSystem;
}
InputSystem* Game::getInputSysyem()
{
	return mpInputSystem;
}

Game::~Game()
{
	cleanup();
}

void Game::init(int width, int height)
{
	mDispWidth = width;
	mDispHeight = height;

	loadFile();

	GraphicsSystem::createInstance();
	mpGraphicsSystem = GraphicsSystem::getInstance();
	mpGraphicsSystem->init(width, height);
	
	mpEventSystem = EventSystem::getInstance();	
	mpEventSystem->addListener((EventType)GameEventType::PLAYER_ACTION_EVENT, this);
	mpEventSystem->addListener((EventType)GameEventType::SCORE_CHANGE_EVENT, this);
	mpEventSystem->addListener((EventType)GameEventType::LEVEL_COMPLETE_EVENT, this);
	mpEventSystem->addListener((EventType)GameEventType::OBJECT_COLLISION_EVENT, this);
	
	mpInputSystem = new InputSystem;
	mpInputSystem->init();

	mpTranslator = new InputTranslator;

	mpGraphicsBufferManager = new GraphicsBufferManager;

	mpGraphicsBufferManager->addGraphicsBuffer(mSpriteSheetFilename, mSpriteSheetFilename);
	mpGraphicsBufferManager->addGraphicsBuffer(mStartScreenFilename, mStartScreenFilename);
	mpGraphicsBufferManager->addGraphicsBuffer(mWinScreenFilename, mWinScreenFilename);
	mpGraphicsBufferManager->addGraphicsBuffer(mLoseScreenFilename, mLoseScreenFilename);
	/*mpGraphicsBufferManager->addGraphicsBuffer(mAssetPath + SMURF_FILENAME, SMURF_FILENAME);
	mpGraphicsBufferManager->addGraphicsBuffer(mAssetPath + DEAN_FILENAME, DEAN_FILENAME);*/

	mpWallAnim = new Animation(mpGraphicsBufferManager->getGraphicsBuffer(mSpriteSheetFilename), mSpritesPerRow, ROWS_PER_ANIM, mSpriteWidth, mSpriteHeight, mWallRow);
	mpSnakeAnim = new Animation(mpGraphicsBufferManager->getGraphicsBuffer(mSpriteSheetFilename), mSpritesPerRow, ROWS_PER_ANIM, mSpriteWidth, mSpriteHeight, mSnakeRow);
	mpFoodAnim = new Animation(mpGraphicsBufferManager->getGraphicsBuffer(mSpriteSheetFilename), mSpritesPerRow, ROWS_PER_ANIM, mSpriteWidth, mSpriteHeight, mFoodRow);
	mpPointsAmim = new Animation(mpGraphicsBufferManager->getGraphicsBuffer(mSpriteSheetFilename), mSpritesPerRow, ROWS_PER_ANIM, mSpriteWidth, mSpriteHeight, mPointsRow);
	mpSpeedAnim = new Animation(mpGraphicsBufferManager->getGraphicsBuffer(mSpriteSheetFilename), mSpritesPerRow, ROWS_PER_ANIM, mSpriteWidth, mSpriteHeight, mSpeedRow);
	mpSlowAnim = new Animation(mpGraphicsBufferManager->getGraphicsBuffer(mSpriteSheetFilename), mSpritesPerRow, ROWS_PER_ANIM, mSpriteWidth, mSpriteHeight, mSlowRow);

	mpHUDFont = new Font(ASSET_PATH + FONT_FILENAME, HUD_FONT_SIZE);
	mpHUD = new HUD(mpHUDFont, Color());

	mpUnitManager = new UnitManager(mpWallAnim, mpSnakeAnim, mpFoodAnim, mpPointsAmim, mpSpeedAnim, mpSlowAnim);

	mpLevelManager = new LevelManager;
	mpLevelManager->addFilename(m1stLevelFilename);
	mpLevelManager->addFilename(m2ndLevelFilename);
	mpLevelManager->addFilename(m3rdLevelFilename);	
}
void Game::cleanup()
{
	// Clean up game objects
	delete mpLevelManager;
	if (mpCurrentLevel) { delete mpCurrentLevel; }

	delete mpUnitManager;

	delete mpHUD;
	delete mpHUDFont;

	delete mpWallAnim;
	delete mpSnakeAnim;
	delete mpFoodAnim;
	delete mpPointsAmim;
	delete mpSpeedAnim;
	delete mpSlowAnim;

	// Clean up game system things
	delete mpGraphicsBufferManager;

	// Clean up game systems
	delete mpTranslator;
	delete mpInputSystem;	
	mpEventSystem = nullptr;
	GraphicsSystem::destroyInstance();	
	mpGraphicsSystem = nullptr;
}

void Game::doLoop()
{
	bool makeLevel = true;
	bool unitIsSmurf = true;

	//double timeToSwap = ANIM_SWAP_DELAY_IN_MS;
	double timeToPause = 100;

	double timePassedInMS = 0;
	int timePassedInSec = 0;
	int framesThisSecond = 0;

	Color offWhite = Color(240, 240, 240, 255);

	PerformanceTracker performanceTracker;
	string trackerName = "loop";
	

	while (mKeepGoing)
	{
		performanceTracker.clearTracker(trackerName);
		performanceTracker.startTracking(trackerName);
		Timer loopTimer;
		loopTimer.start();
		
		// get input
		
		//bool didPressEnter = mpInputSystem->getKeyState(KeyCode::ENTER_KEY);
		//bool didPressSpace = mpInputSystem->getKeyState(KeyCode::SPACE_KEY);		
		//bool didLeftClick = mpInputSystem->getMouseState(MouseCode::LEFT_CLICK);
		//bool didRightClick = mpInputSystem->getMouseState(MouseCode::RIGHT_CLICK);
		//Vector2D mousePos = mpInputSystem->getMousePosition();
		//
		// do updates
		//
		//if (doSpeedUp && !doSlowDown)
		//{
		//	mpSmurfAnim->speedUp();
		//	mpDeanAnim->speedUp();
		//}
		//
		//if (doSlowDown && !doSpeedUp)
		//{
		//	mpSmurfAnim->slowDown();
		//	mpDeanAnim->slowDown();
		//}
		//
		//timeToSwap -= FRAME_INTERVAL_IN_MS;			
		//timeToPause -= FRAME_INTERVAL_IN_MS;		
		//
		//if (didPressEnter && timeToSwap < 0)
		//{
		//	if (unitIsSmurf)
		//	{
		//		mpUnitManager->getLastUnit()->toggleAnimation();				
		//	}
		//	else
		//	{
		//		mpUnitManager->getLastUnit()->toggleAnimation();				
		//	}
		//	unitIsSmurf = !unitIsSmurf;
		//	timeToSwap = ANIM_SWAP_DELAY_IN_MS;
		//}
		//
		//if (didPressSpace && timeToPause < 0)
		//{
		//	
		//}
		//
		//if (didLeftClick && !didRightClick)
		//{
		//	mpUnitManager->addUnitAt(mousePos, *mpSmurfAnim);
		//}
		//
		//if (didRightClick && !didLeftClick)
		//{
		//	mpUnitManager->deleteAllUnitsAt(mousePos);
		//}

		mpInputSystem->update();

		if (mGameActive)
		{
			mpCurrentLevel->update(FRAME_INTERVAL_IN_MS);
			mpUnitManager->updateAll(FRAME_INTERVAL_IN_MS);
		}
		// draw game
		
		if (mGameActive)
		{
			mpGraphicsSystem->fillColor(offWhite);
			mpUnitManager->drawAll();
			mpHUD->draw();
		}
		else if (mGameWon)
		{
			mpGraphicsSystem->draw(ORIGIN, mpGraphicsBufferManager->getGraphicsBuffer(mWinScreenFilename));
		}
		else if(mGameOver)
		{
			mpGraphicsSystem->draw(ORIGIN, mpGraphicsBufferManager->getGraphicsBuffer(mLoseScreenFilename));
		}
		else
		{
			mpGraphicsSystem->draw(ORIGIN, mpGraphicsBufferManager->getGraphicsBuffer(mStartScreenFilename));
		}
		

		mpGraphicsSystem->flip();

		timePassedInMS += FRAME_INTERVAL_IN_MS;
		framesThisSecond++;

		if (timePassedInMS - ((double)timePassedInSec * ONE_SECOND_IN_MS) > ONE_SECOND_IN_MS)
		{
			mpEventSystem->fireEvent(SecondPassedEvent(framesThisSecond));
			timePassedInSec++;
			framesThisSecond = 0;
		}
		
		loopTimer.sleepUntilElapsed(FRAME_INTERVAL_IN_MS);
		performanceTracker.stopTracking(trackerName);

		//cout << "Frame took: " << pPerformanceTracker->getElapsedTime(trackerName) << "\n";
	}	
}

void Game::handleEvent(const Event& theEvent)
{
	if (theEvent.getType() == (EventType)GameEventType::PLAYER_ACTION_EVENT)
	{
		const PlayerActionEvent& actionEvent = static_cast<const PlayerActionEvent&>(theEvent);
		parsePlayerAction(actionEvent.getAction());
	}
	else if (theEvent.getType() == (EventType)GameEventType::SCORE_CHANGE_EVENT)
	{
		const ScoreChangeEvent& scoreEvent = static_cast<const ScoreChangeEvent&>(theEvent);		
		mScore += scoreEvent.getScore();
	}
	else if (theEvent.getType() == (EventType)GameEventType::OBJECT_COLLISION_EVENT)
	{
		const ObjectCollisionEvent& collisionEvent = static_cast<const ObjectCollisionEvent&>(theEvent);
		
		switch (collisionEvent.getType())
		{
		case UnitType::WALL:
			endGame();
			break;
		case UnitType::SNAKE:
			endGame();
			break;
		default:
			break;
		}
	}
	else if (theEvent.getType() == (EventType)GameEventType::LEVEL_COMPLETE_EVENT)
	{
		mLevelsCompleted++;
		if (mLevelsCompleted >= mTotalNumLevels)
		{
			mGameActive = false;
			mGameWon = true;
		}
		else
		{
			mpHUD->resetTime();
			delete mpCurrentLevel;
			mpCurrentLevel = mpLevelManager->getNextLevel();
		}		
	}	
}

void Game::endGame()
{
	mGameOver = true;	
	mGameActive = false;
	mScore = 0;
	mpHUD->resetScore();
	mpHUD->resetTime();
}

void Game::restartGame()
{
	mpLevelManager->restartAtFirstLevel();
	if (mpCurrentLevel) { delete mpCurrentLevel; }
	mpCurrentLevel = mpLevelManager->getCurrentLevel();
}

void Game::parsePlayerAction(PlayerAction action)
{
	switch (action)
	{
	case PlayerAction::QUIT_GAME:
		mKeepGoing = false;
		break;

	case PlayerAction::START_GAME:
		
		if (!mGameActive)
		{
			mLevelsCompleted = 0;
			mGameOver = false;
			mGameWon = false;
			mGameActive = true;
			restartGame();
		}
		
		break;

	case PlayerAction::SKIP_LEVEL:
		if (mGameActive)
		{
			delete mpCurrentLevel;
			mpHUD->resetTime();
			mpCurrentLevel = mpLevelManager->getNextLevel();
		}		
		break;

	case PlayerAction::RESTART_LEVEL:
		if (mGameActive)
		{
			delete mpCurrentLevel;
			mpHUD->resetTime();
			mpCurrentLevel = mpLevelManager->getCurrentLevel();
		}		
		break;
					
	default:		
		break;
	}
}

void Game::loadFile()
{
	ifstream input(mGameDataFilename);
	if (input.good())
	{
		string key;
		while (!input.eof())
		{
			input >> key;

			if (key == "filenames")
			{
				input >> mSpriteSheetFilename;
				input >> mStartScreenFilename;
				input >> mWinScreenFilename;
				input >> mLoseScreenFilename;
				input >> m1stLevelFilename;
				input >> m2ndLevelFilename;
				input >> m3rdLevelFilename;
			}
			else if (key == "spriteinfo")
			{
				input >> mSpriteWidth;
				input >> mSpriteHeight;
				input >> mSpritesPerRow;

				input >> mWallRow
					>> mSnakeRow
					>> mFoodRow
					>> mPointsRow
					>> mSpeedRow
					>> mSlowRow;
			}
			else if (key == "size")
			{

			}
		}
		input.close();
	}	
}



