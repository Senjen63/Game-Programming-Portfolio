#pragma once

#include "Game.h"
#include "GraphicsSystem.h"
#include "AnimationManager.h"

class Unit
{
public:
	Unit(std::pair<float, float>location, AnimationManager* animationManager, std::pair<float, float>scale);
	Unit(std::pair<float, float>location, std::pair<float, float>scale, std::string animationDataFilePath);
	virtual ~Unit();

	void deleteSelf();
	virtual void update(float deltaTime);
	std::vector<Unit*>collision(std::pair<int, int>positionToCheck);
	virtual void draw(GraphicsSystem* currentGraphicsSystem);
	void setAnimation(std::string animationName);

	Animation* getAnimation() { return mpAnimationManager->getCurrentAnimation(); }
	AnimationManager* getAnimationManager() { return mpAnimationManager; }
	std::pair<float, float> getLocation() { return mLocation; }
	void updateLocation(std::pair<float, float> newLocation) { mLocation = newLocation; }
	std::pair<float, float> getScale() { return mScale; }
	std::pair<float, float> getSize() { return mSize; }

	void updateScale(std::pair<float, float> newScale);

private:
	std::pair<float, float> mLocation;
	std::pair<float, float> mScale;
	std::pair<float, float> mSize;
	AnimationManager* mpAnimationManager;
	bool isCollidable = false;
};