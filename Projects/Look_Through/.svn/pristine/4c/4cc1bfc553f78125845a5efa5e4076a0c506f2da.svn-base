#include "graphicsSystem.h"

GraphicsSystem::GraphicsSystem()
{
	mpGraphicsDisplay = NULL;
}
GraphicsSystem::GraphicsSystem(int width, int height)
{
	mpGraphicsDisplay = al_create_display(width, height);
	assert(mpGraphicsDisplay);
}
GraphicsSystem::~GraphicsSystem()
{
	GraphicsCleanup();
}
void GraphicsSystem::GraphicsInit(int width, int height)
{
	mpGraphicsDisplay = al_create_display(width, height);
	assert(mpGraphicsDisplay);
}
void GraphicsSystem::GraphicsCleanup()
{
	al_destroy_display(mpGraphicsDisplay);
}
void GraphicsSystem::FlipDisplay()
{
	al_flip_display();
}
int GraphicsSystem::GetHeight()
{
	//return mheight;
	return al_get_display_height(mpGraphicsDisplay);
}
void GraphicsSystem::SetHeight(int newHeight)
{
	mheight = newHeight;
}
int GraphicsSystem::GetWidth()
{
	return al_get_display_width(mpGraphicsDisplay);
}
void GraphicsSystem::SetWidth(int newWidth)
{
	mwidth = newWidth;
}
ALLEGRO_DISPLAY* GraphicsSystem::GetBackBuffer()
{
	return mpGraphicsDisplay;
}
ALLEGRO_BITMAP* GraphicsSystem::GetBitmap()
{
	return al_get_backbuffer(mpGraphicsDisplay);
}
void GraphicsSystem::Draw(GraphicsBuffer* pGraphicsBuffer)
{
	al_draw_bitmap(pGraphicsBuffer->GetBitmap(), 0, 0, 0);
}
void GraphicsSystem::Draw(Vector2D sourceLocation, Sprite* pSprite, int displayWidth, int displayHeight)
{
	al_draw_bitmap_region(pSprite->GetGraphicsBuffer()->GetBitmap(), sourceLocation.getX(), sourceLocation.getY(), pSprite->GetSpriteWidth(), pSprite->GetSpriteHeight(), rand() % (displayWidth - pSprite->GetSpriteWidth()), rand() % (displayHeight - pSprite->GetSpriteHeight()), 0);
}
void GraphicsSystem::Draw(GraphicsBuffer* pGraphicsBuffer, Vector2D sourceLocation, float scale)
{
	al_set_target_bitmap(al_get_backbuffer(GetBackBuffer()));
	al_draw_scaled_bitmap(pGraphicsBuffer->GetBitmap(), 0, 0, pGraphicsBuffer->GetWidth(), pGraphicsBuffer->GetHeight(), sourceLocation.getX(), sourceLocation.getY(), pGraphicsBuffer->GetWidth() * scale, pGraphicsBuffer->GetHeight() * scale, 0);
}
void GraphicsSystem::Draw(GraphicsBuffer* pTargetGraphicsBuffer, GraphicsBuffer* pSecondGraphicsBuffer, Vector2D sourceLocation, float scale)
{
	ALLEGRO_BITMAP* bitmap = al_get_target_bitmap();
	al_set_target_bitmap(pTargetGraphicsBuffer->GetBitmap());
	al_draw_scaled_bitmap(pSecondGraphicsBuffer->GetBitmap(), 0, 0, pSecondGraphicsBuffer->GetWidth(), pSecondGraphicsBuffer->GetHeight(), sourceLocation.getX(), sourceLocation.getY(), pSecondGraphicsBuffer->GetWidth() * scale, pSecondGraphicsBuffer->GetHeight() * scale, 0);
	al_set_target_bitmap(bitmap);
}
void GraphicsSystem::Draw(GraphicsBuffer* pGraphicsBuffer, Vector2D sourceLocation, Sprite* pSprite, float scale)
{
	al_draw_scaled_bitmap(pGraphicsBuffer->GetBitmap(), 0, 0, pSprite->GetSpriteWidth(), pSprite->GetSpriteHeight(), sourceLocation.getX(), sourceLocation.getY(), pSprite->GetSpriteWidth() * scale, pSprite->GetSpriteHeight() * scale, 0);
}
void GraphicsSystem::WriteText(Vector2D sourceLocation, Font* pFont, Color color, string text)
{
	al_draw_text(pFont->GetFont(), color.GetColor(), sourceLocation.getX(), sourceLocation.getY(), ALLEGRO_ALIGN_CENTER, text.c_str());
}
void GraphicsSystem::WriteText(GraphicsBuffer* pGraphicsBuffer, Vector2D sourceLocation, Font* pFont, Color color, string text)
{
	ALLEGRO_BITMAP* pBitmap = al_get_target_bitmap();
	al_set_target_bitmap(pGraphicsBuffer->GetBitmap());
	al_draw_text(pFont->GetFont(), color.GetColor(), sourceLocation.getX(), sourceLocation.getY(), ALLEGRO_ALIGN_LEFT, text.c_str());
	al_set_target_bitmap(pBitmap);
}
void GraphicsSystem::SaveBuffer(ALLEGRO_BITMAP* pSaveBuffer, string fileName)
{
	al_save_bitmap(fileName.c_str(), pSaveBuffer);
}
