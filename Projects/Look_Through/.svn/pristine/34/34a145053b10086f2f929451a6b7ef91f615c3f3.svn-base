#pragma once
#include <vector>
#include <EventListener.h>
#include <Event.h>
#include <EventSystem.h>

#include "GraphicsSystem.h"
#include "InputSystem.h"
#include "InputTranslator.h"
#include "GraphicsBufferManager.h"
#include "LevelManager.h"
#include "SnakeManager.h"
#include "HUD.h"

class Game : public EventListener
{
public:
	static const int TILE_SIZE = 32;
	static const int LEVEL_HEIGHT = 18;
	static const int LEVEL_WIDTH = 24;
	static const int FONT_SIZE = 48;
	static const int DIR_COUNT = 4;

	const std::string FONT_ASSET_PATH = "Assets\\";
	const std::string SPRITE_ASSET_PATH = "Assets\\Sprites\\";
	const std::string SPRITE_FILENAME = "sprites.txt";
	std::string const getFontPath() { return FONT_ASSET_PATH + mFontFile; }

	const double SPEED_DOWN_LEVEL = 1.8;
	const double SPEED_UP_LEVEL = 1.4;
	const double FRUIT_SPEED_CHANGE = 1.1;

	static void createGame(int width, int height, double fps);
	static void deleteGame();
	static Game* instance();

	bool init();
	void cleanup();

	GraphicsSystem* getGraphics() { return mGraphics; }
	InputSystem* getInputs() { return mInputs; }
	GraphicsBufferManager* getBuffers() { return mBuffers; }

	void doLoop();
	void handleEvent(const Event& theEvent);
private:
	Game(int width, int height, double fps);
	~Game();

	GraphicsSystem* mGraphics;
	InputSystem* mInputs;
	InputTranslator* mTranslator;
	GraphicsBufferManager* mBuffers;
	LevelManager* mLevels; 
	EventSystem* mEvents;
	SnakeManager* mSegments;
	HUD* mHUD;
	Font* mFont;

	double mFPS;
	static Game* mpsInstance;
	bool mInitted = false;
	int mCurrentScore;
	int mNextDir;
	std::string mGameState;
	bool toQuit;

	std::string mBackgroundFile;
	std::string mWallFile;
	std::string mHeadFiles[4];
	std::string mBodyFiles[4];
	std::string mPowerupFiles[4];
	std::string mFontFile;

	Animation* mWallAnim;
	Animation* mHeadAnims[4];
	Animation* mBodyAnims[4];
	Animation* mPowerupAnims[4];
};