#include "TruckComponent.h"
#include "SpawnEvent.h"

void TruckComponent::moveTruck()
{
	mpUnit->setPos(mpUnit->getPos() + (mCurrentDirection * mSpeed)); // Move to new position
	checkInLevel();
}


TruckComponent::TruckComponent(int speed, Vector2D startDirection)
{
	mSpeed = speed;
	mCurrentDirection = startDirection;
}


void TruckComponent::init()
{
	CollisionDriver* colDriver = static_cast<CollisionDriver*>(&mpUnit->getComponent(CollisionDriver::COLLISION_DRIVER_COMPONENT_NAME));
	colDriver->addCollisionObserver(this);
}


void TruckComponent::update(float dt)
{
	mElapTime += dt;
	if (mElapTime >= mTargetTime)
	{
		moveTruck();
		mElapTime -= mTargetTime;
	}
}


void TruckComponent::draw(GraphicsSystem* gSys)
{
	assert(mpUnit != nullptr);
}


void TruckComponent::handleEvent(const Event& theEvent)
{
}


std::string TruckComponent::getIdentifier()
{
	return "Truck";
}


void TruckComponent::checkInLevel()
{
	Vector2D newPos = mpUnit->getPos();
	Vector2D windowSize = Game::getInstance()->getWindowSize();
	if (newPos.getX() < 0 || newPos.getX() >= windowSize.getX() || newPos.getY() < 0 || newPos.getY() >= windowSize.getY())
	{
		EventSystem::getInstance()->fireEvent(SpawnTruckEvent(getAttachedUnit()->getY(), getCurDir(), 1));
		Game::getInstance()->getUnitManager()->deleteUnit(*getAttachedUnit());
	}
}

void TruckComponent::onCollision(Unit* unit, CollisionLayer layer)
{
	/*switch (layer)
	{
	case(CollisionLayer::SNAKE_HEAD):
		EventSystem::getInstance()->fireEvent(SnakeDiedEvent());
		std::cout << "Truck Collision Received" << std::endl;

		break;
	}*/
}

bool TruckComponent::checkCollision(CollisionLayer layer)
{
	return false;
}
