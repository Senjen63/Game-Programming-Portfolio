//BP
#include "Game.h"
#include "Animation.h"

//Might want to change the order of the params for the two below
Animation::Animation(int fps, bool loopCondition)
{
	mFramerate = fps;
	mSpriteIndex = 0;
	mSpriteTiming = Game::getGameInstance()->getTimeScale() / mFramerate;
	mRemainingTime = mSpriteTiming;
	mKeepLooping = loopCondition;
}

Animation::Animation(GraphicsBuffer* frames, int fps, bool loopCondition)
{
	int horiPieces = frames->getSections().getX();
	int vertPieces = frames->getSections().getY();
	for (int i = 0; i < vertPieces; i++)
	{

		for (int j = 0; j < horiPieces; j++)
		{

			Sprite thisSprite = Sprite(frames, 
				Vector2D((frames->getWidth() / horiPieces) * j,
				(frames->getHeight() / vertPieces) * i),
				Vector2D(frames->getWidth() / horiPieces,
				frames->getHeight() / vertPieces));
			addNewSprite(thisSprite);

		}

	}
	mKeepLooping = loopCondition;
	mFramerate = fps;
    mSpriteIndex = 0;
    mSpriteTiming = Game::getGameInstance()->getTimeScale() / mFramerate;
    mRemainingTime = mSpriteTiming;
}

Animation::~Animation()
{
	//Unused destructor
}

void Animation::changeSpriteSpeed(int speed)
{
	mFramerate = speed;
	mSpriteTiming = oneSecond / speed;
}

void Animation::updateSprite(float timePassed)
{
	mRemainingTime = (mRemainingTime - timePassed);
	if (mRemainingTime <= 0)
	{

		mRemainingTime = mSpriteTiming;
		mSpriteIndex = (mSpriteIndex + 1);
		if (mKeepLooping && mSpriteIndex >= mSpriteList.size())
		{

			mSpriteIndex = 0;

		}

	}
}

void Animation::synchronizeSprites(const Animation& previous)
{
	if (previous.getFrames() == mSpriteList.size())
	{

		mSpriteIndex = previous.getThisFrame();

	}
}