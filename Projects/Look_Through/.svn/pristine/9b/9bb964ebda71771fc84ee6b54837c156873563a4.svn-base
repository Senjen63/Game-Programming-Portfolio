#include "Game.h"

Game* Game::mpsGame = NULL;

Game::Game()
{
    mpDisplay = new GraphicsSystem(DISP_WIDTH, DISP_HEIGHT);
    
}

void Game::init()
{    
    mpDisplay->init();
    mInput->init();
    mBufferManager.makeBuffer(BACKGROUND_FILENAME, ASSET_PATH + BACKGROUND_FILENAME);
    mBufferManager.makeBuffer(SMURFS_FILENAME, ASSET_PATH + SMURFS_FILENAME);
    mBufferManager.makeBuffer(DEAN_SMURFS_FILENAME, ASSET_PATH + DEAN_SMURFS_FILENAME);
}

Game::~Game()
{
    cleanUp();
}

Game* Game::getInstance()
{
    if (mpsGame == NULL)
    {
        mpsGame = new Game;
    }
    return mpsGame;
}

GraphicsBuffer* Game::getGraphicsBuffer(std::string index)
{
    return mBufferManager.getBuffer(index);
}

void Game::doLoop()
{
    bool keepGoing = true;
    bool paused = false;

    PerformanceTracker* pPerformanceTracker = new PerformanceTracker;
    Timer loopTimer;
    float pauseTime = SLEEP_TIME;
    float animTime = 0;

    while (keepGoing)
    {
        pPerformanceTracker->clearTracker("loop");
        pPerformanceTracker->startTracking("loop");
        loopTimer.start();
        animTime += loopTimer.getElapsedTime();

        if (mUnitManager.getUnitCount() > 0 && !paused)
        {
            if (animTime > mUnitManager.getUnit()->getTiming())
            {
                mUnitManager.UpdateAll();
                animTime = 0;
            }
        }

        mpDisplay->Draw(mBufferManager.getBuffer(BACKGROUND_FILENAME), Vector2D(), .5);
        mUnitManager.DrawAll(mpDisplay);
        mpDisplay->flip();

        if (mInput->isMousePressed(1))
        {
            mUnitManager.makeUnit();
            mUnitManager.setUnitPos(mInput->getMousePosition() + OFFSET);
        }

        if (mInput->isMousePressed(2))
        {
            mUnitManager.clearUnitsinArea(mInput->getMousePosition());
        }

        if (mInput->isKeyPressed(ALLEGRO_KEY_F))
        {
            pauseTime -= 2.5;
            if (pauseTime <= 0)
            {
                pauseTime = 0.1;
            }
            
        }
        else if (mInput->isKeyPressed(ALLEGRO_KEY_S))
        {
            pauseTime += 2.5;
        }
        else if (mInput->isKeyPressed(ALLEGRO_KEY_ENTER))
        {
            mUnitManager.swapLast();
        }
        else if (mInput->isKeyPressed(ALLEGRO_KEY_SPACE))
        {
            mUnitManager.stopOrStart();
        }
        else if (mInput->isKeyPressed(ALLEGRO_KEY_ESCAPE))
        {
            keepGoing = false;
        }
       
       loopTimer.sleepUntilElapsed(pauseTime);
       pPerformanceTracker->stopTracking("loop");
    }
    delete pPerformanceTracker;
}

void Game::cleanUp()
{
    
    mpDisplay->cleanUp();
    
    mBufferManager.cleanUp();
    mUnitManager.cleanUp();
    
    delete mpDisplay;
}
