#pragma once
#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>

#include <iostream>
#include <cassert>
#include <string>
#include <Vector2D.h>


#include "sprite.h"
#include "color.h"
#include "font.h"

using namespace std;

class GraphicsSystem //Display Based, Init/Cleanup, height width display, back buffer (is graphics buffer we made), al_flip_display()
{
	//Constructor shouldnt call init, destructor should call cleanup
	//Draw sprite at scale -to given GraphicsBuffer and one to draw to backbuffer
	//Write text (location,font,color,text) to backbuffer of graphics buffer
	//savebuffer to file
public:
	GraphicsSystem();
	GraphicsSystem(int, int);
	~GraphicsSystem();

	void GraphicsInit(int, int);
	void GraphicsCleanup();

	//Accessors
	void FlipDisplay();
	int GetHeight();
	void SetHeight(int);
	int GetWidth();
	void SetWidth(int);
	//Need get bitmap and buffer
	ALLEGRO_DISPLAY* GetBackBuffer();
	ALLEGRO_BITMAP* GetBitmap();

	//Draw to backbuffer
	//Draw to graphicsbuffer
	//Write text to back buffer
	//Write text to graphicsbuffer
	//save content from graphics buffer to file
	void Draw(GraphicsBuffer* pGraphicsBuffer); //Takes Graphicsbuffer and draws it
	void Draw(Vector2D sourceLocation, Sprite* pSprite, int displayWidth, int displayHeight); //Takes and draws a part of a sprite
	void Draw(GraphicsBuffer* pGraphicsBuffer, Vector2D sourceLocation, float scale);
	void Draw(GraphicsBuffer* pTargetGraphicsBuffer, GraphicsBuffer* pSecondGraphicsBuffer, Vector2D sourceLocation, float scale);
	void Draw(GraphicsBuffer* pGraphicsBuffer, Vector2D sourceLocation, Sprite* pSprite, float scale);
	//Might need more Draw but ill find out later

	void WriteText(Vector2D sourceLocation, Font* pFont, Color color, string text);
	void WriteText(GraphicsBuffer* pGraphicsBuffer, Vector2D sourceLocation, Font* pFont, Color color, string text);

	void SaveBuffer(ALLEGRO_BITMAP* pBitmap, string fileName); //Saves bitmap to file

private:
	int mwidth;
	int mheight;
	ALLEGRO_DISPLAY* mpGraphicsDisplay;
};