#include "UnitManager.h"

UnitManager::~UnitManager()
{
	cleanup();
}


void UnitManager::cleanup()
{

	for (int i = 0; i < mpUnits.size(); i++)
	{
		Unit* pUnit = mpUnits[i];
		delete pUnit;
	}

	mpUnits.clear();
}


void UnitManager::createAndAddUnit(Animation one, Animation two)
{
	// create unit
	Unit* pUnit = new Unit(one, two);

	// manage the unit
	mpUnits.push_back(pUnit);
}


void UnitManager::destroyUnit(Unit* pUnitToDestroy)
{
	for (int i = 0; i < mpUnits.size(); i++)
	{
		Unit* pUnit = mpUnits[i];
		if (pUnit == pUnitToDestroy)
		{
			delete pUnit;
			mpUnits.erase(mpUnits.begin() + i);
			break;
		}
	}
}


void UnitManager::update(double dt, bool playAnimation)
{
	for (int i = 0; i < mpUnits.size(); i++)
	{
		Unit* pUnit = mpUnits[i];
		pUnit->update(dt, playAnimation);
	}
}


void UnitManager::draw(GraphicsSystem* graphSys)
{
	for (int i = 0; i < mpUnits.size(); i++)
	{
		Unit* pUnit = mpUnits[i];
		pUnit->draw(graphSys);
	}
}


Unit* UnitManager::getUnit()
{
	if (mpUnits.size() > 0)
		return mpUnits[(mpUnits.size() - 1)];
	else
		return nullptr;
}

void UnitManager::isPointOnUnit(Vector2D pos)
{

	for (int i = 0; i < mpUnits.size(); i++)
	{
		Unit* pUnit = mpUnits[i];

		// get location of the animation
		Vector2D aniPos = pUnit->getLocation();
		float aniPosX = aniPos.getX();
		float aniPosY = aniPos.getY();

		// get location of the mouse
		float mousePosX = pos.getX();
		float mousePoxY = pos.getY();

		// set bounds for the sprite
		float Xmin = aniPosX - SMURF_TILE_HALF;
		float Xmax = aniPosX + SMURF_TILE_HALF;
		float Ymin = aniPosY - SMURF_TILE_HALF;
		float Ymax = aniPosY + SMURF_TILE_HALF;

		// if the mouse is within the bounds, destroy the unit
		if (Xmin < mousePosX && mousePosX < Xmax)
		{
			if (Ymin < mousePoxY && mousePoxY < Ymax)
				destroyUnit(pUnit);
		}
	}

}