#include "InputTranslator.h"

#include "InputSystem.h"
#include "EventSystem.h"

#include "GameEvent.h"
#include "PlayerActionEvent.h"

#include "InputEvent.h"
#include "KeyInputEvent.h"
#include "MouseInputEvent.h"

InputTranslator::InputTranslator()
{
	mpEventSystem = EventSystem::getInstance();
	mpEventSystem->addListener((EventType)InputEventType::KEYBOARD_INPUT_EVENT, this);
	mpEventSystem->addListener((EventType)InputEventType::MOUSE_INPUT_EVENT, this);
}

InputTranslator::~InputTranslator()
{
	mpEventSystem = nullptr;
}

void InputTranslator::handleEvent(const Event& theEvent)
{
	if (theEvent.getType() == (EventType)InputEventType::KEYBOARD_INPUT_EVENT)
	{
		const KeyboardInputEvent& keyEvent = static_cast<const KeyboardInputEvent&>(theEvent);
		parseKeyEvent(keyEvent.getKey());
	}
	else if (theEvent.getType() == (EventType)InputEventType::MOUSE_INPUT_EVENT)
	{
		const MouseInputEvent& mouseEvent = static_cast<const MouseInputEvent&>(theEvent);
		mpEventSystem->fireEvent(PlayerActionEvent(PlayerAction::BUTTON_PRESS, mouseEvent.getPos()));
	}
}

void InputTranslator::parseKeyEvent(KeyCode key)
{
	switch (key)
	{
	case KeyCode::ESCAPE_KEY:
		mpEventSystem->fireEvent(PlayerActionEvent(PlayerAction::QUIT_GAME));
		break;

	case KeyCode::SPACE_KEY:
		mpEventSystem->fireEvent(PlayerActionEvent(PlayerAction::START_GAME));
		break;

	case KeyCode::F_KEY:
		mpEventSystem->fireEvent(PlayerActionEvent(PlayerAction::SKIP_LEVEL));
		break;

	case KeyCode::R_KEY:
		mpEventSystem->fireEvent(PlayerActionEvent(PlayerAction::RESTART_LEVEL));
		break;

	case KeyCode::UP_ARROW:
		mpEventSystem->fireEvent(PlayerActionEvent(PlayerAction::MOVE_UP));
		break;

	case KeyCode::DOWN_ARROW:
		mpEventSystem->fireEvent(PlayerActionEvent(PlayerAction::MOVE_DOWN));
		break;
			
	case KeyCode::LEFT_ARROW:
		mpEventSystem->fireEvent(PlayerActionEvent(PlayerAction::MOVE_LEFT));
		break;

	case KeyCode::RIGHT_ARROW:
		mpEventSystem->fireEvent(PlayerActionEvent(PlayerAction::MOVE_RIGHT));
		break;
	default:
		break;
	}
}
