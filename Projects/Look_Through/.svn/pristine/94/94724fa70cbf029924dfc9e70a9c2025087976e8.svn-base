#pragma once

#include <vector>
#include <Trackable.h>
#include "Vector2D.h"
#include "Animation.h"
#include "UnitManager.h"
#include "Unit.h"

using namespace std;

class Unit;
class UnitManager;

class ShipManager : public UnitManager
{
		const string FILE_PATH = "ship_man_data.txt";
		float mRelative;

		Vector2D mShipPosition;
		Vector2D mShipSize;
		Vector2D mShipBlaster;

		float mShipSpeed;

		int mOrigin;
		int mTakeLife;
		
	public:
		ShipManager();
		ShipManager(int size);
		~ShipManager();

		void createAndAddUnit(Vector2D location, Animation, Animation altAnimation) override;
		void createAndAddUnit(Vector2D location, Animation) override;
		void updateAll(double) override;
		void activateUnit(Vector2D pos) override;
		void shipMovement(int direction);

		void detectCollisions(vector<Unit*> pUnArr) override;

		Unit* getShip() { return mpUnits[mOrigin]; }
		Vector2D getPos() { return mShipPosition; }
		Vector2D getSize() { return mShipSize; }
		Vector2D getBlasterPos() { return mShipBlaster; }
		float getSpeed() { return mShipSpeed; }

		void setPos(Vector2D being) { mShipPosition = being; }
		void setSize(Vector2D size) { mShipSize = size; }
		void setBlasterPos(Vector2D pos) { mShipBlaster = pos; }
		void setSpeed(float speed) { mShipSpeed = speed; mpUnits[mOrigin]->setSpeed(mShipSpeed); }
		void setBlasterPos() { mShipBlaster = Vector2D(mpUnits[mOrigin]->getXPos(), mpUnits[mOrigin]->getYPos() + mRelative); }

		void activeShip(bool active);
};