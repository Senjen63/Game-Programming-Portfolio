#include "Button.h"
#include "InputTranslator.h"

Button::Button() : Unit()
{
    mType = ButtonTypes::BUTTON_DEFAULT;

    init();
}


Button::Button(Vector2D pos, AnimationFrames* idleAnim, AnimationFrames* hoverAnim, int fps, bool loopAnimation, ButtonTypes type)
    : Unit(pos, idleAnim, fps, loopAnimation, UnitTypes::BUTTON_UNIT_TYPE, false, false, false) //call parent (unit) constructor
{
    addAnimation(hoverAnim);

    mType = type;

    init();
}


Button::~Button()
{

}

void Button::init()
{
    Unit::init();

    mpEventSystem->addListener((EventType)ACTION_GAME_EVENT, this);
    mpEventSystem->addListener((EventType)CURSOR_GAME_EVENT, this);
}


void Button::handleEvent(const Event& currentEvent)
{
    //do nothing if the menu this button is attached to is inactive
    if (mActive)
    {
        if (currentEvent.getType() == CURSOR_GAME_EVENT)
        {
            const CursorEvent& cursorEvent = static_cast<const CursorEvent&>(currentEvent);

            if (isMouseOver(cursorEvent.getCursorPos()))
            {
                mHovered = true;
                setAnimation(HOVER_INDEX);
            }
            else
            {
                mHovered = false;
                setAnimation(IDLE_INDEX);
            }
        }

        if (currentEvent.getType() == ACTION_GAME_EVENT)
        {
            const ActionEvent& actionEvent = static_cast<const ActionEvent&>(currentEvent);

            if (mHovered && actionEvent.getAction() == Actions::SELECT)
            {
                if (mType == ButtonTypes::BUTTON_START)
                {
                    mpEventSystem->fireEvent(ActionEvent(START_GAME));
                }
                else if (mType == ButtonTypes::BUTTON_OPTIONS)
                {
                    mpEventSystem->fireEvent(ActionEvent(OPTIONS));
                }
                else if (mType == ButtonTypes::BUTTON_LOAD)
                {
                    mpEventSystem->fireEvent(ActionEvent(LOAD));
                }
                else if (mType == ButtonTypes::BUTTON_QUIT)
                {
                    mpEventSystem->fireEvent(ActionEvent(EXIT_GAME));
                }
                else if (mType == ButtonTypes::BUTTON_NEXT)
                {
                    mpEventSystem->fireEvent(ActionEvent(NEXT_LEVEL));
                }
                else if (mType == ButtonTypes::BUTTON_BACK)
                {
                    mpEventSystem->fireEvent(ActionEvent(MAIN_MENU));
                }
                else if (mType == ButtonTypes::BUTTON_FIRST_LANG)
                {
                    mpEventSystem->fireEvent(ActionEvent(SWAP_TO_FIRST_LANGUAGE));
                }
                else if (mType == ButtonTypes::BUTTON_SECOND_LANG)
                {
                    mpEventSystem->fireEvent(ActionEvent(SWAP_TO_SECOND_LANGUAGE));
                }
                else if (mType == ButtonTypes::BUTTON_THIRD_LANG)
                {
                    mpEventSystem->fireEvent(ActionEvent(SWAP_TO_THIRD_LANGUAGE));
                }
                else if (mType == ButtonTypes::BUTTON_EASY)
                {
                    mpEventSystem->fireEvent(ActionEvent(CHANGE_EASY));
                }
                else if (mType == ButtonTypes::BUTTON_MEDIUM)
                {
                    mpEventSystem->fireEvent(ActionEvent(CHANGE_MEDIUM));
                }
                else if (mType == ButtonTypes::BUTTON_HARD)
                {
                    mpEventSystem->fireEvent(ActionEvent(CHANGE_HARD));
                }
                else if (mType == ButtonTypes::BUTTON_SOUND_ON)
                {
                    mpEventSystem->fireEvent(ActionEvent(SOUND_ON));
                }
                else if (mType == ButtonTypes::BUTTON_SOUND_OFF)
                {
                    mpEventSystem->fireEvent(ActionEvent(SOUND_OFF));
                }
            }
        }
    }
    else
    {
        mHovered = false;
    }
}


void Button::update(float timeElapsed)
{
    Unit::update(timeElapsed);
}