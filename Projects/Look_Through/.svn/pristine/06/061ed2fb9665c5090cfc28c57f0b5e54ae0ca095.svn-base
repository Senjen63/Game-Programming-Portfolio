#pragma once

#include <Trackable.h>
#include <unordered_map>
#include <string>

typedef std::string GraphicsBufferKey;

class GraphicsBuffer;

class GraphicsBufferManager : public Trackable
{
private:

	std::unordered_map<GraphicsBufferKey, GraphicsBuffer*> mGraphicsBufferMap;

public: 

	GraphicsBufferManager() {};
	~GraphicsBufferManager();

	void createGraphicsBuffer(const GraphicsBufferKey& key, std::string filename);
	void createGraphicsBuffer(const GraphicsBufferKey& key, int bitmapWidth, int bitmapHeight);

	void deleteGraphicsBuffer(const GraphicsBufferKey& key);
	void deleteGraphicsBuffer(GraphicsBuffer* bufferToDelete);

	void clearAllGraphicsBuffers();

	GraphicsBuffer* getGraphicsBuffer(const GraphicsBufferKey& key);
};