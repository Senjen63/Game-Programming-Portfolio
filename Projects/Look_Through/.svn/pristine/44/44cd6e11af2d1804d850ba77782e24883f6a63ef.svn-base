#include "GraphicsSystem.h"


GraphicsSystem::GraphicsSystem()
{
	mpDisplay = nullptr;
	mpBackBuffer = nullptr;
}


GraphicsSystem::~GraphicsSystem()
{
	cleanup();
}


void GraphicsSystem::draw(sf::RenderTexture* bitmap, Vector2D pos, Sprite sprite, Vector2D scale)
{
	Vector2D size = sprite.getSize();
	Vector2D sourcePos = sprite.getSourcePos();

	sf::VertexArray dimensionData = sf::VertexArray(sf::Quads, 4);
	dimensionData[0].position = sf::Vector2f(pos.getX(), pos.getY());
	dimensionData[1].position = sf::Vector2f(pos.getX() + size.getX(), pos.getY());
	dimensionData[2].position = sf::Vector2f(pos.getX() + size.getX(), pos.getY() + size.getY());
	dimensionData[3].position = sf::Vector2f(pos.getX(), pos.getY() + size.getY());

	dimensionData[0].texCoords = sf::Vector2f(sourcePos.getX(), sourcePos.getY());
	dimensionData[1].texCoords = sf::Vector2f(sourcePos.getX() + size.getX(), sourcePos.getY());
	dimensionData[2].texCoords = sf::Vector2f(sourcePos.getX() + size.getX(), sourcePos.getY() + size.getY());
	dimensionData[3].texCoords = sf::Vector2f(sourcePos.getX(), sourcePos.getY() + size.getY());

	bitmap->draw(dimensionData, &sprite.getBuffer()->getBitmap()->getTexture());
	bitmap->display();
}


void GraphicsSystem::writeText(sf::RenderTexture* bitmap, Vector2D pos, Font* font, Color color, std::string text)
{	
	sf::Text drawText = sf::Text(text, *font->getBackingFont(), font->getSize());
	drawText.setFillColor(sf::Color(color.r, color.g, color.b, color.a));
	drawText.setPosition(sf::Vector2f(pos.getX(), pos.getY()));

	bitmap->draw(drawText);
	bitmap->display();
}


int GraphicsSystem::init(int windowWidth, int windowHeight)
{
	mpDisplay = new sf::RenderWindow(sf::VideoMode(windowWidth, windowHeight), "Joseph-Natalie");

	assert(mpDisplay);

	mpBackBuffer = new GraphicsBuffer(Vector2D(windowWidth, windowHeight));
	//mpBackBuffer = new GraphicsBuffer(al_get_backbuffer(mpDisplay));

	return 0;
}


void GraphicsSystem::cleanup()
{
	delete mpBackBuffer;
	//al_destroy_display(mpDisplay);
	delete mpDisplay;
}


void GraphicsSystem::flip()
{
	mpDisplay->clear();

	Vector2D size = Vector2D(mpBackBuffer->getWidth(), mpBackBuffer->getHeight());

	sf::VertexArray dimensionData = sf::VertexArray(sf::Quads, 4);
	dimensionData[0].position = sf::Vector2f(0, 0);
	dimensionData[1].position = sf::Vector2f(size.getX(), 0);
	dimensionData[2].position = sf::Vector2f(size.getX(), size.getY());
	dimensionData[3].position = sf::Vector2f(0, size.getY());

	dimensionData[0].texCoords = sf::Vector2f(0, 0);
	dimensionData[1].texCoords = sf::Vector2f(size.getX(), 0);
	dimensionData[2].texCoords = sf::Vector2f(size.getX(), size.getY());
	dimensionData[3].texCoords = sf::Vector2f(0, size.getY());

	mpDisplay->draw(dimensionData, &mpBackBuffer->getBitmap()->getTexture());
	mpDisplay->display();
}


void GraphicsSystem::draw(Vector2D pos, Sprite sprite, Vector2D scale)
{
	draw(mpBackBuffer, pos, sprite, scale);
}


void GraphicsSystem::draw(GraphicsBuffer* graphicsBuffer, Vector2D pos, Sprite sprite, Vector2D scale)
{
	draw(graphicsBuffer->mpBitmap, pos, sprite, scale);

}


void GraphicsSystem::writeText(Vector2D pos, Font* font, Color color, std::string text)
{
	writeText(mpBackBuffer, pos, font, color, text);
}


void GraphicsSystem::writeText(GraphicsBuffer* graphicsBuffer, Vector2D pos, Font* font, Color color, std::string text)
{
	writeText(graphicsBuffer->getBitmap(), pos, font, color, text);
}


void GraphicsSystem::saveBuffer(GraphicsBuffer* graphicsBuffer, std::string fileName)
{
	graphicsBuffer->getBitmap()->getTexture().copyToImage().saveToFile(fileName);
}
