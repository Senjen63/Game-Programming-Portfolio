#include "InputSystem.h"

InputSystem::InputSystem()
{
	init();
}

InputSystem::~InputSystem()
{
	cleanup();
}

void InputSystem::update()
{
	// gets mouse and keyboard state after every update
	al_get_mouse_state(&mMouseState);
	al_get_keyboard_state(&mState);
}

void InputSystem::init()
{
	al_install_keyboard();
	assert(al_install_keyboard);

	al_install_mouse();
	assert(al_install_mouse);

	mpQueue = al_create_event_queue();
	al_register_event_source(mpQueue, al_get_keyboard_event_source());

	mpEventSystem = EventSystem::getInstance();
	mpEventSystem->init();
}

void InputSystem::cleanup()
{
	al_uninstall_keyboard();
	al_uninstall_mouse();

	mpEventSystem->cleanup();
}

//QUEUE Stuff and EVENTS
void InputSystem::getKeyEvent()
{
	while (!al_is_event_queue_empty(mpQueue))
	{
		ALLEGRO_EVENT theEvent;
		al_get_next_event(mpQueue, &theEvent);
	
		if (theEvent.type == ALLEGRO_EVENT_KEY_DOWN)
		{
			mpEventSystem->fireEvent(InputEvent((int)theEvent.keyboard.keycode));
		}
	}
}


bool InputSystem::getKeyState(MyKeyCode key)
{
	// return true if given key is pressed
	return al_key_down(&mState, (int)key);
}

Vector2D InputSystem::getMouseState()
{
	// return the position of the mouse
	return Vector2D(mMouseState.x, mMouseState.y);


}

bool InputSystem::isMouseDown(Mouse m)
{
	// return true if the left mouse key is down
	return al_mouse_button_down(&mMouseState, (int) m);
}