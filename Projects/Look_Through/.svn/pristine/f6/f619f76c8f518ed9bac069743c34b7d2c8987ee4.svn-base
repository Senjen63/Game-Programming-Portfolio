#pragma once

#include "Trackable.h"
#include "Level.h"
#include "Puffle.h"
#include "Penguin.h"
#include "Solicitor.h"
#include "Wall.h"
#include <vector>
#include <EventListener.h>

class LevelManager : public EventListener
{

public:
	LevelManager(int numLevels);
	~LevelManager();

	void init();
	void gotoNextLevel();
	void loadLevel(bool loadEnemies = true);

	void update(double elapsedTime);
	void draw();

	//accessors and mutators
	int getLevelNum() { return mCurrentLevel; }
	Level* getCurrentLevel() { return mpLevels[mCurrentLevel]; }
	std::vector<Wall*> getWalls() { return mpWalls; }

	void setLevelNum(int levelNum) { mCurrentLevel = levelNum; }
	void setAnimation(AnimationBase* anim, std::string animType);
	
	void addEnemy(EnemyBase* newEnemy) { mpEnemies.push_back(newEnemy); }
	void addBullet(Bullet* newBullet) { mpEnemies.push_back(newBullet); }
	void deleteEnemy(EnemyBase* toDelete);

	std::vector<EnemyBase*> getEnemies() { return mpEnemies; }
	EnemyBase* getEnemy(int i) { return mpEnemies[i]; }
	int getNumEnemies() { return mpEnemies.size(); }

	void handleEvent(const Event& theEvent);

	const std::string ASSET_PATH = "Assets\\Levels\\";
	const double ANIMATION_SPEED = 1.0;

	//THESE ARE ONLY TEMPORARILY PUBLIC
	AnimationBase* mWallAnimation;
	AnimationBase* mPenguinAnimation;
	AnimationBase* mSolicitorAnimation;
	AnimationBase* mPuffleAnimation;
	AnimationBase* mBulletAnimation;
private:
	int mCurrentLevel;
	std::vector<Level*> mpLevels;
	std::vector<Wall*> mpWalls;
	std::vector<EnemyBase*> mpEnemies;

	int mIDLevel;
};
