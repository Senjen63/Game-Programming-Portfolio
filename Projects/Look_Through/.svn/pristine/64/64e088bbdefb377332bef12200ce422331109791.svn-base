#include "HUD.h"

#include <string>

#include "Color.h"
#include "GraphicsSystem.h"


HUD::HUD()
{
    mpTitleFont = nullptr;
    mpMenuOptionsFont = nullptr;
    mpInGameFont = nullptr;
}

HUD::~HUD()
{
    delete mpTitleFont;
    mpTitleFont = nullptr;
    delete mpInGameFont;
    mpInGameFont = nullptr;
    delete mpMenuOptionsFont;
    mpMenuOptionsFont = nullptr;
}

void HUD::drawEnd( const bool won, const int gameScore ) const
{
    const Vector2D LOSE_TEXT_POSITION( mWidth / 2, 100 );
    const auto LOSE_TEXT = !won ? "You lost :(" : "YOU WIN!!!";
    const Vector2D SCORE_POSITION( mWidth / 2, 300 );
    const auto SCORE_TEXT = "Score: " + std::to_string( gameScore );
    const Vector2D GO_MENU_POSITION( mWidth / 2, 500 );
    const auto MENU_TEXT = "Press space to go to restart...";
    const Color TEXT_COLOR( 255, 0, 255 );
    const Color SCORE_COLOR( 0, 255, 0 );

    GraphicsSystem::writeText( static_cast< int >(LOSE_TEXT_POSITION.getX()), static_cast< int >(LOSE_TEXT_POSITION.getY()), *mpTitleFont, TEXT_COLOR, LOSE_TEXT );

    GraphicsSystem::writeText( static_cast< int >(SCORE_POSITION.getX()), static_cast< int >(SCORE_POSITION.getY()), *mpTitleFont, SCORE_COLOR, SCORE_TEXT.c_str() );

    GraphicsSystem::writeText( static_cast< int >(GO_MENU_POSITION.getX()), static_cast< int >(GO_MENU_POSITION.getY()), *mpMenuOptionsFont, TEXT_COLOR, MENU_TEXT );
}

void HUD::drawGame( const int fps, const int score ) const
{
    const Vector2D FPS_POSITION( 50, 25 );
    const Color FPS_COLOR( 255, 0, 0 );

    const Vector2D SCORE_POSITION( mWidth / 2, 25 );
    const Color SCORE_COLOR( 0, 255, 0 );

    GraphicsSystem::writeText( static_cast< int >(FPS_POSITION.getX()), static_cast< int >(FPS_POSITION.getY()), *mpInGameFont, FPS_COLOR, std::to_string( fps ).c_str() );

    GraphicsSystem::writeText( static_cast< int >(SCORE_POSITION.getX()), static_cast< int >(SCORE_POSITION.getY()), *mpTitleFont, SCORE_COLOR, std::to_string( score ).c_str() );
}

void HUD::drawMenu( const int option ) const
{
    constexpr int START_OPTION = 1, LEVEL_OPTION = 2, QUIT_OPTION = 3;

    const Color TEXT_COLOR( 0, 0, 0 );

    const Color BORDER_COLOR( 0, 0, 0 );
    constexpr float BORDER_INSIDE_THICKNESS = 5, BORDER_OUTSIDE_THICKNESS = 10;

    const Color OUTSIDE_MENU_COLOR( 255, 255, 255 );
    const Vector2D OUTSIDE_MENU_POS_START( mWidth / 5, 25 );
    const Vector2D OUTSIDE_MENU_POS_END( mWidth * 4 / 5, mHeight );

    const auto TITLE_TEXT = "SNAKE";
    const auto START_TEXT = "Start";
    const auto LEVEL_CHANGE_TEXT = "Change Level";
    const auto QUIT_TEXT = "Quit";

    const Color TITLE_CIRCLE_COLOR( 60, 179, 113 );
    const Color SELECTED_COLOR( 255, 105, 97 );
    const Color NORMAL_COLOR( 114, 191, 165 );

    const Vector2D TITLE_POSITION( mWidth / 2, mHeight / 8 );
    const Vector2D START_POSITION( mWidth / 2, mHeight - mHeight / 2 - 50 );
    const Vector2D LEVEL_CHANGE_POSITION( mWidth / 2, mHeight - mHeight / 3 - 25 );
    const Vector2D QUIT_POSITION( mWidth / 2, mHeight - mHeight / 6 );

    const Vector2D TITLE_ELLIPSE_POSITION( TITLE_POSITION.getX(), TITLE_POSITION.getY() + 50 );
    const Vector2D TITLE_ELLIPSE_SIZE( mWidth / 4, mHeight / 10 );

    const Vector2D START_ELLIPSE_POSITION( START_POSITION.getX(), START_POSITION.getY() + 25 );
    const Vector2D START_ELLIPSE_SIZE( mWidth / 8, mHeight / 12 );

    const Vector2D LEVEL_CHANGE_ELLIPSE_POSITION( LEVEL_CHANGE_POSITION.getX(), LEVEL_CHANGE_POSITION.getY() + 25 );
    const Vector2D LEVEL_CHANGE_ELLIPSE_SIZE( mWidth / 4, mHeight / 12 );

    const Vector2D QUIT_ELLIPSE_POSITION( QUIT_POSITION.getX(), QUIT_POSITION.getY() + 25 );
    const Vector2D QUIT_ELLIPSE_SIZE( mWidth / 10, mHeight / 12 );

    Color colorToUse( 0, 0, 0 );
    // Title
    {
        GraphicsSystem::draw( OUTSIDE_MENU_POS_START, OUTSIDE_MENU_POS_END, OUTSIDE_MENU_COLOR );
        GraphicsSystem::draw( OUTSIDE_MENU_POS_START, OUTSIDE_MENU_POS_END, BORDER_COLOR, BORDER_OUTSIDE_THICKNESS );
        GraphicsSystem::drawEllipse( TITLE_ELLIPSE_POSITION, TITLE_ELLIPSE_SIZE, TITLE_CIRCLE_COLOR );
        GraphicsSystem::writeText( static_cast< int >(TITLE_POSITION.getX()), static_cast< int >(TITLE_POSITION.getY()), *mpTitleFont, TEXT_COLOR, TITLE_TEXT );
    }
    // Start
    {
        colorToUse = option == START_OPTION ? SELECTED_COLOR : NORMAL_COLOR;
        GraphicsSystem::drawEllipse( START_ELLIPSE_POSITION, START_ELLIPSE_SIZE, colorToUse );
        GraphicsSystem::drawEllipse( START_ELLIPSE_POSITION, START_ELLIPSE_SIZE, BORDER_COLOR, BORDER_INSIDE_THICKNESS );

        GraphicsSystem::writeText( static_cast< int >(START_POSITION.getX()), static_cast< int >(START_POSITION.getY()), *mpMenuOptionsFont, TEXT_COLOR, START_TEXT );
    }
    // Change Level
    {
        colorToUse = option == LEVEL_OPTION ? SELECTED_COLOR : NORMAL_COLOR;
        GraphicsSystem::drawEllipse( LEVEL_CHANGE_ELLIPSE_POSITION, LEVEL_CHANGE_ELLIPSE_SIZE, colorToUse );
        GraphicsSystem::drawEllipse( LEVEL_CHANGE_ELLIPSE_POSITION, LEVEL_CHANGE_ELLIPSE_SIZE, BORDER_COLOR, BORDER_INSIDE_THICKNESS );

        GraphicsSystem::writeText( static_cast< int >(LEVEL_CHANGE_POSITION.getX()), static_cast< int >(LEVEL_CHANGE_POSITION.getY()), *mpMenuOptionsFont, TEXT_COLOR, LEVEL_CHANGE_TEXT );
    }
    // Quit
    {
        colorToUse = option == QUIT_OPTION ? SELECTED_COLOR : NORMAL_COLOR;
        GraphicsSystem::drawEllipse( QUIT_ELLIPSE_POSITION, QUIT_ELLIPSE_SIZE, colorToUse );
        GraphicsSystem::drawEllipse( QUIT_ELLIPSE_POSITION, QUIT_ELLIPSE_SIZE, BORDER_COLOR, BORDER_INSIDE_THICKNESS );

        GraphicsSystem::writeText( static_cast< int >(QUIT_POSITION.getX()), static_cast< int >(QUIT_POSITION.getY()), *mpMenuOptionsFont, TEXT_COLOR, QUIT_TEXT );
    }

    GraphicsSystem::writeText( static_cast< int >(QUIT_POSITION.getX()), static_cast< int >(QUIT_POSITION.getY() + 50), *mpInGameFont, TEXT_COLOR, "<space> to select" );
}

void HUD::loadHUD( const int width, const int height, Font & titleFont, Font & menuOptionsFont, Font & inGameFont )
{
    mWidth = width;
    mHeight = height;
    mpTitleFont = &titleFont;
    mpMenuOptionsFont = &menuOptionsFont;
    mpInGameFont = &inGameFont;
}
