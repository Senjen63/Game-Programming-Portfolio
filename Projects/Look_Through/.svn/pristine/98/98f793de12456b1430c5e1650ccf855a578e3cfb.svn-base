/*
A class to hold a chunk of memory used to display something 

Data
• An Allegro bitmap

Functions
• Constructor(s)/destructor
• Accessors( height, width )
*/

#include "GraphicsBuffer.h"

void GraphicsBuffer::init(string filePath) 
{
    mOwnsBuffer = false;
    mpBMP = al_load_bitmap(filePath.c_str());
    assert(mpBMP);
}

GraphicsBuffer::GraphicsBuffer()
{
    mpBMP = NULL;

}

GraphicsBuffer::GraphicsBuffer(int width, int height)
{
    mOwnsBuffer = false; 
    mpBMP = al_create_bitmap(width, height);
}

GraphicsBuffer::GraphicsBuffer(string filePath)
{
    mOwnsBuffer = false;
    mpBMP = al_load_bitmap(filePath.c_str());
    assert(mpBMP);
}

GraphicsBuffer::GraphicsBuffer(ALLEGRO_BITMAP* pTarget)
{
    mOwnsBuffer = false;
    mpBMP = pTarget;
}

GraphicsBuffer::GraphicsBuffer(GraphicsBuffer* pTarget)
{
    mOwnsBuffer = false;
    mpBMP = pTarget->mpBMP;
}

GraphicsBuffer::GraphicsBuffer(Color color, int width, int height)
{
    mOwnsBuffer = false;
    mpBMP = al_create_bitmap(width, height);

    //clears new buffer to color
    ALLEGRO_BITMAP* oldBitmap = al_get_target_bitmap();

    al_set_target_bitmap(mpBMP);

    al_clear_to_color(al_map_rgba(color.getRed(), color.getGreen(), color.getBlue(), color.getAlpha()));

    al_set_target_bitmap(oldBitmap);
}

GraphicsBuffer::~GraphicsBuffer()
{
    //if (mOwnsBuffer)
    //{
        std::cout << "bitmap destroy called" << std::endl;
        //al_destroy_bitmap(mpBMP);
    //}
}

int GraphicsBuffer::getBMWidth()
{
	return al_get_bitmap_width(mpBMP);
}


int GraphicsBuffer::getBMHeight()
{
	return al_get_bitmap_height(mpBMP);
}

ALLEGRO_BITMAP* GraphicsBuffer::getBMP()
{
    return mpBMP;
}