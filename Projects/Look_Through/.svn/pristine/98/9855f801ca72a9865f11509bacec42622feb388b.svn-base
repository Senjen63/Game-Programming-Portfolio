#pragma once

#include <stdlib.h>
#include <time.h>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>
#include <vector>

#include "Unit.h"

class UnitManager;

class LevelManager : public Trackable
{
private:
	vector<Unit*> mWallVector;
	vector<Unit*> mFoodVector;
	vector<Unit*> mPointsVector;
	vector<Unit*> mSpeedUpVector;
	vector<Unit*> mSpeedDownVector;

	float mUpdateSpeed = 300;
	float mCurrentTime = 0;

	int mPointSpawnChance, mSpeedUpSpawnChance, mSpeedDownSpawnChance;

	int mPoints;

	void checkIntersection(vector<Unit*> &vector, Vector2D pos, bool &returnBool);
	void checkSpawns(UnitManager& snake);
public:
	LevelManager();
	~LevelManager();

	void clear();
	
	void removeWall(Unit* destroy);
	void removeFood(Unit* destroy);
	void removePoint(Unit* destroy);
	void removeSUp(Unit* destroy);
	void removeSDown(Unit* destroy);

	void addWall(Unit* newWall)		    { mWallVector.push_back(newWall);      };
	void addFood(Unit* newFood)		    { mFoodVector.push_back(newFood);      };
	void addPointPickup(Unit* newPoint) { mPointsVector.push_back(newPoint);   };
	void addSUp(Unit* newSUp)		    { mSpeedUpVector.push_back(newSUp);    };
	void addSDown(Unit* newDown)	    { mSpeedDownVector.push_back(newDown); };
	
	Unit* getWall(int index)	    { return mWallVector[index];      };
	Unit* getFood(int index)  	    { return mFoodVector[index];      };
	Unit* getPointPickup(int index) { return mPointsVector[index];    };
	Unit* getSUp(int index)		    { return mSpeedUpVector[index];   };
	Unit* getSDOwn(int index)	    { return mSpeedDownVector[index]; };
	
	int getWallSize()  { return mWallVector.size();      };
	int getFoodSize()  { return mFoodVector.size();      };
	int getPointSize() { return mPointsVector.size();    };
	int getSUpSize()   { return mSpeedUpVector.size();   };
	int getSDownSize() { return mSpeedDownVector.size(); };

	int getPoints()			   { return mPoints; };
	void addPoints(int points) { mPoints += points; };

	void setPointChance(int chance) { mPointSpawnChance = chance;      };
	void setSUpChance(int chance)   { mSpeedUpSpawnChance = chance;    };
	void setSDownChance(int chance) { mSpeedDownSpawnChance = chance;  };

	void spawnItem(string key, UnitManager& snake);

	void updateAll(double dt, UnitManager& snake);
	void drawAll(GraphicsSystem* display);
};