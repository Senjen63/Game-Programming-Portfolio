#pragma once

#include "GraphicsSystem.h"
#include "InputSystem.h"
#include "UnitManager.h"
#include "GraphicsBufferManager.h"
#include "LevelManager.h"
#include "EventListener.h"
#include "HUD.h"

#include <Timer.h>
#include <PerformanceTracker.h>
#include <Trackable.h>

class EventSystem;

class Game : public EventListener
{
public:
	Game(float displayWidth, float displayHeight);
	~Game();

	void init();
	void clean();

	void doLoop();

	static GraphicsSystem* getGraphicsSystem() { return mpGraphicsSystem; }
	static InputSystem* getInputSystem() { return mpInputSystem; }
	static UnitManager* getUnitManager() { return mpUnitManager; }
	static GraphicsBufferManager* getGraphicsBufferManager() { return mpGraphicsBufferManager; }
	static LevelManager* getLevelManager() { return mpLevelManager; }

	virtual void handleEvent(const Event& theEvent);

private:
	bool continueLoop = true;
	static GraphicsSystem* mpGraphicsSystem;
	static InputSystem* mpInputSystem;
	static UnitManager* mpUnitManager;
	static GraphicsBufferManager* mpGraphicsBufferManager;
	static LevelManager* mpLevelManager;
	static HUD* mpHUD;
	int mCurrentScore = 0;
	int mNewSegments = 0;
	float mGameState = -1;
};

//extern Game* gpGame;