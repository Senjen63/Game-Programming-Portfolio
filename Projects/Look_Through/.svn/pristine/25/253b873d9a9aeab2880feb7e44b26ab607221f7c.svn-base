#include "include/AsteroidsSystem.hpp"

void AsteroidsSystem::createQueries()
{
    mQueries.emplace_back( ( new EntityQuery )->withAll< Asteroid >() );
}

float getRandomTime( const int maxValue )
{
    return static_cast< float >(rand() % maxValue) / 10.0f;
}

void AsteroidsSystem::onCreate()
{
    mNextAsteroid = getRandomTime( 10 );
}

void AsteroidsSystem::onUpdate()
{
    mNextAsteroid -= mpTime.lock()->getDeltaTime();

    if ( mNextAsteroid <= 0 )
    {
        mpEntityCommandBuffer.lock()->createEntity( { new Translation( mpCamera.lock()->getPosition().x + rand() % 20 - 10, mpCamera.lock()->getPosition().y + 10 ), new Scale, new SpriteHolder( "asteroid" ), new Asteroid } );
        mNextAsteroid = getRandomTime( 20 );
    }

    for ( const auto & ent : mQueries[ 0 ]->entities )
    {
        const std::shared_ptr< Translation > translation = mpEntityManager.lock()->getComponentFromEntity< Translation >( ent );

        translation->x += rand() % 3 - 1 * mpTime.lock()->getDeltaTime();
        translation->y -= 1 * mpTime.lock()->getDeltaTime();
        if ( translation->y < mpCamera.lock()->getPosition().y - 5 )
        {
            mpAssetManager.lock()->playSound( "crash" );
            mpEntityCommandBuffer.lock()->deleteEntity( ent );
        }
    }
}
