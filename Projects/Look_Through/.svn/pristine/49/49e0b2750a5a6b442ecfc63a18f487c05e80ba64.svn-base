#include "InputSystem.h"

void InputSystem::init()
{
	al_install_keyboard();
	al_install_mouse();

	mpSysKeys = new Keys();
	mpSysMouse = new Mouse();
}

void InputSystem::clean()
{
	al_uninstall_keyboard();
	al_uninstall_mouse();

	delete mpSysKeys;
	delete mpSysMouse;
}

InputSystem::Keys* InputSystem::getKeyState()
{
	// Get current keyboard state
	ALLEGRO_KEYBOARD_STATE keyboardState;
	al_get_keyboard_state(&keyboardState);

	// Clear the current key struct
	mpSysKeys->reset();

	// Check for each key involved in this program
	// and update their respective bools in the key struct

	// Check for F
	if (al_key_down(&keyboardState, ALLEGRO_KEY_F))
	{
		mpSysKeys->mKey_F = true;
	}

	// Check for S
	if (al_key_down(&keyboardState, ALLEGRO_KEY_S))
	{
		mpSysKeys->mKey_S = true;
	}

	if (al_key_down(&keyboardState, ALLEGRO_KEY_SPACE))
	{
		mpSysKeys->mKey_Space = true;
	}

	// Check for Enter
	if (al_key_down(&keyboardState, ALLEGRO_KEY_ENTER))
	{
		mpSysKeys->mKey_Enter = true;
	}

	// Check for Escape
	if (al_key_down(&keyboardState, ALLEGRO_KEY_ESCAPE))
	{
		mpSysKeys->mKey_Escape = true;
	}

	// Return updated Keys struct
	return mpSysKeys;
}

InputSystem::Mouse* InputSystem::getMouseState()
{
	// Get current mouse state
	ALLEGRO_MOUSE_STATE mouseState;
	al_get_mouse_state(&mouseState);

	// Clear the current mouse struct
	mpSysMouse->reset();

	// Check for left mouse
	if (al_mouse_button_down(&mouseState, 1))
	{
		mpSysMouse->mLeftMouse_Pressed = true;
	}

	// Check for right mouse
	if (al_mouse_button_down(&mouseState, 2))
	{
		mpSysMouse->mRightMouse_Pressed = true;
	}

	// Update mouse positioning
	mpSysMouse->mMousePosition = std::pair<float, float>(mouseState.x, mouseState.y);

	// Return updated Mouse struct
	return mpSysMouse;
}