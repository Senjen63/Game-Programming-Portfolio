#pragma once

#include <PerformanceTracker.h>
#include <vector>
#include <variant>

#include "ScreenChangeManager.h"
#include "GraphicsSystem.h"
#include "InputSystem.h"
#include "Unit.h"
#include "Keycode.h"
#include "Mousecode.h"
#include "Conversion.h"
#include "UnitManager.h"
#include "GraphicsBufferManager.h"
#include "HUD.h"
#include "ScreenType.h"
#include "AnimationManager.h"
#include "LevelManagerNew.h"
#include "Menu.h"
#include "Music.h"
#include "SoundBufferManager.h"

#include "SnakeComponent.h"
#include "CollisionDriver.h"
#include "SpeedPowerUpComponent.h"
#include "ScoreModPowerUpComponent.h"
#include "TruckComponent.h"
#include "LogComponent.h"

const int DISP_WIDTH = 800;
const int DISP_HEIGHT = 960;

class LevelManagerNew;
class ScreenChangeManager;
class Menu;

class Game : public Trackable
{
	friend class ScreenChangeManager;

	const std::string PERFORMANCE_TRACKER_STRING = "loop";
	const std::string ASSET_DICTIONARY_PATH = "Data\\AssetDictionary.txt";
	
	const std::string SOUND_DICTIONARY_PATH = "Data\\SoundDictionary.txt";

	const std::string LOSE_SCREEN_NAME = "LoseScreen";
	const std::string GAME_WIN_SCREEN_NAME = "GameWinScreen";
	const std::string LEVEL_WIN_SCREEN_NAME = "LevelWinScreen";

	static const int NUM_LEVELS = 3;
	const std::string LEVEL_NAMES[NUM_LEVELS] = { "Level1.txt", "Level2.txt", "Level3.txt" };

	static Game* mpGame;

	Vector2D mWindowSize;

	float mTargetTimeInMilliseconds;
	float mTargetFramesPerSecond;

	bool mRunGame = false;
	float mGameVolume = 50;

	LevelManagerNew* mpLevelManager = nullptr;
	ScreenChangeManager* mpScreenChangeManager = nullptr;

	GraphicsSystem* mpGraphicsSystem;
	UnitManager* mpUnitManager;
	GraphicsBufferManager* mpGraphicsBufferManager;
	InputSystem* mpInputSystem;
	AnimationManager* mpAnimationManager;
	SoundBufferManager* mpSoundBufferManager;

	Menu* mpCurrentMenu;
	Font* mpFont;

	bool mInLevel = false;
	ScreenType mCurrentScreen = ScreenType::START_MENU;
	int mCurrentLevelIndex = 0;
	int mCurrentLanguage = 0;

	void update(float dt);
	void render();
	void handleInput();

	Game(int targetFramerate) { setTargetFramesPerSecond(targetFramerate); }
	~Game() { cleanupInstance(); mpGame = nullptr; }

public:

	static Game* getInstance();
	static Game* createInstance(int targetFramerate = 60);
	static void destroyInstance() { delete mpGame; mpGame = nullptr; }
	void initInstance(Vector2D windowSize = Vector2D(DISP_WIDTH, DISP_HEIGHT));
	void cleanupInstance();

	void importSprites(std::string assetDictionaryPath, std::string spritePath);
	void importSoundBuffers(std::string soundDictionaryPath, std::string soundPath);

	UnitManager* getUnitManager() { return mpUnitManager; }
	GraphicsBufferManager* getGraphicsBufferManager() { return mpGraphicsBufferManager; }
	InputSystem* getInputSystem() { return mpInputSystem; }
	AnimationManager* getAnimationManager() { return mpAnimationManager; }
	GraphicsSystem* getGraphicsSystem() { return mpGraphicsSystem; }
	LevelManagerNew* getLevelManager() { return mpLevelManager; };
	Font* getFont() { return mpFont; };
	SoundBufferManager* getSoundBufferManager() { return mpSoundBufferManager; }

	float getTargetFramesPerSecond() { return mTargetFramesPerSecond; }
	void setTargetFramesPerSecond(float fps) { mTargetTimeInMilliseconds = 1000.0f / fps; mTargetFramesPerSecond = fps; }

	float getTargetTimeInMilliseconds() { return mTargetTimeInMilliseconds; }
	float setTargetTimeInMilliseconds(float ms) { mTargetFramesPerSecond = ms * 1000.0; mTargetTimeInMilliseconds = ms; }

	Vector2D getWindowSize() { return mWindowSize; }

	int getCurrentLanguage() { return mCurrentLanguage; };
	void setCurrentLanguage(int lang) { mCurrentLanguage = lang; };

	void changeCurrentScreen(ScreenType newScreen);

	void doLoop();
	void setGameRunStatus(bool runStatus);

	float getGameVolume() { return mGameVolume; }
	void setGameVolume(float volume) { mGameVolume = volume; }

	bool getInLevel() { return mInLevel; }
};