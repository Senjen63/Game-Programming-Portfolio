#pragma once
#include <fstream>
#include "Trackable.h"
#include "Vector2D.h"
#include "Game.h"
#include "UnitManager.h"
#include "LevelManagerNew.h"
//
//const std::string WALL_PATH = "Sprites\\wall.png";
//
//class Game;
//

class LevelManagerNew;
class TruckComponent;
class LogComponent;
class SnakeComponent;

class Level : public EventListener
{
	friend class LevelManagerNew;

	const float ANIM_SPEED = 1.0f;

	LevelManagerNew* mLevelManagerOwner = nullptr;
	SnakeComponent* mpFrog = nullptr;

	std::string mFileName = "";
	int mScore = 0;
	float mElapTime, mTargetTime;

	Vector2D mLastFrogPos = Vector2D(0, 0);

	bool mGameStarted = false;
	std::vector<Vector2D> mRowDirections;
	//std::vector<TruckComponent*> mpTrucks;
	//std::vector<LogComponent*> mpLogs;

	Level() {};
	Level(float tarTime) { mTargetTime = tarTime; mElapTime = 0; }
	~Level();

	void spawnFrog(Vector2D startPos = Vector2D(0, 0));
	void spawnTruck(int startY, Vector2D direction, int num);
	void spawnLog(int startY, Vector2D direction, int num);
	void placeTerrain(std::ifstream& wallLayout);

protected:


public:
	void init(std::string levelDataFullPath, LevelManagerNew* levelManagerOwner);
	void init(std::string levelDataFullPath, LevelManagerNew* levelManagerOwner, Vector2D frogStartPos);
	void cleanup();

	void handleEvent(const Event& theEvent) override;

	void update(int deltaTime);

	SnakeComponent* getFrog() { return mpFrog; };
	Vector2D getLastFrogPos() { return mLastFrogPos; }
};