//BP
#include "InputSystem.h"
#include "Game.h"

InputSystem::InputSystem()
{
    mpEventsList = nullptr;
    mpEventSystem = nullptr;
}

InputSystem::~InputSystem()
{
    cleaner();
}

void InputSystem::init()
{
    if (!mIsInit)
    {
        al_install_keyboard();
        al_install_mouse();
        mpEventSystem = EventSystem::getInstance();
        mpEventsList = al_create_event_queue();
        al_register_event_source(mpEventsList,
            al_get_keyboard_event_source());
        al_register_event_source(mpEventsList,
            al_get_mouse_event_source());
        mIsInit = true;
    }
}

void InputSystem::cleaner()
{
    if (!mIsClean)
    {

        if (mpEventsList != nullptr)
        {

            al_destroy_event_queue(mpEventsList);

        }
        mIsClean = true;

    }
}

void InputSystem::fireInputs()
{
    ALLEGRO_KEYBOARD_STATE keyPress;
    ALLEGRO_MOUSE_STATE mouseButtonPress;
    al_get_keyboard_state(&keyPress);
    al_get_mouse_state(&mouseButtonPress);
    while (!al_is_event_queue_empty(mpEventsList))
    {

        ALLEGRO_EVENT thisEvent;
        al_get_next_event(mpEventsList, &thisEvent);
        if (thisEvent.type == ALLEGRO_EVENT_KEY_DOWN)
        {

            mpEventSystem->fireEvent(InputEvents(
                (int)thisEvent.keyboard.keycode));

        }

    }
}

Vector2D InputSystem::getMouse()
{
    ALLEGRO_MOUSE_STATE mouse;
    al_get_mouse_state(&mouse);
    return Vector2D(mouse.x, mouse.y);
}

bool InputSystem::getKeyPress(int key)
{
    ALLEGRO_KEYBOARD_STATE keyPress;
    al_get_keyboard_state(&keyPress);
    if (al_key_down(&keyPress, key))
    {

        return true;

    }
    return false;
}

bool InputSystem::getMouseButtonPress(int mouseButton)
{
    ALLEGRO_MOUSE_STATE mouseButtonPress;
    al_get_mouse_state(&mouseButtonPress);
    if (mouseButtonPress.buttons & mouseButton)
    {

        return true;

    }
    return false;
}