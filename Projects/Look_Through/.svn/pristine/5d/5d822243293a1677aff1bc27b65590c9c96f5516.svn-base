#include "include/Camera.hpp"

Camera::Camera( GraphicsSystem * pGraphicsSystem )
{
    mpGraphicsSystem = pGraphicsSystem;
    mTranslation = Translation( 0, 0 );
    mScale = Scale( static_cast< float >(mpGraphicsSystem->getWidth()) / static_cast< float >(mpGraphicsSystem->getHeight()) * 10.0f, 10.0f );
    mUnitLength = static_cast< float >(mpGraphicsSystem->getHeight()) / mScale.height;
}

Translation & Camera::getPosition()
{
    return mTranslation;
}

Scale & Camera::getSize()
{
    return mScale;
}

Rect2DF Camera::worldToScreen( const Translation & translation, const Scale & scale ) const
{
    return { ( translation.x - mTranslation.x ) * mUnitLength + static_cast< float >(mpGraphicsSystem->getWidth()) / 2.0f, static_cast< float >(mpGraphicsSystem->getHeight()) - ( ( translation.y - mTranslation.y ) * mUnitLength + static_cast< float >(mpGraphicsSystem->getHeight()) / 2.0f ), scale.width * mUnitLength, scale.height * mUnitLength };
}

Rect2DF Camera::uiToScreen( const Translation & translation, const Scale & scale ) const
{
    return { translation.x * static_cast< float >(mpGraphicsSystem->getWidth()), translation.y * static_cast< float >(mpGraphicsSystem->getHeight()), scale.width * mUnitLength, scale.height * mUnitLength };
}

Rect2DF Camera::uiToScreenCentered( const Translation & translation, const Scale & scale ) const
{
    const auto width = static_cast< float >(mpGraphicsSystem->getWidth());
    const auto height = static_cast< float >(mpGraphicsSystem->getHeight());
    return { (translation.x - scale.width / 27.0f) * width, (translation.y - scale.height / 27.0f) * height , scale.width * mUnitLength, scale.height * mUnitLength };
}

void Camera::setPosition( const Translation & translation )
{
    mTranslation = translation;
}
