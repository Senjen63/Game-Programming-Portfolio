/*
Author: David Silverman
Class: GPR-250-01
Assignment: Assignment 3
Certification of Authenticity:
I certify that this assignment is entirely my own work.
 */

#pragma once
#include <allegro5/allegro.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_primitives.h>
#include <vector>
#include <Trackable.h>
#include <Vector2D.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "graphicsbuffer.h"
#include "sprite.h"
#include "snakemanager.h"
#include "wallmanager.h"
#include "powerupmanager.h"
#include "foodmanager.h"


using namespace std;

class Level : public Trackable
{
		const Vector2D ORIGIN = Vector2D(0, 0);
		const Vector2D DEFAULT = Vector2D(1, 1);
		const int RATE = 10000;
		const float FAST = 0.65f;
		string mTitle;
		int mRequiredScore;
		bool mLooping;
		bool mSwitched;
		bool mSpeed;
		int mFoodScore;
		int mRows;
		int mColumbs;
		float mSpawnRate;
		int mFoodPotency;
		float mNormalSpeed;
		float mFastSpeed;
		float mNeededLength;
		float mTimeLeft;
		const float SPEED = 100;
		float mTiming;
		vector<vector<Vector2D>> mCellPos;
		vector<Vector2D> mSnakePos;
		vector<Vector2D> mSnakeCells;
		vector<Vector2D> mWallPos;
		vector<Vector2D> mPowerPos;
		vector<Vector2D> mFoodPos;
		Vector2D mHeadPoS;
		Vector2D mHeadPos;
		Vector2D mSnakeHeadPos;
		Vector2D mStartingPos;
		Vector2D mScale;
		Vector2D mCellDimensions;
		Vector2D mDimensions;
		Sprite* mpSprite;
	public:
		Level();
		Level(GraphicsBuffer* buff, int rows, int colums, int score, string title, float spawn, float speed, int length, int food);
		Level(GraphicsBuffer* buff, int rows, int colums, int score, string title, float spawn, float speed, int length, int food, Vector2D xToYScale);
		void CheckSnake(SnakeManager* snaMan, double dt, Vector2D scale);
		void PlaceSnake();
		void PlaceWalls(WallManager* walMan, vector<Vector2D> walCells);
		void PlaceFood(FoodManager* foodMan);
		void PlacePower(PowerUpManager* upMan);
		void draw();
		bool SnakeCollision();
		Vector2D getStartingPosition();
		Vector2D loop(HeadDirection head, int hi, int wi);
		bool unOverlapping(vector<Vector2D> objects, Vector2D pos);
		Vector2D getHeadCell();
		int getHeadX();
		int getHeadY();
		int getCellHeadX();
		int getCellHeadY();
		int getLevelWidth();
		int getLevelHeight();
		HeadDirection getFacing();
		vector<Vector2D> getSnakeBody();
		vector<Vector2D> getWalls();
		vector<Vector2D> getFood();
		int getFoodX(int power);
		int getFoodY(int power);
		vector<Vector2D> getPowerup();
		Sprite returnBackground();
		void setSpeed(float speed);
		void makeFast();
		void deleteFood(int dele);
		void deletePower(int dele);
		int foodFullness();
		void switchSpeed();
		vector<Vector2D> limbs();
		bool isFull(int take);
		bool returnRate();
		Vector2D getScale();
};