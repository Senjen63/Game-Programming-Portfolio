/*

Data
• The allegro display

Functions
• Constructor/Destructor
• Init/Cleanup
• Accessors (height, width, back buffer)
• Flip – call the al_flip function to display what is in the Back Buffer

Could be static or non-static functions (up to you):
• Draw (target loc, Sprite, scale  (default to 1.0)  ) - draw to current backbuffer
• Draw(target graphics buffer, target loc, Sprite, scale  (default to 1.0) ) - draw to given

GraphicsBuffer
• WriteText(target loc, Font, Color, text) – write to current backbuffer
• WriteText(target graphics buffer, target loc, Font, Color, text) – write to given GraphicsBuffer
• SaveBuffer(buffer to save, filename) – save the contents of a GraphicsBuffer to a file

*/
using namespace std;
#include "GraphicsSystem.h"
GraphicsSystem::GraphicsSystem(int width, int height)
{
	mpBackBuffer = nullptr;
	//mpDisplay = nullptr;
	mWidth = width;
	mHeight = height;
}

GraphicsSystem::~GraphicsSystem()
{
	//mpDisplay = nullptr;

	delete mpBackBuffer;
	mpBackBuffer = nullptr;
}

bool GraphicsSystem::Init() 
{
	if (!al_init())
	{
		cout << "error initting Allegro\n";
		system("pause");
		return false;
	}
	if (!al_init_image_addon())
	{
		cout << "error - Image Add-on not initted\n";
		system("pause");
		return false;
	}
	if (!al_init_font_addon())
	{
		cout << "error - Font Add-on not initted\n";
		system("pause");
		return false;
	}
	if (!al_init_ttf_addon())
	{
		cout << "error - TTF Add-on not initted\n";
		system("pause");
		return false;
	}
	if (!al_init_primitives_addon())
	{
		cout << "error - primitives Add-on not initted\n";
		system("pause");
		return false;
	}
	if (!al_install_audio())
	{
		cout << "error - Audio Add-on not initted\n";
		system("pause");
		return false;
	}
	if (!al_init_acodec_addon())
	{
		cout << "error - Audio Codec Add-on not initted\n";
		system("pause");
		return false;
	}
	if (!al_reserve_samples(1))
	{
		cout << "error - samples not reserved\n";
		system("pause");
		return false;
	}


	mpDisplay = al_create_display(mWidth, mHeight);
	mpBackBuffer = new GraphicsBuffer( al_get_backbuffer(mpDisplay));
	return true;
}

void GraphicsSystem::Cleanup()
{
	al_destroy_display(mpDisplay);
}

void GraphicsSystem::Flip()
{
	al_flip_display();
}

//draw for gb, no location or anything
void GraphicsSystem::draw(GraphicsBuffer* pBuffer)
{
	al_draw_bitmap(pBuffer->getBMP(), 0, 0, 0);
}

//draw for sprite
void GraphicsSystem::draw(Vector2D location, Sprite* pSprite, Vector2D destination)
{
	al_draw_bitmap_region(pSprite->getGraphicsBufferSprite()->getBMP(),
		pSprite->getSourceLoc().getX(),
		pSprite->getSourceLoc().getY(),
		pSprite->getWidthHeight().getY(),
		pSprite->getWidthHeight().getY(),
		destination.getX(),
		destination.getY(),
		0);
}

//draw for gb
void GraphicsSystem::draw(GraphicsBuffer* pBuffer, float locationX, float locationY, float xScale, float yScale)
{
	al_set_target_bitmap(al_get_backbuffer(mpDisplay));
	al_draw_scaled_bitmap(pBuffer->getBMP(),
		0,
		0,
		pBuffer->getBMWidth(),
		pBuffer->getBMHeight(), 
		locationX,
		locationY,
		pBuffer->getBMWidth() * xScale,
		pBuffer->getBMHeight() * yScale,
		0);
}

//draw for gb to gb
void GraphicsSystem::draw(GraphicsBuffer* pTarget, GraphicsBuffer* pBuffer, Vector2D location, float xScale, float yScale)
{
	ALLEGRO_BITMAP* oldBitmap = al_get_target_bitmap();

	al_set_target_bitmap(pTarget->getBMP());
	al_draw_scaled_bitmap(pBuffer->getBMP(), 
		0, 
		0, 
		pBuffer->getBMWidth(), 
		pBuffer->getBMHeight(),
		location.getX(), 
		location.getY(), 
		pBuffer->getBMWidth() * xScale, 
		pBuffer->getBMHeight() * yScale, 
		0);

	al_set_target_bitmap(oldBitmap);
}

//draw for gb & sprite (allows for scaling, drawing to a bitmap owned by passed graphics buffer)
void GraphicsSystem::draw(GraphicsBuffer* pGraphicsBuffer, Vector2D location, Sprite* pSprite, float xScale, float yScale)
{
	al_draw_scaled_bitmap(pGraphicsBuffer->getBMP(),
		0,
		0,
		pSprite->getWidthHeight().getX(),
		pSprite->getWidthHeight().getY(),
		location.getX(), location.getY(),
		pSprite->getWidthHeight().getX() * xScale,
		pSprite->getWidthHeight().getY() * yScale,
		0);
}


/*target loc, Font, Color, text*/
void GraphicsSystem::writeText(Vector2D targetLoc, Font* pFont, Color pColor, string printText)
{
	cout << pColor.getRed() << " " << pColor.getGreen() << " " << pColor.getBlue() << " " << pColor.getAlpha() << endl;
	ALLEGRO_COLOR newCol = al_map_rgba(pColor.getRed(), pColor.getGreen(), pColor.getBlue(), pColor.getAlpha());
	al_draw_text(pFont->mpFont, newCol, targetLoc.getX(), targetLoc.getY(), 0, printText.c_str());
}

/*target graphics buffer, target loc, Font, Color, text*/
void GraphicsSystem::writeText(GraphicsBuffer* targetBuffer, Vector2D targetLoc, Font* pFont, Color pColor, string printText) 
{
	ALLEGRO_COLOR newCol = al_map_rgba(pColor.getRed(), pColor.getGreen(), pColor.getBlue(), pColor.getAlpha());
	ALLEGRO_BITMAP* oldBitmap = al_get_target_bitmap();
	al_set_target_bitmap(targetBuffer->mpBMP);

	al_draw_text(pFont->mpFont, newCol, targetLoc.getX(), targetLoc.getX(), pFont->mFlag, printText.c_str());

	al_set_target_bitmap(oldBitmap);
}

/*buffer to save, filename*/
bool GraphicsSystem::SaveBuffer(string filename, ALLEGRO_BITMAP* pSaveBuffer)
{
	if (al_save_bitmap(filename.c_str(), pSaveBuffer))
	{
		return true;
	}

	cout << "ERROR - Save Failed" << endl;
	return false;
}

int GraphicsSystem::getHeight()
{
	return mHeight;
}

int GraphicsSystem::getWidth()
{
	return mWidth;
}

GraphicsBuffer* GraphicsSystem::getBuffer()
{
	return mpBackBuffer;
}