#include "Game.h"
#include "InputSystem.h"
#include "GraphicsSystem.h"
#include "GraphicsBufferManager.h"
#include "GraphicsBuffer.h"
#include "Sprite.h"
#include "Animation.h"
#include "UnitManager.h"
#include "Unit.h"
#include "Vector2D.h"
#include "Timer.h"
#include <vector>
#include <PerformanceTracker.h>

Game* Game::gpGame = nullptr;

Game::Game()
{
	this->mIsGameContinuing = true;
	
	this->mpInputSystem = nullptr;

	this->mpGraphicsSystem = nullptr;

	this->mpBufferManager = nullptr;

	this->mpUnitManager = nullptr;

	this->mpWoodsSprite = nullptr;

	this->mpTimer = nullptr;

	this->mpPerformanceTracker = nullptr;
}

Game::~Game()
{
	cleanup();
}

void Game::init()
{

	mpGraphicsSystem = new GraphicsSystem;
	mpGraphicsSystem->init(DISP_WIDTH, DISP_HEIGHT);

	mpInputSystem = new InputSystem;
	mpInputSystem->init();

	mpBufferManager = new GraphicsBufferManager();

	mpUnitManager = new UnitManager();

	mpBufferManager->createGraphicsBuffer(WOODS_KEY, WOODS_IMAGE);
	mpBufferManager->createGraphicsBuffer(SMURF_KEY, SMURF_IMAGE);
	mpBufferManager->createGraphicsBuffer(DEAN_KEY, DEAN_IMAGE);

	mpWoodsSprite = new Sprite(ORIGIN_LOCATION, mpBufferManager->getGraphicsBuffer(WOODS_KEY), 
							   mpBufferManager->getGraphicsBuffer(WOODS_KEY)->getBitmapWidth(), mpBufferManager->getGraphicsBuffer(WOODS_KEY)->getBitmapHeight());

	mSmurfAnimation = Animation(true, 200);
	mDeanAnimation = Animation(true, 200);

	for (float r = 1; r <= ROW; r++)
	{
		for (float c = 1; c <= COLUMN; c++)
		{
			const int SMURF_X = ((mpBufferManager->getGraphicsBuffer(SMURF_KEY)->getBitmapWidth() / ROW) * r) - 
				                 (mpBufferManager->getGraphicsBuffer(SMURF_KEY)->getBitmapWidth() / ROW);
			const int SMURF_Y = ((mpBufferManager->getGraphicsBuffer(SMURF_KEY)->getBitmapHeight() / COLUMN) * c) -
				                 (mpBufferManager->getGraphicsBuffer(SMURF_KEY)->getBitmapHeight() / COLUMN);

			Vector2D spriteLocation = Vector2D(SMURF_X, SMURF_Y);
			Sprite smurfSprite = Sprite(spriteLocation, mpBufferManager->getGraphicsBuffer(SMURF_KEY),
									   (mpBufferManager->getGraphicsBuffer(SMURF_KEY)->getBitmapWidth() / ROW),
									   (mpBufferManager->getGraphicsBuffer(SMURF_KEY)->getBitmapHeight() / COLUMN));
			mSmurfAnimation.addSprite(smurfSprite);

			Sprite deanSprite = Sprite(spriteLocation, mpBufferManager->getGraphicsBuffer(DEAN_KEY),
									  (mpBufferManager->getGraphicsBuffer(DEAN_KEY)->getBitmapWidth() / ROW),
									  (mpBufferManager->getGraphicsBuffer(DEAN_KEY)->getBitmapHeight() / COLUMN));

			mDeanAnimation.addSprite(deanSprite);
		}
	}

	mpTimer = new Timer();
	mpPerformanceTracker = new PerformanceTracker();
}

void Game::cleanup()
{
	delete mpInputSystem;
	delete mpGraphicsSystem;
	delete mpBufferManager;
	delete mpWoodsSprite;
	delete mpUnitManager;
	delete mpTimer;
	delete mpPerformanceTracker;
}

void Game::gameLoop()
{
	while (mIsGameContinuing)
	{
		mpPerformanceTracker->clearTracker(LOOP);
		mpPerformanceTracker->startTracking(LOOP);
		mpTimer->start();

		bool enterPressed = mpInputSystem->getCurrentInput(mpInputSystem->KEY_ENTER);
		bool escapePressed = mpInputSystem->getCurrentInput(mpInputSystem->KEY_ESCAPE);
		bool spacePressed = mpInputSystem->getCurrentInput(mpInputSystem->KEY_SPACE);
		bool leftMousePressed = mpInputSystem->getCurrentInput(mpInputSystem->LEFT_MOUSE_BUTTON);
		bool rightMousePressed = mpInputSystem->getCurrentInput(mpInputSystem->RIGHT_MOUSE_BUTTON);

		if (spacePressed)
		{
			for (auto u : mpUnitManager->getAllUnits())
			{
				u->pauseAnim();
			}
		}
		else
		{
			for (auto u : mpUnitManager->getAllUnits())
			{
				u->resumeAnim();
			}
		}

		if (enterPressed)
		{
			mpUnitManager->getAllUnits().back()->swapAnim();
		}

		if (escapePressed)
		{
			mIsGameContinuing = false;
		}
		
		if (leftMousePressed)
		{
			Vector2D newPos = Vector2D(mpInputSystem->getMousePosition().getX() - (SMURF_SIZE / 2),
				                       mpInputSystem->getMousePosition().getY() - (SMURF_SIZE / 2));

			mpUnitManager->createUnit(newPos, mSmurfAnimation, mDeanAnimation);
		}
		
		if (rightMousePressed)
		{
			mpUnitManager->deleteUnit(mpInputSystem->getMousePosition());
		}

		mpGraphicsSystem->draw(ORIGIN_LOCATION, *mpWoodsSprite, BACKGROUND_SCALE);
		mpUnitManager->drawAllUnits();

		mpGraphicsSystem->flip();

		mpUnitManager->updateAllUnits(ANIM_TICK);

		mpTimer->sleepUntilElapsed(ANIM_TICK);

		mpPerformanceTracker->stopTracking(LOOP);
		std::cout << mpPerformanceTracker->getElapsedTime(LOOP) << std::endl;
	}
}