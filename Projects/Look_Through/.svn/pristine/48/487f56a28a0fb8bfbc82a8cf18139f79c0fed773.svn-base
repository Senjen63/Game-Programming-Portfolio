#include "Animation.h"

Animation::Animation()
{
	mTimePerFrame = 1000.0 / 12;
	mTimeLeft = 0;
	mCurrentSprite = 0;
}

Animation::~Animation() {}

void Animation::addSprite(GraphicsBuffer* buffer, int x, int y, int height, int width)
{
	// create 16 sprites and add them to the vector
	int srcX, srcY;

	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			srcX = SMURF_PICTURE_SIZE * j;
			srcY = SMURF_PICTURE_SIZE * i;

			Sprite smurfSprite(buffer, srcX, srcY, (buffer->getHeight() / SMURF_PER_SOURCE), (buffer->getWidth() / SMURF_PER_SOURCE));

			mSmurfSprites.push_back(smurfSprite);
		}
	}
}

void Animation::update(double dt, bool playAnimation)
{
	// animates the sprites
	// finds remaining time

	// don't animate if bool is false
	if (!playAnimation)
		return;

	mTimeLeft -= dt;
	if (mTimeLeft <= 0)
	{
		// loops while there is remaining time
		mCurrentSprite++;
		mTimeLeft = mTimePerFrame + mTimeLeft;

		// if reached the end of the vector, move back to the front again
		if (mCurrentSprite >= MAX_NUM_OF_SMURFS)
			mCurrentSprite = 0;
	}
	
}

Sprite Animation::getCurrentSprite()
{
	return mSmurfSprites[mCurrentSprite];
}

//void Animation::speedUp()
//{
//	mTimePerFrame = 1000.0 / 50;
//}
//
//void Animation::slowDown()
//{
//	mTimePerFrame = 1000.0 / 5;
//}

void pauseAndPlay(bool playAnimation)
{

}