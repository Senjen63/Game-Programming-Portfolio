#include "include/GraphicsSystem.hpp"

#include <iostream>
#include <SDL_image.h>
#include <SDL_ttf.h>

GraphicsSystem::GraphicsSystem()
{
    mWidth = 0;
    mHeight = 0;
    mpWindow = nullptr;
    mpRenderer = nullptr;
}

GraphicsSystem::~GraphicsSystem()
{
    cleanup();
}

bool GraphicsSystem::init( const char * windowName, const int width, const int height, const char * pIconPath )
{
    if ( SDL_Init( SDL_INIT_EVERYTHING ) < 0 )
    {
        std::cout << "SDL init failed: " << SDL_GetError() << std::endl;
        return false;
    }

    if ( IMG_Init( IMG_INIT_JPG ) < 0 )
    {
        std::cout << "SDL image init failed: " << IMG_GetError() << std::endl;
        cleanup();
        return false;
    }

    if ( TTF_Init() < 0 )
    {
        std::cout << "SDL ttf init failed: " << TTF_GetError() << std::endl;
        cleanup();
        return false;
    }
    
    mpWindow = SDL_CreateWindow( windowName, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, width, height, 0);
    
    if(pIconPath != nullptr)
    {
        SDL_Surface * pIcon = IMG_Load( pIconPath );
        SDL_SetWindowIcon( mpWindow, pIcon );
        SDL_FreeSurface( pIcon );
    }

    if ( !mpWindow )
    {
        std::cout << "Window creation failed: " << SDL_GetError() << std::endl;
        cleanup();
        return false;
    }

    mWidth = width;
    mHeight = height;

    mpRenderer = SDL_CreateRenderer( mpWindow, -1, SDL_RENDERER_ACCELERATED );

    if ( !mpRenderer )
    {
        std::cout << "Renderer creation failed: " << SDL_GetError() << std::endl;
        cleanup();
        return false;
    }

    return true;
}

void GraphicsSystem::cleanup()
{
    
    if ( mpRenderer )
    {
        SDL_DestroyRenderer( mpRenderer );
    }

    if ( mpWindow )
    {
        SDL_DestroyWindow( mpWindow );
    }

    mpRenderer = nullptr;
    mpWindow = nullptr;

    IMG_Quit();
    TTF_Quit();
    SDL_Quit();
}

void GraphicsSystem::clearScreen( const Color & color ) const
{
    SDL_SetRenderDrawColor( mpRenderer, color.r, color.g, color.b, color.a );
    SDL_RenderClear( mpRenderer );
}

Font * GraphicsSystem::createFont( const char * pFilename, const int fontSize, const Color & color, const Font::Style style ) const
{
    return new Font( pFilename, mpRenderer, fontSize, color, style );
}

void GraphicsSystem::drawBuffer( const GraphicsBuffer * pBuffer, const Rect2D & destination ) const
{
    SDL_RenderCopy( mpRenderer, pBuffer->mpTexture, nullptr, &destination.mpRect );
}

void GraphicsSystem::drawBuffer( const GraphicsBuffer * pBuffer, const Rect2DF & destination ) const
{
    SDL_RenderCopyF( mpRenderer, pBuffer->mpTexture, nullptr, &destination.mpRect );
}

void GraphicsSystem::drawSprite( const Sprite * pSprite, const Rect2D & destination ) const
{
    SDL_RenderCopy( mpRenderer, pSprite->mpBuffer->mpTexture, &pSprite->mpAtlasRect->mpRect, &destination.mpRect );
}

void GraphicsSystem::drawSprite( const Sprite * pSprite, const Rect2DF & destination ) const
{
    SDL_RenderCopyF( mpRenderer, pSprite->mpBuffer->mpTexture, &pSprite->mpAtlasRect->mpRect, &destination.mpRect );
}

void GraphicsSystem::drawSpriteCentered( const Sprite * pSprite, const Rect2DF & destination ) const
{
    const SDL_FRect newDest{ destination.x - destination.w / 2, destination.y - destination.h / 2, destination.w, destination.h };

    SDL_RenderCopyF( mpRenderer, pSprite->mpBuffer->mpTexture, &pSprite->mpAtlasRect->mpRect, &newDest );
}

int GraphicsSystem::getWidth() const
{
    return mWidth;
}

int GraphicsSystem::getHeight() const
{
    return mHeight;
}

void GraphicsSystem::renderScreen() const
{
    SDL_RenderPresent( mpRenderer );
}

void GraphicsSystem::writeText( const Font * pFont, const char * pText, const float xPos, const float yPos, Font::Align alignment ) const
{
    FC_DrawAlign( pFont->mpFont, mpRenderer, xPos, yPos, static_cast< FC_AlignEnum >(alignment), pText );
}
