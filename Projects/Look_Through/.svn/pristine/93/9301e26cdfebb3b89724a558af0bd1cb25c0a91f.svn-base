#pragma once

#include <string>

#include <Trackable.h>

struct ALLEGRO_DISPLAY;

class Vector2D;
class GraphicsBuffer;
class Sprite;
class Color;
class Font;

using namespace std;

class GraphicsSystem : public Trackable
{
public:

	static GraphicsSystem* getInstance();
	static void createInstance();
	static void destroyInstance();

	void init(int width, int height);
	void cleanup();
	void flip();

	int getHeight();
	int getWidth();
	GraphicsBuffer* getBackBuffer();

	void draw(Vector2D loc, Sprite* pSprite, float scale = 1.0);
	void draw(Vector2D loc, GraphicsBuffer* pBuffer, float scale = 1.0);
	void draw(GraphicsBuffer* pBuffer, Vector2D loc, Sprite* pSprite, float scale = 1.0);
	void fillColor(Color color);
	void fillColor(GraphicsBuffer* pBuffer, Color color);
	void writeText(Vector2D loc, Font* pFont, Color color, string text);
	void writeText(GraphicsBuffer* pBuffer, Vector2D loc, Font* pFont, Color color, string text);
	void saveBuffer(GraphicsBuffer* pBuffer, string fileName);

private:

	GraphicsSystem();
	~GraphicsSystem();

	static GraphicsSystem* mpsGraphicsSystem;

	ALLEGRO_DISPLAY* mpDisplay;
	GraphicsBuffer* mpBackBuffer = nullptr;
};

