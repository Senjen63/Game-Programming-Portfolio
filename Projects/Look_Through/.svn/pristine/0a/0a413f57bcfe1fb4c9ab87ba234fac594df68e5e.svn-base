#pragma once

#include <PerformanceTracker.h>
#include <MemoryTracker.h>

#include "Animation.h"
#include "Vector2D.h"

class Unit : public Trackable
{
private:
	Vector2D mPosition;
	int mCurrentAnim;
	float mTime;
	float mTiming;
	Animation* mpAnimation1;
	Animation* mpAnimation2;
	Sprite* mpSprite;
	bool mPaused;
	string mText;

public:
	Unit();
	Unit(GraphicsBuffer* pBuffer, int numFrames);
	Unit(GraphicsBuffer* pBuffer);
	Unit(GraphicsBuffer* pBuffer, Vector2D location, int width, int height, string text);
	Unit(GraphicsBuffer* pBuffer, Vector2D location);
	Unit(Animation* pAnim1);
	Unit(Animation* pAnim1, Vector2D location);
	~Unit();

	float getTiming();

	void update(float elapsedTime);
	void update(float elapsedTime, Vector2D newPos);
	void draw(GraphicsSystem* pGraphicsSystem);
	void drawWithText(GraphicsSystem* pGraphicsSystem);
	Sprite* currentSprite();

	void setAnimation();
	void setTiming(float timing);
	void setPosition(Vector2D position);
	void setSprite(Sprite* sprite);
	void setPaused();

	Vector2D getPosition();

	bool checkMouseCollision(Vector2D mousePos);

	string getText() { return mText; };
	void setText(string text) { mText = text; };
	void changeColor(Color color) { mpSprite->clearToColor(color); };
	void changeBuffer(GraphicsBuffer* buffer) { mpSprite->changeBuffer(buffer); };
};
