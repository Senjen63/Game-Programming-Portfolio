#pragma once
#include "Animation.h"
#include "Vector2D.h"
#include <PerformanceTracker.h>
#include <MemoryTracker.h>

class Unit : public Trackable
{
protected:
	Vector2D mPosition;
	int mCurrentAnim;
	float mTime;
	Animation* mpAnim1;
	bool mIsPaused;
	bool mHasAnimation = false;
	Sprite* mSprite;
	Unit* mNextSegment;
	bool mIsWall = false;
	bool mIsPlayer = false; //bad way of determining if class is derived or not, but it seems to be the easiest. 
	bool mIsAnimating = false;
	bool mIsGate = false;
	bool mIsUI = false;
	int mUnitWidth;
	int mUnitHeight;
	bool mIsChild = false;
	bool mHasSprite = true;
	bool mIsObstacle;
	Unit* mParent;
	Vector2D mParentOffset;
	bool mCollTriggered;
public:
	Unit();
	Unit(Animation* pAnim1, Vector2D position);
	Unit(GraphicsBuffer* pBuffer, int spriteW, int spriteH);
	~Unit();

	float GetTime();
	Sprite* CurrentSprite();
	bool GetWall();
	bool GetGate();
	bool GetPlayer();
	bool GetUI();
	bool GetObstacle();
	void SetPlayer(bool isPlayer);
	void SetGate(bool isGate);
	void SetUI(bool isUI);
	void SetWall();
	void SetObstacle(bool isObstacle);
	void SetAnimation(bool isAnimating);
	virtual void Update(float t);
	void Draw(GraphicsSystem* pGraphicsSystem);
	void SwitchAnimation();
	void SetTime(float t);
	Vector2D GetPosition();
	void SetPosition(Vector2D position);
	void TogglePause();
	void SetNextSegment(Unit* nextSegment);
	Unit* GetLastSegment();
	void SetHitboxDimensions(int x, int y);
	Vector2D GetHitboxDimensions();
	void SetParent(Unit* parent);
	void SetCollTriggered(bool colTrigger);
	bool GetCollTriggered();
	Unit* GetParent();
};