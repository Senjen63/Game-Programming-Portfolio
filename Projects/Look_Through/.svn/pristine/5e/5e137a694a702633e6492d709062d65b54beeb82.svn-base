#include "UnitManager.h"
#include "Animation.h"
#include "Game.h"

UnitManager::UnitManager()
{
	mNumUnits = 0;
}

UnitManager::~UnitManager()
{
	cleanup();
}

void UnitManager::cleanup()
{
	for (int i = 0; i < mNumUnits; i++)
	{
		Unit* pUnit = mpUnits[i];
		delete pUnit;
	}

	mNumUnits = 0;
	mpUnits.clear();
}

void UnitManager::createAndAddUnit(Animation* pAnim)
{
	//create unit
	Unit* pUnit = new Unit(pAnim);
	//manage the unit
	mpUnits.push_back(pUnit);
	mNumUnits++;
}

void UnitManager::createAndAddUnit(GraphicsBuffer* pBuffer)
{
	//create unit
	Unit* pUnit = new Unit(pBuffer);
	//manage the unit
	mpUnits.push_back(pUnit);
	mNumUnits++;
}

void UnitManager::createAndAddUnit(GraphicsBuffer* pBuffer, Vector2D location, int width, int height, string text)
{
	//create unit
	Unit* pUnit = new Unit(pBuffer, location, width, height, text);
	//manage the unit
	mpUnits.push_back(pUnit);
	mNumUnits++;
}

void UnitManager::createAndAddUnit(GraphicsBuffer* pBuffer, Vector2D location)
{
	//create unit
	Unit* pUnit = new Unit(pBuffer, location);
	//manage the unit
	mpUnits.push_back(pUnit);
	mNumUnits++;
}

void UnitManager::setUnitPos(int index, Vector2D& position)
{
	mpUnits[index]->setPosition(position);
}

void UnitManager::destroyUnit(Unit* pUnitToDestroy)
{
	for (int i = 0; i < mNumUnits; i++)
	{
		Unit* pUnit = mpUnits[i];
		if (pUnit == pUnitToDestroy)
		{
			delete pUnit;
			mpUnits.erase(mpUnits.begin() + i);
			mNumUnits--;
			break;
		}
	}
}

void UnitManager::deleteUnits(Vector2D position)
{
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;

		if (pUnit->getPosition() == position)
		{
			destroyUnit(pUnit);
			break;
		}
	}
}

bool UnitManager::detectUnits(Vector2D location)
{
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		
		if (pUnit->getPosition() == location)
			return true;
	}

	return false;
}

bool UnitManager::detectUnits()
{
	if (mNumUnits != 0)
	{
		Vector2D head = mpUnits[0]->getPosition();

		for (int i = 1; i < mNumUnits; i++)
		{
			Unit* pUnit = mpUnits[i];

			if (pUnit->getPosition() == head)
				return true;
		}

	}
	return false;
}

void UnitManager::update(float elapsedTime)
{
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->update(elapsedTime);
	}
}

void UnitManager::update(float elapsedTime, Vector2D newPos)
{
	int i = 0;
	Vector2D newPosition;

	for (i = getNumUnits() - 1; i > 0; i--)
	{
		newPosition = mpUnits[i - 1]->getPosition();
		mpUnits[i]->update(elapsedTime, newPosition);
	}

	//move the head
	if (getNumUnits() != 0)
		mpUnits[i]->update(elapsedTime, mpUnits[i]->getPosition() + newPos);
}

void UnitManager::updateTiming(float amount)
{
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->setTiming(amount);
	}
}

void UnitManager::doAnimation()
{
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->setPaused();
	}
}

void UnitManager::draw(GraphicsSystem* pGraphicsSystem)
{
	for (vector<Unit*>::iterator iter = mpUnits.begin(); iter != mpUnits.end(); ++iter)
	{
		Unit* pUnit = *iter;
		pUnit->draw(pGraphicsSystem);
	}
}

void UnitManager::drawWithText(GraphicsSystem* pGraphicsSystem, int index)
{
	getUnit(index)->drawWithText(pGraphicsSystem);
//		pUnit->drawWithText(pGraphicsSystem);
}

Unit* UnitManager::getUnit()
{
	if (mpUnits.size() > 0)
		return mpUnits[0];
	else
		return nullptr;
}

Unit* UnitManager::getUnit(int index)
{
	if (index <= mNumUnits)
		return mpUnits[index];
	else
		return NULL;
}
