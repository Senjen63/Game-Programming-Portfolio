
#include <iostream>
#include <cassert>
#include <string>

#include <PerformanceTracker.h>
#include <MemoryTracker.h>
#include <Vector2D.h>
#include <Timer.h>

#include "Unit.h"
#include "Game.h"


//----------------------------------------Unit----------------------------------------
Unit::Unit()
{
	unitXPos = 0;
	unitYPos = 0;
	currentAnimation = nullptr;
}

Unit::Unit(int x, int y, Animation* animation)
{
	unitXPos = x;
	unitYPos = y;
	//currentAnimation = new Animation();
	currentAnimation = animation;
}

Unit::~Unit()
{

}

//change to new animation
void Unit::setAnimation(Animation* newAnimation) 
{
	this->currentAnimation = newAnimation;
}

//adjust state of animation through Animation's update function + other
void Unit::update()
{
	currentAnimation->update();
}

//draw current sprite in unit location
void Unit::draw()
{
	Game::getInstance()->getGraphicsSystem()->draw(unitXPos, unitYPos, currentAnimation->getCurrentSprite());
}

bool Unit::Collision(int x, int y)
{
	bool a = (unitXPos < x);
	bool b = (x < (unitXPos + currentAnimation->getCurrentSprite().getWidth()));
	bool c = (unitYPos < y);
	bool d = (y < (unitYPos + currentAnimation->getCurrentSprite().getHeight()));
	
	if (a && b && c && d)
	{
		return true;
	}
}